
M16 SPI MASTER TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000012e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040a  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000101  00000000  00000000  00000d82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000193  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  00001333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8a:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z19SPI_MASTER_M16_initv>:
#define MOSI 5
#define SS 4

void SPI_MASTER_M16_init()
{
	DDRB |= (1 << MOSI)|(1 << SCK)|(1 << SS);
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6b       	ori	r24, 0xB0	; 176
  d0:	87 bb       	out	0x17, r24	; 23
	
	DDRB &= ~(1 << MISO);
  d2:	be 98       	cbi	0x17, 6	; 23
	
	SPCR |= (1 << SPIE)|(1 << SPE)|(1 << MSTR)|(1 << SPR0);//****16分频
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	81 6d       	ori	r24, 0xD1	; 209
  d8:	8d b9       	out	0x0d, r24	; 13
	
	
	
}
  da:	08 95       	ret

000000dc <_Z18SPI_SLAVE_M16_initv>:


void SPI_SLAVE_M16_init()
{
	DDRB |= (1<<MISO);
  dc:	be 9a       	sbi	0x17, 6	; 23
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SS));
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 74       	andi	r24, 0x4F	; 79
  e2:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPIE)|(1<<SPE)|(1<<SPR0);//***********LSB和MSB的顺序很重要 可能会让数据乱掉 一定注意 16分频
  e4:	8d b1       	in	r24, 0x0d	; 13
  e6:	81 6c       	ori	r24, 0xC1	; 193
  e8:	8d b9       	out	0x0d, r24	; 13

}
  ea:	08 95       	ret

000000ec <_Z18SPI_MasterTransmitc>:

void SPI_MasterTransmit(char cData)
{
	PORTB &= ~(1 << SS);
  ec:	c4 98       	cbi	0x18, 4	; 24
	
	SPCR |= (1 << MSTR);// MSTR有时会被清零，这里强制进入主机模式
  ee:	6c 9a       	sbi	0x0d, 4	; 13
	
	SPDR = cData;
  f0:	8f b9       	out	0x0f, r24	; 15
	
	//********最好在中断中写一句 PORTB |= (1 << SS);这样来恢复
}
  f2:	08 95       	ret

000000f4 <__vector_10>:
#include <avr/interrupt.h>
#include <E:\kuaipan\EDEN\avr\system\lib_delay.h>
#include <E:\kuaipan\EDEN\avr\function\lib_spi.h>

ISR(SPI_STC_vect)
{
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
	
}
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <main>:


int main(void)
{
	
	SPI_MASTER_M16_init();
 108:	0e 94 66 00 	call	0xcc	; 0xcc <_Z19SPI_MASTER_M16_initv>
	
	sei();
 10c:	78 94       	sei
	
	
    while(1)
    {
        for (char i = 0;i < 10;i ++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
        {
			SPI_MasterTransmit(i);
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 76 00 	call	0xec	; 0xec <_Z18SPI_MasterTransmitc>
			
			delay_second(30);
 118:	8e e1       	ldi	r24, 0x1E	; 30
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	sei();
	
	
    while(1)
    {
        for (char i = 0;i < 10;i ++)
 120:	cf 5f       	subi	r28, 0xFF	; 255
 122:	ca 30       	cpi	r28, 0x0A	; 10
 124:	b0 f3       	brcs	.-20     	; 0x112 <main+0xa>
 126:	cd 2f       	mov	r28, r29
 128:	f4 cf       	rjmp	.-24     	; 0x112 <main+0xa>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
