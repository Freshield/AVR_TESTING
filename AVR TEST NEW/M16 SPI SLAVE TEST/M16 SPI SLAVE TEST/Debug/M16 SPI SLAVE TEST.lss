
M16 SPI SLAVE TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001c0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  00000266  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004a6  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015a  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ca  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  0000130c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ed  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8a:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z19SPI_MASTER_M16_initv>:
#define MOSI 5
#define SS 4

void SPI_MASTER_M16_init()
{
	DDRB |= (1 << MOSI)|(1 << SCK)|(1 << SS);
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	80 6b       	ori	r24, 0xB0	; 176
  d0:	87 bb       	out	0x17, r24	; 23
	
	DDRB &= ~(1 << MISO);
  d2:	be 98       	cbi	0x17, 6	; 23
	
	SPCR |= (1 << SPIE)|(1 << SPE)|(1 << MSTR)|(1 << SPR0);//****16分频
  d4:	8d b1       	in	r24, 0x0d	; 13
  d6:	81 6d       	ori	r24, 0xD1	; 209
  d8:	8d b9       	out	0x0d, r24	; 13
	
	
	
}
  da:	08 95       	ret

000000dc <_Z18SPI_SLAVE_M16_initv>:


void SPI_SLAVE_M16_init()
{
	DDRB |= (1<<MISO);
  dc:	be 9a       	sbi	0x17, 6	; 23
	DDRB &= ~((1<<MOSI)|(1<<SCK)|(1<<SS));
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 74       	andi	r24, 0x4F	; 79
  e2:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPIE)|(1<<SPE)|(1<<SPR0);//***********LSB和MSB的顺序很重要 可能会让数据乱掉 一定注意 16分频
  e4:	8d b1       	in	r24, 0x0d	; 13
  e6:	81 6c       	ori	r24, 0xC1	; 193
  e8:	8d b9       	out	0x0d, r24	; 13

}
  ea:	08 95       	ret

000000ec <_Z18SPI_MasterTransmitc>:

void SPI_MasterTransmit(char cData)
{
	PORTB &= ~(1 << SS);
  ec:	c4 98       	cbi	0x18, 4	; 24
	
	SPCR |= (1 << MSTR);// MSTR有时会被清零，这里强制进入主机模式
  ee:	6c 9a       	sbi	0x0d, 4	; 13
	
	SPDR = cData;
  f0:	8f b9       	out	0x0f, r24	; 15
	
	//********最好在中断中写一句 PORTB |= (1 << SS);这样来恢复
}
  f2:	08 95       	ret

000000f4 <_Z10nixie_initv>:
#define NIXIE_PIN PINA
#define uchar unsigned char
//*********************数码管初始化
void nixie_init()
{
	NIXIE_DDR = 0xff;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  f8:	1b ba       	out	0x1b, r1	; 27
	
}
  fa:	08 95       	ret

000000fc <_Z10nixie_showh>:
//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void nixie_show(uchar count)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	61 97       	sbiw	r28, 0x11	; 17
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	e0 e6       	ldi	r30, 0x60	; 96
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	91 e1       	ldi	r25, 0x11	; 17
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	91 50       	subi	r25, 0x01	; 1
 120:	e1 f7       	brne	.-8      	; 0x11a <_Z10nixie_showh+0x1e>
	
NIXIE_PORT=nixie[count];
 122:	fe 01       	movw	r30, r28
 124:	e8 0f       	add	r30, r24
 126:	f1 1d       	adc	r31, r1
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	8b bb       	out	0x1b, r24	; 27

}
 12c:	61 96       	adiw	r28, 0x11	; 17
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <_Z10nixie_flowv>:
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
 13e:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		nixie_show(count);
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z10nixie_showh>
		
		delay_second(30);
 148:	8e e1       	ldi	r24, 0x1E	; 30
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
       for(uchar count=0;count<=15;count++)
 150:	cf 5f       	subi	r28, 0xFF	; 255
 152:	c0 31       	cpi	r28, 0x10	; 16
 154:	b1 f7       	brne	.-20     	; 0x142 <_Z10nixie_flowv+0x4>
		nixie_show(count);
		
		delay_second(30);
		   
	   }		   
    }
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <__vector_10>:
#include <E:\kuaipan\EDEN\avr\device\lib_nixie.h>

char get = 0;

ISR(SPI_STC_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	2f 93       	push	r18
 166:	3f 93       	push	r19
 168:	4f 93       	push	r20
 16a:	5f 93       	push	r21
 16c:	6f 93       	push	r22
 16e:	7f 93       	push	r23
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	af 93       	push	r26
 176:	bf 93       	push	r27
 178:	ef 93       	push	r30
 17a:	ff 93       	push	r31
	
	get = SPDR;
 17c:	8f b1       	in	r24, 0x0f	; 15
 17e:	80 93 72 00 	sts	0x0072, r24
	
	nixie_show(get);
 182:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z10nixie_showh>
	
}
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <main>:

int main(void)
{
	SPI_SLAVE_M16_init();
 1a8:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z18SPI_SLAVE_M16_initv>
	
	nixie_init();
 1ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z10nixie_initv>
	
	sei();
 1b0:	78 94       	sei
	
	nixie_show(get);
 1b2:	80 91 72 00 	lds	r24, 0x0072
 1b6:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z10nixie_showh>
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <main+0x12>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
