
M16 INT0 TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  00000284  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000487  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000014b  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002bc  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001de  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8a:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>:
//**********************M16 INT2----PB2  INT1---PD3 INT0----PD2*****************//

//******************初始化
void EXTERNAL_INTERRUPT0_INIT_M16()
{
	DDRD |= (0 << PD2);
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
  d0:	92 9a       	sbi	0x12, 2	; 18
	MCUCR=(1<<ISC01);//外部中断0下降沿产生中断 
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	85 bf       	out	0x35, r24	; 53
	GICR=(1<<INT0);//开外部中断0
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	8b bf       	out	0x3b, r24	; 59
	
	TIMSK = 0x00;
  da:	19 be       	out	0x39, r1	; 57
}
  dc:	08 95       	ret

000000de <_Z28EXTERNAL_INTERRUPT2_INIT_M16v>:


//**********************************外部中断2
void EXTERNAL_INTERRUPT2_INIT_M16()
{
	DDRB &= ~(1<<2);
  de:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);
  e0:	c2 9a       	sbi	0x18, 2	; 24
	MCUCSR &= ~(1<<ISC2);//外部中断2 下降沿产生中断
  e2:	84 b7       	in	r24, 0x34	; 52
  e4:	8f 7b       	andi	r24, 0xBF	; 191
  e6:	84 bf       	out	0x34, r24	; 52
	GICR = (1<<INT2);//开外部中断2
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	8b bf       	out	0x3b, r24	; 59
	
	TIMSK = 0x00;
  ec:	19 be       	out	0x39, r1	; 57
}
  ee:	08 95       	ret

000000f0 <_Z10nixie_initv>:
#define NIXIE_PIN PINA
#define uchar unsigned char
//*********************数码管初始化
void nixie_init()
{
	NIXIE_DDR = 0xff;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  f4:	1b ba       	out	0x1b, r1	; 27
	
}
  f6:	08 95       	ret

000000f8 <_Z10nixie_showh>:
//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void nixie_show(uchar count)
{
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	61 97       	sbiw	r28, 0x11	; 17
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
 10c:	de 01       	movw	r26, r28
 10e:	11 96       	adiw	r26, 0x01	; 1
 110:	e0 e6       	ldi	r30, 0x60	; 96
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	91 e1       	ldi	r25, 0x11	; 17
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	e1 f7       	brne	.-8      	; 0x116 <_Z10nixie_showh+0x1e>
	
NIXIE_PORT=nixie[count];
 11e:	fe 01       	movw	r30, r28
 120:	e8 0f       	add	r30, r24
 122:	f1 1d       	adc	r31, r1
 124:	81 81       	ldd	r24, Z+1	; 0x01
 126:	8b bb       	out	0x1b, r24	; 27

}
 128:	61 96       	adiw	r28, 0x11	; 17
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	f8 94       	cli
 12e:	de bf       	out	0x3e, r29	; 62
 130:	0f be       	out	0x3f, r0	; 63
 132:	cd bf       	out	0x3d, r28	; 61
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <_Z10nixie_flowv>:
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
 13a:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 13c:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		nixie_show(count);
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z10nixie_showh>
		
		delay_second(30);
 144:	8e e1       	ldi	r24, 0x1E	; 30
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
       for(uchar count=0;count<=15;count++)
 14c:	cf 5f       	subi	r28, 0xFF	; 255
 14e:	c0 31       	cpi	r28, 0x10	; 16
 150:	b1 f7       	brne	.-20     	; 0x13e <_Z10nixie_flowv+0x4>
		nixie_show(count);
		
		delay_second(30);
		   
	   }		   
    }
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <main>:
uchar read;


int main(void)
{
	EXTERNAL_INTERRUPT0_INIT_M16();
 156:	0e 94 66 00 	call	0xcc	; 0xcc <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>
	nixie_init();
 15a:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z10nixie_initv>
	
	sei();
 15e:	78 94       	sei
	
    while(1)
    {
        nixie_show(number); 
 160:	80 91 73 00 	lds	r24, 0x0073
 164:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z10nixie_showh>
 168:	fb cf       	rjmp	.-10     	; 0x160 <main+0xa>

0000016a <__vector_1>:
    }
}

ISR(INT0_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	delay_reduce(100000);
 18c:	60 ea       	ldi	r22, 0xA0	; 160
 18e:	76 e8       	ldi	r23, 0x86	; 134
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	read = PIND;
 198:	80 b3       	in	r24, 0x10	; 16
	
	read &= 0x04;
 19a:	84 70       	andi	r24, 0x04	; 4
 19c:	80 93 72 00 	sts	0x0072, r24
	 
	if (read == 0)
 1a0:	88 23       	and	r24, r24
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <__vector_1+0x4e>
	{
	
	if (number < 16)
 1a4:	80 91 73 00 	lds	r24, 0x0073
 1a8:	80 31       	cpi	r24, 0x10	; 16
 1aa:	20 f4       	brcc	.+8      	; 0x1b4 <__vector_1+0x4a>
	{ 
		number ++;
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	80 93 73 00 	sts	0x0073, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <__vector_1+0x4e>
	}
	else
	{
		number = 0;
 1b4:	10 92 73 00 	sts	0x0073, r1
	}
    }
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
