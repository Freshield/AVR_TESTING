
M16 LCD1602 SHOW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000567  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000146  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000227  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000369  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 2a 01 	call	0x254	; 0x254 <main>
  8a:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#define uchar unsigned char


void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z13LCD_BUSY_WAITv>:
#define E_0() LCD_CON_PORT &= ~(1<<E)//***********液晶模块使能

//****************************忙等待
void LCD_BUSY_WAIT()
{
	RS_0();RW_1();
  cc:	c0 98       	cbi	0x18, 0	; 24
  ce:	c1 9a       	sbi	0x18, 1	; 24
	LCD_DAT_DDR=0X00;
  d0:	11 ba       	out	0x11, r1	; 17
	E_1();delay_reduce(10);
  d2:	c2 9a       	sbi	0x18, 2	; 24
  d4:	6a e0       	ldi	r22, 0x0A	; 10
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	while(LCD_DAT_PIN & 0x80);
  e0:	87 99       	sbic	0x10, 7	; 16
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <_Z13LCD_BUSY_WAITv+0x14>
	E_0();
  e4:	c2 98       	cbi	0x18, 2	; 24
	LCD_DAT_DDR=0xff;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	81 bb       	out	0x11, r24	; 17
	
	
}
  ea:	08 95       	ret

000000ec <_Z17WRITE_LCD_COMMANDh>:
//**************************LCD 写指令
void WRITE_LCD_COMMAND(uchar cmd)
{
  ec:	cf 93       	push	r28
  ee:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
  f0:	0e 94 66 00 	call	0xcc	; 0xcc <_Z13LCD_BUSY_WAITv>
	RS_0();RW_0();
  f4:	c0 98       	cbi	0x18, 0	; 24
  f6:	c1 98       	cbi	0x18, 1	; 24
	LCD_DAT_PORT = cmd;
  f8:	c2 bb       	out	0x12, r28	; 18
	E_1();E_0();
  fa:	c2 9a       	sbi	0x18, 2	; 24
  fc:	c2 98       	cbi	0x18, 2	; 24
	
}
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <_Z7LCD_POSh>:
//**************************LCD 写显示位置
void LCD_POS(uchar pos)
{
	WRITE_LCD_COMMAND(pos|0x80);
 102:	80 68       	ori	r24, 0x80	; 128
 104:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
	
	
}
 108:	08 95       	ret

0000010a <_Z14WRITE_LCD_DATAh>:
//************************LCD 写数据
void WRITE_LCD_DATA(uchar dat)
{
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
	LCD_BUSY_WAIT();
 10e:	0e 94 66 00 	call	0xcc	; 0xcc <_Z13LCD_BUSY_WAITv>
	RS_1();RW_0();
 112:	c0 9a       	sbi	0x18, 0	; 24
 114:	c1 98       	cbi	0x18, 1	; 24
	LCD_DAT_PORT = dat;
 116:	c2 bb       	out	0x12, r28	; 18
	E_1();E_0();
 118:	c2 9a       	sbi	0x18, 2	; 24
 11a:	c2 98       	cbi	0x18, 2	; 24
	
	
	
}
 11c:	cf 91       	pop	r28
 11e:	08 95       	ret

00000120 <_Z8LCD_initv>:
//*********************LCD 初始化
void LCD_init()
{
	
	LCD_DAT_DDR = 0XFF;
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	81 bb       	out	0x11, r24	; 17
	LCD_CON_DDR |= (1<<RS)|(1<<RW)|(1<<E);
 124:	87 b3       	in	r24, 0x17	; 23
 126:	87 60       	ori	r24, 0x07	; 7
 128:	87 bb       	out	0x17, r24	; 23
	WRITE_LCD_COMMAND(0x01);delay_reduce(15);//**********清屏
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 130:	6f e0       	ldi	r22, 0x0F	; 15
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x06);delay_reduce(15);//**********显示模式 光标移动
 13c:	86 e0       	ldi	r24, 0x06	; 6
 13e:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 142:	6f e0       	ldi	r22, 0x0F	; 15
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	WRITE_LCD_COMMAND(0x0c);delay_reduce(15);//**********显示开关
 14e:	8c e0       	ldi	r24, 0x0C	; 12
 150:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 154:	6f e0       	ldi	r22, 0x0F	; 15
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	//WRITE_LCD_COMMAND(0x1c);delay_reduce(15);//**********移动显示的文字
	WRITE_LCD_COMMAND(0x38);delay_reduce(15);//**********显示 2行显示 5*7
 160:	88 e3       	ldi	r24, 0x38	; 56
 162:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 166:	6f e0       	ldi	r22, 0x0F	; 15
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}
 172:	08 95       	ret

00000174 <_Z15LCD_SHOW_STRINGhhPc>:
//********************LCD 显示程序
void LCD_SHOW_STRING(uchar x,uchar y,char *str) 
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	14 2f       	mov	r17, r20
 17e:	05 2f       	mov	r16, r21
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
 180:	66 23       	and	r22, r22
 182:	39 f4       	brne	.+14     	; 0x192 <_Z15LCD_SHOW_STRINGhhPc+0x1e>
 184:	80 68       	ori	r24, 0x80	; 128
 186:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 18a:	c1 2f       	mov	r28, r17
 18c:	d0 2f       	mov	r29, r16
	
	
}
//********************LCD 显示程序
void LCD_SHOW_STRING(uchar x,uchar y,char *str) 
{
 18e:	10 e1       	ldi	r17, 0x10	; 16
 190:	06 c0       	rjmp	.+12     	; 0x19e <_Z15LCD_SHOW_STRINGhhPc+0x2a>
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
 192:	61 30       	cpi	r22, 0x01	; 1
 194:	d1 f7       	brne	.-12     	; 0x18a <_Z15LCD_SHOW_STRINGhhPc+0x16>
 196:	80 6c       	ori	r24, 0xC0	; 192
 198:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 19c:	f6 cf       	rjmp	.-20     	; 0x18a <_Z15LCD_SHOW_STRINGhhPc+0x16>
	
	for(count=0;count<16 && str[count]!='\0';count++)
 19e:	88 81       	ld	r24, Y
 1a0:	88 23       	and	r24, r24
 1a2:	29 f0       	breq	.+10     	; 0x1ae <_Z15LCD_SHOW_STRINGhhPc+0x3a>
 1a4:	21 96       	adiw	r28, 0x01	; 1
	WRITE_LCD_DATA(str[count]);
 1a6:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14WRITE_LCD_DATAh>
 1aa:	11 50       	subi	r17, 0x01	; 1
{
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
	
	for(count=0;count<16 && str[count]!='\0';count++)
 1ac:	c1 f7       	brne	.-16     	; 0x19e <_Z15LCD_SHOW_STRINGhhPc+0x2a>
	WRITE_LCD_DATA(str[count]);
	
	
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	08 95       	ret

000001b8 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc>:


//*******************LCD 逐个显示

void LCD_SAMPLE_SHOW_STRING(uchar x,uchar y,char *str)
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	d8 2f       	mov	r29, r24
 1c2:	c6 2f       	mov	r28, r22
 1c4:	8a 01       	movw	r16, r20
	WRITE_LCD_COMMAND(0x07);
 1c6:	87 e0       	ldi	r24, 0x07	; 7
 1c8:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
 1cc:	cc 23       	and	r28, r28
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x2a>
 1d0:	8d 2f       	mov	r24, r29
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
	
	for(count=0;str[count]!='\0';count++)
 1d8:	f8 01       	movw	r30, r16
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	41 f4       	brne	.+16     	; 0x1f0 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x38>
 1e0:	15 c0       	rjmp	.+42     	; 0x20c <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x54>
void LCD_SAMPLE_SHOW_STRING(uchar x,uchar y,char *str)
{
	WRITE_LCD_COMMAND(0x07);
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
 1e2:	c1 30       	cpi	r28, 0x01	; 1
 1e4:	c9 f7       	brne	.-14     	; 0x1d8 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x20>
 1e6:	8d 2f       	mov	r24, r29
 1e8:	80 6c       	ori	r24, 0xC0	; 192
 1ea:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
 1ee:	f4 cf       	rjmp	.-24     	; 0x1d8 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x20>
	
	for(count=0;str[count]!='\0';count++)
 1f0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		WRITE_LCD_DATA(str[count]);
 1f2:	0e 94 85 00 	call	0x10a	; 0x10a <_Z14WRITE_LCD_DATAh>
		
		delay_second(15);
 1f6:	8f e0       	ldi	r24, 0x0F	; 15
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	WRITE_LCD_COMMAND(0x07);
	uchar count=0;
	if(y==0)WRITE_LCD_COMMAND(0x80|x);else
	if(y==1)WRITE_LCD_COMMAND(0xc0|x);
	
	for(count=0;str[count]!='\0';count++)
 1fe:	cf 5f       	subi	r28, 0xFF	; 255
 200:	f8 01       	movw	r30, r16
 202:	ec 0f       	add	r30, r28
 204:	f1 1d       	adc	r31, r1
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	99 f7       	brne	.-26     	; 0x1f2 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc+0x3a>
		delay_second(15);
	
	}		
	
	
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <_Z20LCD_FLOW_SHOW_STRINGhhPc>:

//**************LCD 循环显示
void LCD_FLOW_SHOW_STRING(uchar x,uchar y,char *str)
{
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	18 2f       	mov	r17, r24
 220:	06 2f       	mov	r16, r22
 222:	ea 01       	movw	r28, r20
	LCD_SAMPLE_SHOW_STRING(x,y,str);
 224:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z22LCD_SAMPLE_SHOW_STRINGhhPc>
	
	for (;x < 15;x ++)
 228:	1f 30       	cpi	r17, 0x0F	; 15
 22a:	78 f4       	brcc	.+30     	; 0x24a <_Z20LCD_FLOW_SHOW_STRINGhhPc+0x34>
	{
		LCD_SHOW_STRING(x,y,str);
 22c:	81 2f       	mov	r24, r17
 22e:	60 2f       	mov	r22, r16
 230:	ae 01       	movw	r20, r28
 232:	0e 94 ba 00 	call	0x174	; 0x174 <_Z15LCD_SHOW_STRINGhhPc>
		delay_second(30);
 236:	8e e1       	ldi	r24, 0x1E	; 30
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
		WRITE_LCD_COMMAND(0x01);
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 76 00 	call	0xec	; 0xec <_Z17WRITE_LCD_COMMANDh>
//**************LCD 循环显示
void LCD_FLOW_SHOW_STRING(uchar x,uchar y,char *str)
{
	LCD_SAMPLE_SHOW_STRING(x,y,str);
	
	for (;x < 15;x ++)
 244:	1f 5f       	subi	r17, 0xFF	; 255
 246:	1f 30       	cpi	r17, 0x0F	; 15
 248:	89 f7       	brne	.-30     	; 0x22c <_Z20LCD_FLOW_SHOW_STRINGhhPc+0x16>
		delay_second(30);
		WRITE_LCD_COMMAND(0x01);
	}
	
	
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <main>:
#include <E:\kuaipan\EDEN\avr\system\lib_delay.h>
#include <E:\kuaipan\EDEN\avr\device\lib_lcd1602.h>


int main(void)
{    
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	66 97       	sbiw	r28, 0x16	; 22
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	de bf       	out	0x3e, r29	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	cd bf       	out	0x3d, r28	; 61
 
	   
	LCD_init(); 
 268:	0e 94 90 00 	call	0x120	; 0x120 <_Z8LCD_initv>
	delay_reduce(100); 
 26c:	64 e6       	ldi	r22, 0x64	; 100
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	char fuck[] = "I    LOVE   YOU  VIVI";
 278:	de 01       	movw	r26, r28
 27a:	11 96       	adiw	r26, 0x01	; 1
 27c:	e0 e6       	ldi	r30, 0x60	; 96
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	86 e1       	ldi	r24, 0x16	; 22
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	81 50       	subi	r24, 0x01	; 1
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x2e>
        
    while(1)   
    {  
		LCD_SHOW_STRING(0,1,fuck);  
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	ae 01       	movw	r20, r28
 290:	4f 5f       	subi	r20, 0xFF	; 255
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	0e 94 ba 00 	call	0x174	; 0x174 <_Z15LCD_SHOW_STRINGhhPc>
 298:	f8 cf       	rjmp	.-16     	; 0x28a <main+0x36>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
