
M16 SLEEP TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  000002ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000529  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000172  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a5  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000296  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bc  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  8a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>:
//**********************M16 INT2----PB2  INT1---PD3 INT0----PD2*****************//

//******************初始化
void EXTERNAL_INTERRUPT0_INIT_M16()
{
	DDRD |= (0 << PD2);
  cc:	81 b3       	in	r24, 0x11	; 17
  ce:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << PD2);
  d0:	92 9a       	sbi	0x12, 2	; 18
	MCUCR |= (1<<ISC01);//外部中断0下降沿产生中断 
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0);//开外部中断0
  d8:	8b b7       	in	r24, 0x3b	; 59
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8b bf       	out	0x3b, r24	; 59
	
	TIMSK = 0x00;
  de:	19 be       	out	0x39, r1	; 57
}
  e0:	08 95       	ret

000000e2 <_Z28EXTERNAL_INTERRUPT2_INIT_M16v>:


//**********************************外部中断2
void EXTERNAL_INTERRUPT2_INIT_M16()
{
	DDRB &= ~(1<<2);
  e2:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);
  e4:	c2 9a       	sbi	0x18, 2	; 24
	MCUCSR &= ~(1<<ISC2);//外部中断2 下降沿产生中断
  e6:	84 b7       	in	r24, 0x34	; 52
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);//开外部中断2
  ec:	8b b7       	in	r24, 0x3b	; 59
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	8b bf       	out	0x3b, r24	; 59
	
	TIMSK = 0x00;
  f2:	19 be       	out	0x39, r1	; 57
}
  f4:	08 95       	ret

000000f6 <_Z10nixie_initv>:
#define NIXIE_PIN PINA
#define uchar unsigned char
//*********************数码管初始化
void nixie_init()
{
	NIXIE_DDR = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  fa:	1b ba       	out	0x1b, r1	; 27
	
}
  fc:	08 95       	ret

000000fe <_Z10nixie_showh>:
//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void nixie_show(uchar count)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	61 97       	sbiw	r28, 0x11	; 17
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
 112:	de 01       	movw	r26, r28
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	e0 e6       	ldi	r30, 0x60	; 96
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	91 e1       	ldi	r25, 0x11	; 17
 11c:	01 90       	ld	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	91 50       	subi	r25, 0x01	; 1
 122:	e1 f7       	brne	.-8      	; 0x11c <_Z10nixie_showh+0x1e>
	
NIXIE_PORT=nixie[count];
 124:	fe 01       	movw	r30, r28
 126:	e8 0f       	add	r30, r24
 128:	f1 1d       	adc	r31, r1
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	8b bb       	out	0x1b, r24	; 27

}
 12e:	61 96       	adiw	r28, 0x11	; 17
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_Z10nixie_flowv>:
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
 140:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 142:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		nixie_show(count);
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z10nixie_showh>
		
		delay_second(30);
 14a:	8e e1       	ldi	r24, 0x1E	; 30
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
       for(uchar count=0;count<=15;count++)
 152:	cf 5f       	subi	r28, 0xFF	; 255
 154:	c0 31       	cpi	r28, 0x10	; 16
 156:	b1 f7       	brne	.-20     	; 0x144 <_Z10nixie_flowv+0x4>
		nixie_show(count);
		
		delay_second(30);
		   
	   }		   
    }
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z17KEYBOARD_INIT_M16v>:

//****************初始化

void KEYBOARD_INIT_M16()
{
	KEY_DDR = 0X00;
 15c:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0XFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	88 bb       	out	0x18, r24	; 24
}
 162:	08 95       	ret

00000164 <_Z7keyscanv>:


/*******************读键盘************/

uchar keyscan()
{
 164:	cf 93       	push	r28
	KEY_DDR = 0x00;
 166:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0xFF;
 168:	8f ef       	ldi	r24, 0xFF	; 255
 16a:	88 bb       	out	0x18, r24	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
 16c:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
 16e:	cc 23       	and	r28, r28
 170:	61 f1       	breq	.+88     	; 0x1ca <_Z7keyscanv+0x66>
	 {
		//****************去抖 
	delay_reduce(30);
 172:	6e e1       	ldi	r22, 0x1E	; 30
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr == zavr)
	{
		switch(zavr)
 17e:	cf 3e       	cpi	r28, 0xEF	; 239
 180:	d1 f0       	breq	.+52     	; 0x1b6 <_Z7keyscanv+0x52>
 182:	c0 3f       	cpi	r28, 0xF0	; 240
 184:	38 f4       	brcc	.+14     	; 0x194 <_Z7keyscanv+0x30>
 186:	cf 3b       	cpi	r28, 0xBF	; 191
 188:	d1 f0       	breq	.+52     	; 0x1be <_Z7keyscanv+0x5a>
 18a:	cf 3d       	cpi	r28, 0xDF	; 223
 18c:	b1 f0       	breq	.+44     	; 0x1ba <_Z7keyscanv+0x56>
 18e:	cf 37       	cpi	r28, 0x7F	; 127
 190:	d1 f4       	brne	.+52     	; 0x1c6 <_Z7keyscanv+0x62>
 192:	17 c0       	rjmp	.+46     	; 0x1c2 <_Z7keyscanv+0x5e>
 194:	cb 3f       	cpi	r28, 0xFB	; 251
 196:	59 f0       	breq	.+22     	; 0x1ae <_Z7keyscanv+0x4a>
 198:	cc 3f       	cpi	r28, 0xFC	; 252
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <_Z7keyscanv+0x3e>
 19c:	c7 3f       	cpi	r28, 0xF7	; 247
 19e:	99 f4       	brne	.+38     	; 0x1c6 <_Z7keyscanv+0x62>
 1a0:	08 c0       	rjmp	.+16     	; 0x1b2 <_Z7keyscanv+0x4e>
 1a2:	cd 3f       	cpi	r28, 0xFD	; 253
 1a4:	a1 f0       	breq	.+40     	; 0x1ce <_Z7keyscanv+0x6a>
 1a6:	ce 3f       	cpi	r28, 0xFE	; 254
 1a8:	71 f4       	brne	.+28     	; 0x1c6 <_Z7keyscanv+0x62>
		{
		
		case 0xfe:keyvalue = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	11 c0       	rjmp	.+34     	; 0x1d0 <_Z7keyscanv+0x6c>
		break;
		
		case 0xfd:keyvalue = 2;
		break;
		
		case 0xfb:keyvalue = 3;
 1ae:	83 e0       	ldi	r24, 0x03	; 3
		break;
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		case 0xf7:keyvalue = 4;
 1b2:	84 e0       	ldi	r24, 0x04	; 4
		break;
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		case 0xef:keyvalue = 5;
 1b6:	85 e0       	ldi	r24, 0x05	; 5
		break;
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		case 0xdf:keyvalue = 6;
 1ba:	86 e0       	ldi	r24, 0x06	; 6
		break;
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		case 0xbf:keyvalue = 7;
 1be:	87 e0       	ldi	r24, 0x07	; 7
		break;
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		case 0x7f:keyvalue = 8;
 1c2:	88 e0       	ldi	r24, 0x08	; 8
		break;
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 1c6:	80 e1       	ldi	r24, 0x10	; 16
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 1ca:	80 e1       	ldi	r24, 0x10	; 16
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <_Z7keyscanv+0x6c>
		{
		
		case 0xfe:keyvalue = 1;
		break;
		
		case 0xfd:keyvalue = 2;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <_Z14SLEEP_INIT_M16v>:

//******************初始化
void SLEEP_INIT_M16()
{
	
   MCUCR |= (1<<SM1);//*********掉电模式
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	80 62       	ori	r24, 0x20	; 32
 1d8:	85 bf       	out	0x35, r24	; 53
   
}
 1da:	08 95       	ret

000001dc <_Z15SLEEP_BEGIN_M16v>:
//*******************准备睡眠

void SLEEP_BEGIN_M16()

{
	MCUCR |= (1 << SE);//******准备睡觉
 1dc:	85 b7       	in	r24, 0x35	; 53
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	85 bf       	out	0x35, r24	; 53
}
 1e2:	08 95       	ret

000001e4 <_Z13SLEEP_CLR_M16v>:
//****************清除睡眠准备

void SLEEP_CLR_M16()
{
	
	MCUCR &= ~(1 << SE);//*******清除睡觉
 1e4:	85 b7       	in	r24, 0x35	; 53
 1e6:	8f 7b       	andi	r24, 0xBF	; 191
 1e8:	85 bf       	out	0x35, r24	; 53
	
};
 1ea:	08 95       	ret

000001ec <__vector_1>:
#include <E:\kuaipan\EDEN\avr\device\lib_keyboard.h>
#include <E:\kuaipan\EDEN\avr\system\lib_sleep.h>
uchar keyv;

ISR(INT0_vect)
{
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
   sleep_disable();
 1f8:	85 b7       	in	r24, 0x35	; 53
 1fa:	8f 7b       	andi	r24, 0xBF	; 191
 1fc:	85 bf       	out	0x35, r24	; 53
	
} 
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <main>:

 
int main(void)
{
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 20a:	85 b7       	in	r24, 0x35	; 53
 20c:	8f 74       	andi	r24, 0x4F	; 79
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	85 bf       	out	0x35, r24	; 53
	nixie_init();
 212:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Z10nixie_initv>
	KEYBOARD_INIT_M16();
 216:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z17KEYBOARD_INIT_M16v>
	EXTERNAL_INTERRUPT0_INIT_M16();
 21a:	0e 94 66 00 	call	0xcc	; 0xcc <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>
	
	sei();
 21e:	78 94       	sei
	
	
    while(1)
    {
		keyv = keyscan();
 220:	0e 94 b2 00 	call	0x164	; 0x164 <_Z7keyscanv>
 224:	80 93 72 00 	sts	0x0072, r24
		
       if (keyv == 16)
 228:	80 31       	cpi	r24, 0x10	; 16
 22a:	39 f4       	brne	.+14     	; 0x23a <main+0x30>
       {
      
     
			sleep_enable();
 22c:	85 b7       	in	r24, 0x35	; 53
 22e:	80 64       	ori	r24, 0x40	; 64
 230:	85 bf       	out	0x35, r24	; 53
			
			sleep_cpu();
 232:	88 95       	sleep
			
			sleep_disable();
 234:	85 b7       	in	r24, 0x35	; 53
 236:	8f 7b       	andi	r24, 0xBF	; 191
 238:	85 bf       	out	0x35, r24	; 53
		 }	
		 
			 nixie_show(keyv);
 23a:	80 91 72 00 	lds	r24, 0x0072
 23e:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z10nixie_showh>
	EXTERNAL_INTERRUPT0_INIT_M16();
	
	sei();
	
	
    while(1)
 242:	ee cf       	rjmp	.-36     	; 0x220 <main+0x16>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
