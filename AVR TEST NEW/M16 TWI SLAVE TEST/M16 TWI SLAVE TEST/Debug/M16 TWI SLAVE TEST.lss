
M16 TWI SLAVE TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000242  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800072  00800072  000002e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000509  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000165  00000000  00000000  00000fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002fa  00000000  00000000  0000112e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000023e  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000249  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  8a:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z9TWI_ERRORv>:

//**************错误处理***************

void TWI_ERROR()
{
	delay_reduce(5);
  cc:	65 e0       	ldi	r22, 0x05	; 5
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
}
  d8:	08 95       	ret

000000da <_Z19M16_TWI_MASTER_INITv>:

//*************主机初始化*********无中断

void M16_TWI_MASTER_INIT()
{
	DDRC |= (1 << 0)|(1 << 1);
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	84 bb       	out	0x14, r24	; 20
	
	PORTC |= (1 << 0)|(1 << 1);
  e0:	85 b3       	in	r24, 0x15	; 21
  e2:	83 60       	ori	r24, 0x03	; 3
  e4:	85 bb       	out	0x15, r24	; 21
	
	TWBR = (((F_CPU / TWI_SCL) - 16) / 8);//********7.3728m BUAD 9600
  e6:	8e e5       	ldi	r24, 0x5E	; 94
  e8:	80 b9       	out	0x00, r24	; 0
	
	TWCR |= (1 << TWEN);//**********使能TWI
  ea:	86 b7       	in	r24, 0x36	; 54
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	86 bf       	out	0x36, r24	; 54
	
}
  f0:	08 95       	ret

000000f2 <_Z19M16_TWI_MASTER_SENDc>:

//**************主机发送数据***************

void M16_TWI_MASTER_SEND(char data)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);//******START
  f6:	84 ea       	ldi	r24, 0xA4	; 164
  f8:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1 << TWINT)));//**********WAIT TWINT
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <_Z19M16_TWI_MASTER_SENDc+0x8>
	
	if((TWSR & 0XF8) != TWI_MT_START);//****************************
 100:	81 b1       	in	r24, 0x01	; 1
	                                 //*******判别START状态字
	TWI_ERROR();                     //*****************************
 102:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9TWI_ERRORv>
	
	TWDR = SLA_W;                    //*****************************************
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	83 b9       	out	0x03, r24	; 3
	                                //***********装入SLA_W TWINT清零 启动发送地址
	TWCR = (1 << TWINT)|(1 << TWEN);//*******************************************
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1 << TWINT)));//*************WAIT TWINT
 10e:	06 b6       	in	r0, 0x36	; 54
 110:	07 fe       	sbrs	r0, 7
 112:	fd cf       	rjmp	.-6      	; 0x10e <_Z19M16_TWI_MASTER_SENDc+0x1c>
	
	if((TWSR & 0XF8) != TWI_MT_SLA_ACK);//****************************
 114:	81 b1       	in	r24, 0x01	; 1
	                                    //*******判别SLA_ACK状态字
	TWI_ERROR();                       //*****************************
 116:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9TWI_ERRORv>
	
	TWDR = data;                    //*****************************************
 11a:	c3 b9       	out	0x03, r28	; 3
	                                //***********装入数据 TWINT清零 启动发送数据
	TWCR = (1 << TWINT)|(1 << TWEN);//*******************************************
 11c:	84 e8       	ldi	r24, 0x84	; 132
 11e:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1 << TWINT)));//*************WAIT TWINT
 120:	06 b6       	in	r0, 0x36	; 54
 122:	07 fe       	sbrs	r0, 7
 124:	fd cf       	rjmp	.-6      	; 0x120 <_Z19M16_TWI_MASTER_SENDc+0x2e>
	
	if((TWSR & 0XF8) != TWI_MT_DATA_ACK);//****************************
 126:	81 b1       	in	r24, 0x01	; 1
	                                    //*******判别DATA_ACK状态字
	TWI_ERROR();                       //*****************************
 128:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9TWI_ERRORv>
	
	TWCR = (1 << TWINT)|(1 << TWEN)|(1 << TWSTO);//*********STOP
 12c:	84 e9       	ldi	r24, 0x94	; 148
 12e:	86 bf       	out	0x36, r24	; 54
	
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <_Z18M16_TWI_SLAVE_INITv>:

//*************从机初始化*********

void M16_TWI_SLAVE_INIT()
{
	DDRC &= ~(1 << 0)|(1 << 1);
 134:	a0 98       	cbi	0x14, 0	; 20
	
	PORTC |= (1 << 0)|(1 << 1);
 136:	85 b3       	in	r24, 0x15	; 21
 138:	83 60       	ori	r24, 0x03	; 3
 13a:	85 bb       	out	0x15, r24	; 21
	
	TWBR = (((F_CPU / TWI_SCL) - 16) / 8);//********7.3728m BUAD 9600
 13c:	8e e5       	ldi	r24, 0x5E	; 94
 13e:	80 b9       	out	0x00, r24	; 0
	
	TWAR = SLA_W;//******写从机地址
 140:	88 e2       	ldi	r24, 0x28	; 40
 142:	82 b9       	out	0x02, r24	; 2
	
	TWCR |= (1 << TWINT)|(1 << TWEA)|(1 << TWIE)|(1 << TWEN);//**********使能TWI 清零TWINT TWI中断 使能应答
 144:	86 b7       	in	r24, 0x36	; 54
 146:	85 6c       	ori	r24, 0xC5	; 197
 148:	86 bf       	out	0x36, r24	; 54
	
}
 14a:	08 95       	ret

0000014c <_Z21M16_TWI_SLAVE_RESERVEv>:
	
	uchar statue = 255;
	
	uchar get;
	
	get = TWSR & 0XF8;//*****获取状态码
 14c:	81 b1       	in	r24, 0x01	; 1
 14e:	88 7f       	andi	r24, 0xF8	; 248
	
	switch(get)
 150:	80 38       	cpi	r24, 0x80	; 128
 152:	11 f4       	brne	.+4      	; 0x158 <_Z21M16_TWI_SLAVE_RESERVEv+0xc>
		break;
		
		case TWI_SR_DATA_ACK: //TW_STATUS=0x80,以前SLA+W被寻址,收到数据,ACK已返回
		//接收数据
		
		statue = TWDR;
 154:	83 b1       	in	r24, 0x03	; 3
		
		//清TWINT,下一步接收数据，返回ACK
		break;
 156:	01 c0       	rjmp	.+2      	; 0x15a <_Z21M16_TWI_SLAVE_RESERVEv+0xe>
//**************从机接收数据（中断）***************

uchar M16_TWI_SLAVE_RESERVE()//**********255为初始码
{
	
	uchar statue = 255;
 158:	8f ef       	ldi	r24, 0xFF	; 255
		default:             break;
		
		
		
	}
	TWCR |= (1 << TWINT)|(1 << TWEA)|(1 << TWIE)|(1 << TWEN);//**********使能TWI 清零TWINT TWI中断 使能应答
 15a:	96 b7       	in	r25, 0x36	; 54
 15c:	95 6c       	ori	r25, 0xC5	; 197
 15e:	96 bf       	out	0x36, r25	; 54
	
	return(statue);
}
 160:	08 95       	ret

00000162 <_Z10nixie_initv>:
#define NIXIE_PIN PINA
#define uchar unsigned char
//*********************数码管初始化
void nixie_init()
{
	NIXIE_DDR = 0xff;
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
 166:	1b ba       	out	0x1b, r1	; 27
	
}
 168:	08 95       	ret

0000016a <_Z10nixie_showh>:
//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void nixie_show(uchar count)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
 172:	61 97       	sbiw	r28, 0x11	; 17
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	f8 94       	cli
 178:	de bf       	out	0x3e, r29	; 62
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
 17e:	de 01       	movw	r26, r28
 180:	11 96       	adiw	r26, 0x01	; 1
 182:	e0 e6       	ldi	r30, 0x60	; 96
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	91 e1       	ldi	r25, 0x11	; 17
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	91 50       	subi	r25, 0x01	; 1
 18e:	e1 f7       	brne	.-8      	; 0x188 <_Z10nixie_showh+0x1e>
	
NIXIE_PORT=nixie[count];
 190:	fe 01       	movw	r30, r28
 192:	e8 0f       	add	r30, r24
 194:	f1 1d       	adc	r31, r1
 196:	81 81       	ldd	r24, Z+1	; 0x01
 198:	8b bb       	out	0x1b, r24	; 27

}
 19a:	61 96       	adiw	r28, 0x11	; 17
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <_Z10nixie_flowv>:
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
 1ac:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 1ae:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		nixie_show(count);
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z10nixie_showh>
		
		delay_second(30);
 1b6:	8e e1       	ldi	r24, 0x1E	; 30
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
       for(uchar count=0;count<=15;count++)
 1be:	cf 5f       	subi	r28, 0xFF	; 255
 1c0:	c0 31       	cpi	r28, 0x10	; 16
 1c2:	b1 f7       	brne	.-20     	; 0x1b0 <_Z10nixie_flowv+0x4>
		nixie_show(count);
		
		delay_second(30);
		   
	   }		   
    }
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <__vector_17>:
#include <E:\kuaipan\EDEN\avr\device\lib_nixie.h>

uchar show = 0;

ISR(TWI_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	
	
	show = M16_TWI_SLAVE_RESERVE();
 1ea:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z21M16_TWI_SLAVE_RESERVEv>
 1ee:	80 93 72 00 	sts	0x0072, r24
	
	if (show == 255)
 1f2:	8f 3f       	cpi	r24, 0xFF	; 255
 1f4:	39 f4       	brne	.+14     	; 0x204 <__vector_17+0x3c>
	{
		delay_reduce(10);
 1f6:	6a e0       	ldi	r22, 0x0A	; 10
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 202:	02 c0       	rjmp	.+4      	; 0x208 <__vector_17+0x40>
	}
	else
	{ 
		nixie_show(show);
 204:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z10nixie_showh>
	}
	
	
	
}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <main>:
 

int main(void)
{
	M16_TWI_SLAVE_INIT();
 22a:	0e 94 9a 00 	call	0x134	; 0x134 <_Z18M16_TWI_SLAVE_INITv>
	
	nixie_init();
 22e:	0e 94 b1 00 	call	0x162	; 0x162 <_Z10nixie_initv>
	
	sei();
 232:	78 94       	sei
	
	nixie_show(show);
 234:	80 91 72 00 	lds	r24, 0x0072
 238:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z10nixie_showh>
 23c:	ff cf       	rjmp	.-2      	; 0x23c <main+0x12>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
