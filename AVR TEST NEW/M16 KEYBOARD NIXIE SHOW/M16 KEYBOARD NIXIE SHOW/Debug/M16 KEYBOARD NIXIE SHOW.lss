
M16 KEYBOARD NIXIE SHOW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000482  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  00000e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c7  00000000  00000000  00000fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018e  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000193  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z10nixie_initv>:
#define NIXIE_PIN PINA
#define uchar unsigned char
//*********************数码管初始化
void nixie_init()
{
	NIXIE_DDR = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
}
  d2:	08 95       	ret

000000d4 <_Z10nixie_showh>:
//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void nixie_show(uchar count)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	61 97       	sbiw	r28, 0x11	; 17
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	91 e1       	ldi	r25, 0x11	; 17
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <_Z10nixie_showh+0x1e>
	
NIXIE_PORT=nixie[count];
  fa:	fe 01       	movw	r30, r28
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	8b bb       	out	0x1b, r24	; 27

}
 104:	61 96       	adiw	r28, 0x11	; 17
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_Z10nixie_flowv>:
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
 116:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 118:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		nixie_show(count);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10nixie_showh>
		
		delay_second(30);
 120:	8e e1       	ldi	r24, 0x1E	; 30
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void nixie_flow()
{
       for(uchar count=0;count<=15;count++)
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	b1 f7       	brne	.-20     	; 0x11a <_Z10nixie_flowv+0x4>
		nixie_show(count);
		
		delay_second(30);
		   
	   }		   
    }
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z7keyscanv>:
#define KEY_PIN PINB

/*******************读键盘************/

uchar keyscan()
{
 132:	cf 93       	push	r28
	KEY_DDR = 0x00;
 134:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0x00;
 136:	18 ba       	out	0x18, r1	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
 138:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
 13a:	cc 23       	and	r28, r28
 13c:	69 f1       	breq	.+90     	; 0x198 <_Z7keyscanv+0x66>
	 {
		//****************去抖 
	delay_reduce(30);
 13e:	6e e1       	ldi	r22, 0x1E	; 30
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr = zavr)
	{
		switch(zavr)
 14a:	c8 30       	cpi	r28, 0x08	; 8
 14c:	c9 f0       	breq	.+50     	; 0x180 <_Z7keyscanv+0x4e>
 14e:	c9 30       	cpi	r28, 0x09	; 9
 150:	38 f4       	brcc	.+14     	; 0x160 <_Z7keyscanv+0x2e>
 152:	c2 30       	cpi	r28, 0x02	; 2
 154:	19 f1       	breq	.+70     	; 0x19c <_Z7keyscanv+0x6a>
 156:	c4 30       	cpi	r28, 0x04	; 4
 158:	89 f0       	breq	.+34     	; 0x17c <_Z7keyscanv+0x4a>
 15a:	c1 30       	cpi	r28, 0x01	; 1
 15c:	d9 f4       	brne	.+54     	; 0x194 <_Z7keyscanv+0x62>
 15e:	0c c0       	rjmp	.+24     	; 0x178 <_Z7keyscanv+0x46>
 160:	c0 32       	cpi	r28, 0x20	; 32
 162:	91 f0       	breq	.+36     	; 0x188 <_Z7keyscanv+0x56>
 164:	c1 32       	cpi	r28, 0x21	; 33
 166:	18 f4       	brcc	.+6      	; 0x16e <_Z7keyscanv+0x3c>
 168:	c0 31       	cpi	r28, 0x10	; 16
 16a:	a1 f4       	brne	.+40     	; 0x194 <_Z7keyscanv+0x62>
 16c:	0b c0       	rjmp	.+22     	; 0x184 <_Z7keyscanv+0x52>
 16e:	c0 34       	cpi	r28, 0x40	; 64
 170:	69 f0       	breq	.+26     	; 0x18c <_Z7keyscanv+0x5a>
 172:	c0 38       	cpi	r28, 0x80	; 128
 174:	79 f4       	brne	.+30     	; 0x194 <_Z7keyscanv+0x62>
 176:	0c c0       	rjmp	.+24     	; 0x190 <_Z7keyscanv+0x5e>
		{
		
		case 0x01:keyvalue = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	11 c0       	rjmp	.+34     	; 0x19e <_Z7keyscanv+0x6c>
		break;
		
		case 0x02:keyvalue = 2;
		break;
		
		case 0x04:keyvalue = 3;
 17c:	83 e0       	ldi	r24, 0x03	; 3
		break;
 17e:	0f c0       	rjmp	.+30     	; 0x19e <_Z7keyscanv+0x6c>
		
		case 0x08:keyvalue = 4;
 180:	84 e0       	ldi	r24, 0x04	; 4
		break;
 182:	0d c0       	rjmp	.+26     	; 0x19e <_Z7keyscanv+0x6c>
		
		case 0x10:keyvalue = 5;
 184:	85 e0       	ldi	r24, 0x05	; 5
		break;
 186:	0b c0       	rjmp	.+22     	; 0x19e <_Z7keyscanv+0x6c>
		
		case 0x20:keyvalue = 6;
 188:	86 e0       	ldi	r24, 0x06	; 6
		break;
 18a:	09 c0       	rjmp	.+18     	; 0x19e <_Z7keyscanv+0x6c>
		
		case 0x40:keyvalue = 7;
 18c:	87 e0       	ldi	r24, 0x07	; 7
		break;
 18e:	07 c0       	rjmp	.+14     	; 0x19e <_Z7keyscanv+0x6c>
		
		case 0x80:keyvalue = 8;
 190:	88 e0       	ldi	r24, 0x08	; 8
		break;
 192:	05 c0       	rjmp	.+10     	; 0x19e <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	03 c0       	rjmp	.+6      	; 0x19e <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 198:	80 e1       	ldi	r24, 0x10	; 16
 19a:	01 c0       	rjmp	.+2      	; 0x19e <_Z7keyscanv+0x6c>
		{
		
		case 0x01:keyvalue = 1;
		break;
		
		case 0x02:keyvalue = 2;
 19c:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:
#include <E:\kuaipan\EDEN\avr\device\lib_nixie.h>
#include <E:\kuaipan\EDEN\avr\device\lib_keyboard.h>
 
int main(void)
{ 
	nixie_init(); 
 1a2:	0e 94 66 00 	call	0xcc	; 0xcc <_Z10nixie_initv>
	 
    while(1) 
    {   
		uchar keyv = keyscan(); 
 1a6:	0e 94 99 00 	call	0x132	; 0x132 <_Z7keyscanv>
		 
        nixie_show(keyv);    
 1aa:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10nixie_showh>
 1ae:	fb cf       	rjmp	.-10     	; 0x1a6 <main+0x4>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
