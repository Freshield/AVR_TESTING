
M16 TIMER0 FAST PWM TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003c8  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000045c  2**0
                  ALLOC
  3 .stab         0000135c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000045c  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00001c18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004b7  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000135  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e1  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00002568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028a  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000190  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  8a:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z24TIMER0_FASTPWM_OCR0_initv>:

//**********************FAST PWM OCR0模式初始化*******************//
void TIMER0_FASTPWM_OCR0_init()
{
	//端口初始化
	PWM_TIMER0_DDR|=(1<<PWM_TIMER0_OUT); 
  cc:	bb 9a       	sbi	0x17, 3	; 23
	//计数器初始化
	TCNT0=0x00;OCR0 = 0X01;//***避免与bottom相同时候特殊情况
  ce:	12 be       	out	0x32, r1	; 50
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	8c bf       	out	0x3c, r24	; 60
	//中断初始化
	TIMSK |= (1<<OCIE0)|(1<<TOIE0);
  d4:	89 b7       	in	r24, 0x39	; 57
  d6:	83 60       	ori	r24, 0x03	; 3
  d8:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << COM00) | (1 << CS01);//设置为快速PWM；与OCR0匹配时将清零；8分频
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	8a 67       	ori	r24, 0x7A	; 122
  de:	83 bf       	out	0x33, r24	; 51
	
	
}
  e0:	08 95       	ret

000000e2 <_Z24TIMER0_FASTPWMA_OCR0_setj>:
//********************FAST PWM ICR0模式时间设定*********************//
uint TIMER0_FASTPWMA_OCR0_set(uint compare_time)
{
	OCR0=F_CPU/8*compare_time;
  e2:	1c be       	out	0x3c, r1	; 60
	
}
  e4:	08 95       	ret

000000e6 <_Z25TIMER1_FASTPWMA_ICR1_initv>:

//**********************FAST PWM ICR1模式初始化*******************//
void TIMER1_FASTPWMA_ICR1_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
  e6:	8d 9a       	sbi	0x11, 5	; 17
  e8:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;
  ea:	1d bc       	out	0x2d, r1	; 45
  ec:	1c bc       	out	0x2c, r1	; 44
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
  ee:	89 b7       	in	r24, 0x39	; 57
  f0:	84 61       	ori	r24, 0x14	; 20
  f2:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);//比较匹配清零 TOP置位 
  f4:	8f b5       	in	r24, 0x2f	; 47
  f6:	82 68       	ori	r24, 0x82	; 130
  f8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);//TOP为ICR1的值 1024分频
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	8d 61       	ori	r24, 0x1D	; 29
  fe:	8e bd       	out	0x2e, r24	; 46
	
	
}
 100:	08 95       	ret

00000102 <_Z24TIMER1_FASTPWMA_ICR1_setff>:
//********************FAST PWM ICR1模式时间设定*********************//
void TIMER1_FASTPWMA_ICR1_set(float compare_time,float top_time)
{
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	69 01       	movw	r12, r18
 10c:	7a 01       	movw	r14, r20
	OCR1A=F_CPU/1024*compare_time;
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	41 ee       	ldi	r20, 0xE1	; 225
 114:	55 e4       	ldi	r21, 0x45	; 69
 116:	0e 94 57 01 	call	0x2ae	; 0x2ae <__mulsf3>
 11a:	0e 94 02 01 	call	0x204	; 0x204 <__fixunssfsi>
 11e:	dc 01       	movw	r26, r24
 120:	cb 01       	movw	r24, r22
 122:	9b bd       	out	0x2b, r25	; 43
 124:	8a bd       	out	0x2a, r24	; 42
	ICR1=F_CPU/1024*top_time;
 126:	c7 01       	movw	r24, r14
 128:	b6 01       	movw	r22, r12
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	41 ee       	ldi	r20, 0xE1	; 225
 130:	55 e4       	ldi	r21, 0x45	; 69
 132:	0e 94 57 01 	call	0x2ae	; 0x2ae <__mulsf3>
 136:	0e 94 02 01 	call	0x204	; 0x204 <__fixunssfsi>
 13a:	dc 01       	movw	r26, r24
 13c:	cb 01       	movw	r24, r22
 13e:	97 bd       	out	0x27, r25	; 39
 140:	86 bd       	out	0x26, r24	; 38
}
 142:	ff 90       	pop	r15
 144:	ef 90       	pop	r14
 146:	df 90       	pop	r13
 148:	cf 90       	pop	r12
 14a:	08 95       	ret

0000014c <_Z31TIMER1_PHASE_CORRECTION_10_initv>:

//**********************十位相位修正PWM模式初始化*******************//
void TIMER1_PHASE_CORRECTION_10_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
 14c:	8d 9a       	sbi	0x11, 5	; 17
 14e:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;OCR1A = 0X00;
 150:	1d bc       	out	0x2d, r1	; 45
 152:	1c bc       	out	0x2c, r1	; 44
 154:	1b bc       	out	0x2b, r1	; 43
 156:	1a bc       	out	0x2a, r1	; 42
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
 158:	89 b7       	in	r24, 0x39	; 57
 15a:	84 61       	ori	r24, 0x14	; 20
 15c:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);//比较匹配清零 TOP置位
 15e:	8f b5       	in	r24, 0x2f	; 47
 160:	83 68       	ori	r24, 0x83	; 131
 162:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);//TOP为ICR1的值 8分频
 164:	8e b5       	in	r24, 0x2e	; 46
 166:	82 60       	ori	r24, 0x02	; 2
 168:	8e bd       	out	0x2e, r24	; 46
	
	
}
 16a:	08 95       	ret

0000016c <_Z8led_flowv>:


/*********************流水灯*********************/

void led_flow()
{
 16c:	cf 93       	push	r28
	LED_DDR = 0XFF;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x01;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	8b bb       	out	0x1b, r24	; 27
 176:	c8 e0       	ldi	r28, 0x08	; 8
	for(uchar K = 0;K < 8;K ++)
	{
		delay_second(30);
 178:	8e e1       	ldi	r24, 0x1E	; 30
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
		
		LED_PORT = LED_PORT <<1;
 180:	8b b3       	in	r24, 0x1b	; 27
 182:	88 0f       	add	r24, r24
 184:	8b bb       	out	0x1b, r24	; 27
 186:	c1 50       	subi	r28, 0x01	; 1

void led_flow()
{
	LED_DDR = 0XFF;
	LED_PORT = 0x01;
	for(uchar K = 0;K < 8;K ++)
 188:	b9 f7       	brne	.-18     	; 0x178 <_Z8led_flowv+0xc>
		LED_PORT = LED_PORT <<1;
		
		
		 
	}
}
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <__vector_9>:

uchar condition; 

  
ISR(TIMER0_OVF_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
	
}
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_19>:


ISR(TIMER0_COMP_vect)

{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
	
	
}
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <main>:

int main(void)
{
	TIMER0_FASTPWM_OCR0_init();
 1b6:	0e 94 66 00 	call	0xcc	; 0xcc <_Z24TIMER0_FASTPWM_OCR0_initv>
	
	count = 0;
 1ba:	10 92 61 00 	sts	0x0061, r1
	
	condition = 0;
 1be:	10 92 60 00 	sts	0x0060, r1
	
	sei();
 1c2:	78 94       	sei
		{
			count --;
			
			if (count == 0)
			{
				condition = 1;
 1c4:	c1 e0       	ldi	r28, 0x01	; 1
	sei();
	
	
    while(1) 
    {
        if (condition == 0)
 1c6:	80 91 60 00 	lds	r24, 0x0060
 1ca:	88 23       	and	r24, r24
 1cc:	51 f4       	brne	.+20     	; 0x1e2 <main+0x2c>
        {
			
			count ++;
 1ce:	80 91 61 00 	lds	r24, 0x0061
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 61 00 	sts	0x0061, r24
			
			if (count >= 250)
 1d8:	8a 3f       	cpi	r24, 0xFA	; 250
 1da:	60 f0       	brcs	.+24     	; 0x1f4 <main+0x3e>
			{
				condition = 1;
 1dc:	c0 93 60 00 	sts	0x0060, r28
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <main+0x3e>
				
			}
        }
		else
		{
			count --;
 1e2:	80 91 61 00 	lds	r24, 0x0061
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	80 93 61 00 	sts	0x0061, r24
			
			if (count == 0)
 1ec:	88 23       	and	r24, r24
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0x3e>
			{
				condition = 1;
 1f0:	c0 93 60 00 	sts	0x0060, r28
			}
		}
		
		OCR0 = count;
 1f4:	80 91 61 00 	lds	r24, 0x0061
 1f8:	8c bf       	out	0x3c, r24	; 60
		
		delay_second(3); 
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	condition = 0;
	
	sei();
	
	
    while(1) 
 202:	e1 cf       	rjmp	.-62     	; 0x1c6 <main+0x10>

00000204 <__fixunssfsi>:
 204:	33 d0       	rcall	.+102    	; 0x26c <__fp_splitA>
 206:	88 f0       	brcs	.+34     	; 0x22a <__fixunssfsi+0x26>
 208:	9f 57       	subi	r25, 0x7F	; 127
 20a:	90 f0       	brcs	.+36     	; 0x230 <__fixunssfsi+0x2c>
 20c:	b9 2f       	mov	r27, r25
 20e:	99 27       	eor	r25, r25
 210:	b7 51       	subi	r27, 0x17	; 23
 212:	a0 f0       	brcs	.+40     	; 0x23c <__fixunssfsi+0x38>
 214:	d1 f0       	breq	.+52     	; 0x24a <__fixunssfsi+0x46>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	88 1f       	adc	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	1a f0       	brmi	.+6      	; 0x226 <__fixunssfsi+0x22>
 220:	ba 95       	dec	r27
 222:	c9 f7       	brne	.-14     	; 0x216 <__fixunssfsi+0x12>
 224:	12 c0       	rjmp	.+36     	; 0x24a <__fixunssfsi+0x46>
 226:	b1 30       	cpi	r27, 0x01	; 1
 228:	81 f0       	breq	.+32     	; 0x24a <__fixunssfsi+0x46>
 22a:	3a d0       	rcall	.+116    	; 0x2a0 <__fp_zero>
 22c:	b1 e0       	ldi	r27, 0x01	; 1
 22e:	08 95       	ret
 230:	37 c0       	rjmp	.+110    	; 0x2a0 <__fp_zero>
 232:	67 2f       	mov	r22, r23
 234:	78 2f       	mov	r23, r24
 236:	88 27       	eor	r24, r24
 238:	b8 5f       	subi	r27, 0xF8	; 248
 23a:	39 f0       	breq	.+14     	; 0x24a <__fixunssfsi+0x46>
 23c:	b9 3f       	cpi	r27, 0xF9	; 249
 23e:	cc f3       	brlt	.-14     	; 0x232 <__fixunssfsi+0x2e>
 240:	86 95       	lsr	r24
 242:	77 95       	ror	r23
 244:	67 95       	ror	r22
 246:	b3 95       	inc	r27
 248:	d9 f7       	brne	.-10     	; 0x240 <__fixunssfsi+0x3c>
 24a:	3e f4       	brtc	.+14     	; 0x25a <__fixunssfsi+0x56>
 24c:	90 95       	com	r25
 24e:	80 95       	com	r24
 250:	70 95       	com	r23
 252:	61 95       	neg	r22
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	8f 4f       	sbci	r24, 0xFF	; 255
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__fp_split3>:
 25c:	57 fd       	sbrc	r21, 7
 25e:	90 58       	subi	r25, 0x80	; 128
 260:	44 0f       	add	r20, r20
 262:	55 1f       	adc	r21, r21
 264:	59 f0       	breq	.+22     	; 0x27c <__fp_splitA+0x10>
 266:	5f 3f       	cpi	r21, 0xFF	; 255
 268:	71 f0       	breq	.+28     	; 0x286 <__fp_splitA+0x1a>
 26a:	47 95       	ror	r20

0000026c <__fp_splitA>:
 26c:	88 0f       	add	r24, r24
 26e:	97 fb       	bst	r25, 7
 270:	99 1f       	adc	r25, r25
 272:	61 f0       	breq	.+24     	; 0x28c <__fp_splitA+0x20>
 274:	9f 3f       	cpi	r25, 0xFF	; 255
 276:	79 f0       	breq	.+30     	; 0x296 <__fp_splitA+0x2a>
 278:	87 95       	ror	r24
 27a:	08 95       	ret
 27c:	12 16       	cp	r1, r18
 27e:	13 06       	cpc	r1, r19
 280:	14 06       	cpc	r1, r20
 282:	55 1f       	adc	r21, r21
 284:	f2 cf       	rjmp	.-28     	; 0x26a <__fp_split3+0xe>
 286:	46 95       	lsr	r20
 288:	f1 df       	rcall	.-30     	; 0x26c <__fp_splitA>
 28a:	08 c0       	rjmp	.+16     	; 0x29c <__fp_splitA+0x30>
 28c:	16 16       	cp	r1, r22
 28e:	17 06       	cpc	r1, r23
 290:	18 06       	cpc	r1, r24
 292:	99 1f       	adc	r25, r25
 294:	f1 cf       	rjmp	.-30     	; 0x278 <__fp_splitA+0xc>
 296:	86 95       	lsr	r24
 298:	71 05       	cpc	r23, r1
 29a:	61 05       	cpc	r22, r1
 29c:	08 94       	sec
 29e:	08 95       	ret

000002a0 <__fp_zero>:
 2a0:	e8 94       	clt

000002a2 <__fp_szero>:
 2a2:	bb 27       	eor	r27, r27
 2a4:	66 27       	eor	r22, r22
 2a6:	77 27       	eor	r23, r23
 2a8:	cb 01       	movw	r24, r22
 2aa:	97 f9       	bld	r25, 7
 2ac:	08 95       	ret

000002ae <__mulsf3>:
 2ae:	0b d0       	rcall	.+22     	; 0x2c6 <__mulsf3x>
 2b0:	78 c0       	rjmp	.+240    	; 0x3a2 <__fp_round>
 2b2:	69 d0       	rcall	.+210    	; 0x386 <__fp_pscA>
 2b4:	28 f0       	brcs	.+10     	; 0x2c0 <__mulsf3+0x12>
 2b6:	6e d0       	rcall	.+220    	; 0x394 <__fp_pscB>
 2b8:	18 f0       	brcs	.+6      	; 0x2c0 <__mulsf3+0x12>
 2ba:	95 23       	and	r25, r21
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <__mulsf3+0x12>
 2be:	5a c0       	rjmp	.+180    	; 0x374 <__fp_inf>
 2c0:	5f c0       	rjmp	.+190    	; 0x380 <__fp_nan>
 2c2:	11 24       	eor	r1, r1
 2c4:	ee cf       	rjmp	.-36     	; 0x2a2 <__fp_szero>

000002c6 <__mulsf3x>:
 2c6:	ca df       	rcall	.-108    	; 0x25c <__fp_split3>
 2c8:	a0 f3       	brcs	.-24     	; 0x2b2 <__mulsf3+0x4>

000002ca <__mulsf3_pse>:
 2ca:	95 9f       	mul	r25, r21
 2cc:	d1 f3       	breq	.-12     	; 0x2c2 <__mulsf3+0x14>
 2ce:	95 0f       	add	r25, r21
 2d0:	50 e0       	ldi	r21, 0x00	; 0
 2d2:	55 1f       	adc	r21, r21
 2d4:	62 9f       	mul	r22, r18
 2d6:	f0 01       	movw	r30, r0
 2d8:	72 9f       	mul	r23, r18
 2da:	bb 27       	eor	r27, r27
 2dc:	f0 0d       	add	r31, r0
 2de:	b1 1d       	adc	r27, r1
 2e0:	63 9f       	mul	r22, r19
 2e2:	aa 27       	eor	r26, r26
 2e4:	f0 0d       	add	r31, r0
 2e6:	b1 1d       	adc	r27, r1
 2e8:	aa 1f       	adc	r26, r26
 2ea:	64 9f       	mul	r22, r20
 2ec:	66 27       	eor	r22, r22
 2ee:	b0 0d       	add	r27, r0
 2f0:	a1 1d       	adc	r26, r1
 2f2:	66 1f       	adc	r22, r22
 2f4:	82 9f       	mul	r24, r18
 2f6:	22 27       	eor	r18, r18
 2f8:	b0 0d       	add	r27, r0
 2fa:	a1 1d       	adc	r26, r1
 2fc:	62 1f       	adc	r22, r18
 2fe:	73 9f       	mul	r23, r19
 300:	b0 0d       	add	r27, r0
 302:	a1 1d       	adc	r26, r1
 304:	62 1f       	adc	r22, r18
 306:	83 9f       	mul	r24, r19
 308:	a0 0d       	add	r26, r0
 30a:	61 1d       	adc	r22, r1
 30c:	22 1f       	adc	r18, r18
 30e:	74 9f       	mul	r23, r20
 310:	33 27       	eor	r19, r19
 312:	a0 0d       	add	r26, r0
 314:	61 1d       	adc	r22, r1
 316:	23 1f       	adc	r18, r19
 318:	84 9f       	mul	r24, r20
 31a:	60 0d       	add	r22, r0
 31c:	21 1d       	adc	r18, r1
 31e:	82 2f       	mov	r24, r18
 320:	76 2f       	mov	r23, r22
 322:	6a 2f       	mov	r22, r26
 324:	11 24       	eor	r1, r1
 326:	9f 57       	subi	r25, 0x7F	; 127
 328:	50 40       	sbci	r21, 0x00	; 0
 32a:	8a f0       	brmi	.+34     	; 0x34e <__mulsf3_pse+0x84>
 32c:	e1 f0       	breq	.+56     	; 0x366 <__mulsf3_pse+0x9c>
 32e:	88 23       	and	r24, r24
 330:	4a f0       	brmi	.+18     	; 0x344 <__mulsf3_pse+0x7a>
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	bb 1f       	adc	r27, r27
 338:	66 1f       	adc	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	91 50       	subi	r25, 0x01	; 1
 340:	50 40       	sbci	r21, 0x00	; 0
 342:	a9 f7       	brne	.-22     	; 0x32e <__mulsf3_pse+0x64>
 344:	9e 3f       	cpi	r25, 0xFE	; 254
 346:	51 05       	cpc	r21, r1
 348:	70 f0       	brcs	.+28     	; 0x366 <__mulsf3_pse+0x9c>
 34a:	14 c0       	rjmp	.+40     	; 0x374 <__fp_inf>
 34c:	aa cf       	rjmp	.-172    	; 0x2a2 <__fp_szero>
 34e:	5f 3f       	cpi	r21, 0xFF	; 255
 350:	ec f3       	brlt	.-6      	; 0x34c <__mulsf3_pse+0x82>
 352:	98 3e       	cpi	r25, 0xE8	; 232
 354:	dc f3       	brlt	.-10     	; 0x34c <__mulsf3_pse+0x82>
 356:	86 95       	lsr	r24
 358:	77 95       	ror	r23
 35a:	67 95       	ror	r22
 35c:	b7 95       	ror	r27
 35e:	f7 95       	ror	r31
 360:	e7 95       	ror	r30
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	c1 f7       	brne	.-16     	; 0x356 <__mulsf3_pse+0x8c>
 366:	fe 2b       	or	r31, r30
 368:	88 0f       	add	r24, r24
 36a:	91 1d       	adc	r25, r1
 36c:	96 95       	lsr	r25
 36e:	87 95       	ror	r24
 370:	97 f9       	bld	r25, 7
 372:	08 95       	ret

00000374 <__fp_inf>:
 374:	97 f9       	bld	r25, 7
 376:	9f 67       	ori	r25, 0x7F	; 127
 378:	80 e8       	ldi	r24, 0x80	; 128
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	08 95       	ret

00000380 <__fp_nan>:
 380:	9f ef       	ldi	r25, 0xFF	; 255
 382:	80 ec       	ldi	r24, 0xC0	; 192
 384:	08 95       	ret

00000386 <__fp_pscA>:
 386:	00 24       	eor	r0, r0
 388:	0a 94       	dec	r0
 38a:	16 16       	cp	r1, r22
 38c:	17 06       	cpc	r1, r23
 38e:	18 06       	cpc	r1, r24
 390:	09 06       	cpc	r0, r25
 392:	08 95       	ret

00000394 <__fp_pscB>:
 394:	00 24       	eor	r0, r0
 396:	0a 94       	dec	r0
 398:	12 16       	cp	r1, r18
 39a:	13 06       	cpc	r1, r19
 39c:	14 06       	cpc	r1, r20
 39e:	05 06       	cpc	r0, r21
 3a0:	08 95       	ret

000003a2 <__fp_round>:
 3a2:	09 2e       	mov	r0, r25
 3a4:	03 94       	inc	r0
 3a6:	00 0c       	add	r0, r0
 3a8:	11 f4       	brne	.+4      	; 0x3ae <__fp_round+0xc>
 3aa:	88 23       	and	r24, r24
 3ac:	52 f0       	brmi	.+20     	; 0x3c2 <__fp_round+0x20>
 3ae:	bb 0f       	add	r27, r27
 3b0:	40 f4       	brcc	.+16     	; 0x3c2 <__fp_round+0x20>
 3b2:	bf 2b       	or	r27, r31
 3b4:	11 f4       	brne	.+4      	; 0x3ba <__fp_round+0x18>
 3b6:	60 ff       	sbrs	r22, 0
 3b8:	04 c0       	rjmp	.+8      	; 0x3c2 <__fp_round+0x20>
 3ba:	6f 5f       	subi	r22, 0xFF	; 255
 3bc:	7f 4f       	sbci	r23, 0xFF	; 255
 3be:	8f 4f       	sbci	r24, 0xFF	; 255
 3c0:	9f 4f       	sbci	r25, 0xFF	; 255
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
