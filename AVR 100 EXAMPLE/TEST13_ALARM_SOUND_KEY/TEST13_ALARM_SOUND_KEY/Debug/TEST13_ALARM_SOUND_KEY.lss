
TEST13_ALARM_SOUND_KEY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002ae  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000503  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015c  00000000  00000000  00000f8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002da  00000000  00000000  000010e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000210  00000000  00000000  000014ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000018c  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  8a:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z17KEYBOARD_INIT_M16v>:

//****************≥ı ºªØ

void KEYBOARD_INIT_M16()
{
	KEY_DDR = 0X00;
  cc:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0Xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	88 bb       	out	0x18, r24	; 24
}
  d2:	08 95       	ret

000000d4 <_Z8KEY_DOWNv>:
uchar KEY_DOWN()
{
	
	
	
	delay_reduce(100);
  d4:	64 e6       	ldi	r22, 0x64	; 100
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	uchar i;
	if(KEY_PIN != 0xff)
  e0:	96 b3       	in	r25, 0x16	; 22
	{
		i=1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	9f 3f       	cpi	r25, 0xFF	; 255
  e6:	09 f4       	brne	.+2      	; 0xea <_Z8KEY_DOWNv+0x16>
  e8:	80 e0       	ldi	r24, 0x00	; 0
	{
		i=0;
	}
	return i;

}
  ea:	08 95       	ret

000000ec <_Z7keyscanv>:


/*******************∂¡º¸≈Ã************/

uchar keyscan()
{
  ec:	cf 93       	push	r28
	KEY_DDR = 0x00;
  ee:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	88 bb       	out	0x18, r24	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
  f4:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
  f6:	cc 23       	and	r28, r28
  f8:	61 f1       	breq	.+88     	; 0x152 <_Z7keyscanv+0x66>
	 {
		//****************»•∂∂ 
	delay_reduce(30);
  fa:	6e e1       	ldi	r22, 0x1E	; 30
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr == zavr)
	{
		switch(zavr)
 106:	cf 3e       	cpi	r28, 0xEF	; 239
 108:	d1 f0       	breq	.+52     	; 0x13e <_Z7keyscanv+0x52>
 10a:	c0 3f       	cpi	r28, 0xF0	; 240
 10c:	38 f4       	brcc	.+14     	; 0x11c <_Z7keyscanv+0x30>
 10e:	cf 3b       	cpi	r28, 0xBF	; 191
 110:	d1 f0       	breq	.+52     	; 0x146 <_Z7keyscanv+0x5a>
 112:	cf 3d       	cpi	r28, 0xDF	; 223
 114:	b1 f0       	breq	.+44     	; 0x142 <_Z7keyscanv+0x56>
 116:	cf 37       	cpi	r28, 0x7F	; 127
 118:	d1 f4       	brne	.+52     	; 0x14e <_Z7keyscanv+0x62>
 11a:	17 c0       	rjmp	.+46     	; 0x14a <_Z7keyscanv+0x5e>
 11c:	cb 3f       	cpi	r28, 0xFB	; 251
 11e:	59 f0       	breq	.+22     	; 0x136 <_Z7keyscanv+0x4a>
 120:	cc 3f       	cpi	r28, 0xFC	; 252
 122:	18 f4       	brcc	.+6      	; 0x12a <_Z7keyscanv+0x3e>
 124:	c7 3f       	cpi	r28, 0xF7	; 247
 126:	99 f4       	brne	.+38     	; 0x14e <_Z7keyscanv+0x62>
 128:	08 c0       	rjmp	.+16     	; 0x13a <_Z7keyscanv+0x4e>
 12a:	cd 3f       	cpi	r28, 0xFD	; 253
 12c:	a1 f0       	breq	.+40     	; 0x156 <_Z7keyscanv+0x6a>
 12e:	ce 3f       	cpi	r28, 0xFE	; 254
 130:	71 f4       	brne	.+28     	; 0x14e <_Z7keyscanv+0x62>
		{
		
		case 0xfe:keyvalue = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	11 c0       	rjmp	.+34     	; 0x158 <_Z7keyscanv+0x6c>
		break;
		
		case 0xfd:keyvalue = 2;
		break;
		
		case 0xfb:keyvalue = 3;
 136:	83 e0       	ldi	r24, 0x03	; 3
		break;
 138:	0f c0       	rjmp	.+30     	; 0x158 <_Z7keyscanv+0x6c>
		
		case 0xf7:keyvalue = 4;
 13a:	84 e0       	ldi	r24, 0x04	; 4
		break;
 13c:	0d c0       	rjmp	.+26     	; 0x158 <_Z7keyscanv+0x6c>
		
		case 0xef:keyvalue = 5;
 13e:	85 e0       	ldi	r24, 0x05	; 5
		break;
 140:	0b c0       	rjmp	.+22     	; 0x158 <_Z7keyscanv+0x6c>
		
		case 0xdf:keyvalue = 6;
 142:	86 e0       	ldi	r24, 0x06	; 6
		break;
 144:	09 c0       	rjmp	.+18     	; 0x158 <_Z7keyscanv+0x6c>
		
		case 0xbf:keyvalue = 7;
 146:	87 e0       	ldi	r24, 0x07	; 7
		break;
 148:	07 c0       	rjmp	.+14     	; 0x158 <_Z7keyscanv+0x6c>
		
		case 0x7f:keyvalue = 8;
 14a:	88 e0       	ldi	r24, 0x08	; 8
		break;
 14c:	05 c0       	rjmp	.+10     	; 0x158 <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	03 c0       	rjmp	.+6      	; 0x158 <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	01 c0       	rjmp	.+2      	; 0x158 <_Z7keyscanv+0x6c>
		{
		
		case 0xfe:keyvalue = 1;
		break;
		
		case 0xfd:keyvalue = 2;
 156:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z8MOVE_LEDv>:

//****************º¸≈Ãøÿ÷∆LED“∆Œª
//**************Aø⁄Œ™LEDø⁄ Bø⁄Œ™
void MOVE_LED()
{
	DDRA = 0XFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8a bb       	out	0x1a, r24	; 26
	
	if ((KEY_PIN & 0X01) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION - 1) & 0X07;//*****Œ™—≠ª∑“∆∂Ø
 160:	b0 99       	sbic	0x16, 0	; 22
 162:	07 c0       	rjmp	.+14     	; 0x172 <_Z8MOVE_LEDv+0x16>
 164:	80 91 61 00 	lds	r24, 0x0061
 168:	81 50       	subi	r24, 0x01	; 1
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	80 93 61 00 	sts	0x0061, r24
 170:	08 c0       	rjmp	.+16     	; 0x182 <_Z8MOVE_LEDv+0x26>
	
	else if((KEY_PIN & 0X02) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION + 1) & 0X07;//******—≠ª∑“∆∂Ø
 172:	b1 99       	sbic	0x16, 1	; 22
 174:	06 c0       	rjmp	.+12     	; 0x182 <_Z8MOVE_LEDv+0x26>
 176:	80 91 61 00 	lds	r24, 0x0061
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	87 70       	andi	r24, 0x07	; 7
 17e:	80 93 61 00 	sts	0x0061, r24
	
	PORTA = (1 << MOVE_LED_DIRECTION);//***********µ„¡¡µ⁄ MOVE_LED_DIRECTION Œªµƒµ∆
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	00 90 61 00 	lds	r0, 0x0061
 18a:	02 c0       	rjmp	.+4      	; 0x190 <_Z8MOVE_LEDv+0x34>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <_Z8MOVE_LEDv+0x30>
 194:	8b bb       	out	0x1b, r24	; 27
	
	
	
}
 196:	08 95       	ret

00000198 <_Z17KEYBOARD_MOVE_LEDv>:

void KEYBOARD_MOVE_LED()
{
	if (KEY_PIN != RECENT_KEY)
 198:	96 b3       	in	r25, 0x16	; 22
 19a:	80 91 60 00 	lds	r24, 0x0060
 19e:	98 17       	cp	r25, r24
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <_Z17KEYBOARD_MOVE_LEDv+0x20>
	{
		RECENT_KEY = KEY_PIN;
 1a2:	86 b3       	in	r24, 0x16	; 22
 1a4:	80 93 60 00 	sts	0x0060, r24
		
		MOVE_LED();
 1a8:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z8MOVE_LEDv>
		
		delay_reduce(20);
 1ac:	64 e1       	ldi	r22, 0x14	; 20
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 1b8:	08 95       	ret

000001ba <_Z10ALARM_INITv>:

#define RE_TURE_SOUND() (ALARM_PORT ^= 0X80);//*****∑‰√˘∆˜

void ALARM_INIT()
{
	ALARM_DDR |= (1 << SOUND);
 1ba:	8f 9a       	sbi	0x11, 7	; 17
	
	ALARM_PORT |= (1 << SOUND);
 1bc:	97 9a       	sbi	0x12, 7	; 18
	
	
}
 1be:	08 95       	ret

000001c0 <_Z5ALARMh>:


void ALARM(uchar time)
{
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	c4 e6       	ldi	r28, 0x64	; 100
	
	for(uchar i = 0;i < 100;i ++)
	{
		
		RE_TURE_SOUND(); delay_reduce(time);//********timeøÿ÷∆≤ªÕ¨µƒ∆µ¬ 
 1cc:	c8 2e       	mov	r12, r24
 1ce:	dd 24       	eor	r13, r13
 1d0:	ee 24       	eor	r14, r14
 1d2:	ff 24       	eor	r15, r15
 1d4:	82 b3       	in	r24, 0x12	; 18
 1d6:	80 58       	subi	r24, 0x80	; 128
 1d8:	82 bb       	out	0x12, r24	; 18
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 1e2:	c1 50       	subi	r28, 0x01	; 1


void ALARM(uchar time)
{
	
	for(uchar i = 0;i < 100;i ++)
 1e4:	b9 f7       	brne	.-18     	; 0x1d4 <_Z5ALARMh+0x14>
		RE_TURE_SOUND(); delay_reduce(time);//********timeøÿ÷∆≤ªÕ¨µƒ∆µ¬ 
		
	}
	
	
}
 1e6:	cf 91       	pop	r28
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	08 95       	ret

000001f2 <_Z11CLEAR_ALARMv>:


void CLEAR_ALARM()
{
	ALARM_PORT &= ~(1 << SOUND);
 1f2:	97 98       	cbi	0x12, 7	; 18
}
 1f4:	08 95       	ret

000001f6 <main>:
#include <E:\kuaipan\EDEN\avr\device\lib_keyboard.h>
#include <E:\kuaipan\EDEN\avr\device\lib_alarm.h>

int main(void)
{
	ALARM_INIT();
 1f6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z10ALARM_INITv>
	
	KEYBOARD_INIT_M16();
 1fa:	0e 94 66 00 	call	0xcc	; 0xcc <_Z17KEYBOARD_INIT_M16v>
	
	
    while(1)
    {
       if (KEY_DOWN() == 1)
 1fe:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z8KEY_DOWNv>
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	29 f4       	brne	.+10     	; 0x210 <main+0x1a>
       {
		   uchar SOUND_NUM = keyscan();
 206:	0e 94 76 00 	call	0xec	; 0xec <_Z7keyscanv>
		   
		   ALARM(SOUND_NUM);
 20a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z5ALARMh>
 20e:	f7 cf       	rjmp	.-18     	; 0x1fe <main+0x8>
		  
		   
       }
	   else
	   {
		   CLEAR_ALARM();
 210:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z11CLEAR_ALARMv>
 214:	f4 cf       	rjmp	.-24     	; 0x1fe <main+0x8>

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
