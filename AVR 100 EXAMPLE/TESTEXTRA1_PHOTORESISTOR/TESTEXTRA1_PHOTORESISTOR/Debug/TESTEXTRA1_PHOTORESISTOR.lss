
TESTEXTRA1_PHOTORESISTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000014c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  000001e0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000045c  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000134  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a5  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000011f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000018c  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e5  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 93 00 	call	0x126	; 0x126 <main>
  8a:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#define uchar unsigned char


void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z18PHOTORESISTOR_INITv>:
//******************初始化
//****************************************************

void PHOTORESISTOR_INIT()
{
	PHOTORESISTOR_DDR &= ~(1 << PHOTORESISTOR_IO);
  cc:	b8 98       	cbi	0x17, 0	; 23
	
	PHOTORESISTOR_PORT &= ~(1 << PHOTORESISTOR_IO);
  ce:	c0 98       	cbi	0x18, 0	; 24
	
	
}
  d0:	08 95       	ret

000000d2 <_Z19PHOTORESISTOR_VALUEv>:

//****************************************************
//******************判别现在是亮还是暗 因为亮时候很容易跳 所以用数组只要有亮的就亮
//****************************************************
uchar PHOTORESISTOR_VALUE()
{
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	}
	for(uchar i = 0;i < 10;i ++)
	{
		if ((VALUE[i] &  (1 << PHOTORESISTOR_IO))  == 0x00)
		{
			PHOTORESISTOR_NOW = PHOTORESISTOR_LIGHT;
  da:	c3 e6       	ldi	r28, 0x63	; 99
  dc:	d0 e0       	ldi	r29, 0x00	; 0


//****************************************************
//******************判别现在是亮还是暗 因为亮时候很容易跳 所以用数组只要有亮的就亮
//****************************************************
uchar PHOTORESISTOR_VALUE()
  de:	8e 01       	movw	r16, r28
  e0:	06 5f       	subi	r16, 0xF6	; 246
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	uchar PHOTORESISTOR_NOW;
	
	for (uchar i = 0;i < 10;i ++)
	{
		VALUE[i] = PHOTORESISTOR_PIN;
  e4:	86 b3       	in	r24, 0x16	; 22
  e6:	89 93       	st	Y+, r24
		
		delay_reduce(5);
  e8:	65 e0       	ldi	r22, 0x05	; 5
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
//****************************************************
uchar PHOTORESISTOR_VALUE()
{
	uchar PHOTORESISTOR_NOW;
	
	for (uchar i = 0;i < 10;i ++)
  f4:	c0 17       	cp	r28, r16
  f6:	d1 07       	cpc	r29, r17
  f8:	a9 f7       	brne	.-22     	; 0xe4 <_Z19PHOTORESISTOR_VALUEv+0x12>
		
		delay_reduce(5);
	}
	for(uchar i = 0;i < 10;i ++)
	{
		if ((VALUE[i] &  (1 << PHOTORESISTOR_IO))  == 0x00)
  fa:	80 91 63 00 	lds	r24, 0x0063
  fe:	80 ff       	sbrs	r24, 0
 100:	0a c0       	rjmp	.+20     	; 0x116 <_Z19PHOTORESISTOR_VALUEv+0x44>
 102:	e4 e6       	ldi	r30, 0x64	; 100
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	81 91       	ld	r24, Z+
 108:	80 ff       	sbrs	r24, 0
 10a:	07 c0       	rjmp	.+14     	; 0x11a <_Z19PHOTORESISTOR_VALUEv+0x48>
	{
		VALUE[i] = PHOTORESISTOR_PIN;
		
		delay_reduce(5);
	}
	for(uchar i = 0;i < 10;i ++)
 10c:	e0 17       	cp	r30, r16
 10e:	f1 07       	cpc	r31, r17
 110:	d1 f7       	brne	.-12     	; 0x106 <_Z19PHOTORESISTOR_VALUEv+0x34>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	03 c0       	rjmp	.+6      	; 0x11c <_Z19PHOTORESISTOR_VALUEv+0x4a>
	{
		if ((VALUE[i] &  (1 << PHOTORESISTOR_IO))  == 0x00)
		{
			PHOTORESISTOR_NOW = PHOTORESISTOR_LIGHT;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	01 c0       	rjmp	.+2      	; 0x11c <_Z19PHOTORESISTOR_VALUEv+0x4a>
 11a:	81 e0       	ldi	r24, 0x01	; 1
		
	}
	
	
	return PHOTORESISTOR_NOW;
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <main>:
#include <E:\kuaipan\EDEN\avr\system\lib_delay.h>
#include <E:\kuaipan\EDEN\avr\device\lib_photoresistor.h>

int main(void)
{
	DDRA = 0XFF; 
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0X00;
 12a:	1b ba       	out	0x1b, r1	; 27
	
	PHOTORESISTOR_INIT();
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <_Z18PHOTORESISTOR_INITv>
	
    while(1)
    {
		switch(PHOTORESISTOR_VALUE()) 
		{
			case PHOTORESISTOR_LIGHT: PORTA = 0x01;
 130:	d1 e0       	ldi	r29, 0x01	; 1
			break;
			  
			case PHOTORESISTOR_DARK: PORTA = 0x02;
 132:	c2 e0       	ldi	r28, 0x02	; 2
	
	PHOTORESISTOR_INIT();
	
    while(1)
    {
		switch(PHOTORESISTOR_VALUE()) 
 134:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z19PHOTORESISTOR_VALUEv>
 138:	88 23       	and	r24, r24
 13a:	21 f0       	breq	.+8      	; 0x144 <main+0x1e>
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	d1 f7       	brne	.-12     	; 0x134 <main+0xe>
		{
			case PHOTORESISTOR_LIGHT: PORTA = 0x01;
 140:	db bb       	out	0x1b, r29	; 27
			break;
 142:	f8 cf       	rjmp	.-16     	; 0x134 <main+0xe>
			  
			case PHOTORESISTOR_DARK: PORTA = 0x02;
 144:	cb bb       	out	0x1b, r28	; 27
			break;
 146:	f6 cf       	rjmp	.-20     	; 0x134 <main+0xe>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
