
TEST22_TIMER1_BEEP_DING_DONG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000006e6  0000077a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000077e  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00002530  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006bd  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016d  00000000  00000000  00002c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000372  00000000  00000000  00002dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  0000314c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000357  00000000  00000000  00003877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  8a:	0c 94 71 03 	jmp	0x6e2	; 0x6e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#define uchar unsigned char


void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z22TIMER0_NORMAL_PWM_INITv>:
void TIMER0_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER0_DDR |= (1 << PWM_TIMER0_OUT); 
	//计数器初始化
	TCNT0=0x00;
  cc:	12 be       	out	0x32, r1	; 50
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TOIE0;
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |= (1 << COM00) | (1 << CS00) | (1 << CS02);//设置为普通PWM；匹配时将取反；1024分频
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	85 61       	ori	r24, 0x15	; 21
  d8:	83 bf       	out	0x33, r24	; 51
	
	
}
  da:	08 95       	ret

000000dc <_Z27TIMER0_NORMAL_PWM_TCNT0_setf>:
//**************************************************************


void TIMER0_NORMAL_PWM_TCNT0_set(float compare_time)
{
	TCNT0 = 256 - F_CPU/1024 * compare_time;
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	41 ee       	ldi	r20, 0xE1	; 225
  e2:	55 e4       	ldi	r21, 0x45	; 69
  e4:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
  e8:	9b 01       	movw	r18, r22
  ea:	ac 01       	movw	r20, r24
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	93 e4       	ldi	r25, 0x43	; 67
  f4:	0e 94 2c 02 	call	0x458	; 0x458 <__subsf3>
  f8:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
  fc:	62 bf       	out	0x32, r22	; 50
	
}
  fe:	08 95       	ret

00000100 <_Z24TIMER0_NORMAL_PWM_SEARCHv>:
//*****************F_CPU/1024 * compare_time 不大于255******
//**************一般compare_time取0.01 在中断中累加或者用TIMER1
//**************************************************************
void TIMER0_NORMAL_PWM_SEARCH()
{
	while(!(TIFR & ~(1 << TOV0)));//***********等待置位
 100:	88 b7       	in	r24, 0x38	; 56
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	e9 f3       	breq	.-6      	; 0x100 <_Z24TIMER0_NORMAL_PWM_SEARCHv>
	
	TIFR |= 1 << TOV0;//***************写1清零
 106:	88 b7       	in	r24, 0x38	; 56
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	88 bf       	out	0x38, r24	; 56
	
	
	
}
 10c:	08 95       	ret

0000010e <_Z21TIMER0_CATCH_PWM_INITv>:
//**************************************************************

void TIMER0_CATCH_PWM_INIT()
{
	//端口初始化
	PWM_TIMER0_DDR &= ~(1 << PWM_TIMER0_T0); 
 10e:	b8 98       	cbi	0x17, 0	; 23
	PWM_TIMER0_PORT |= 1 << PWM_TIMER0_T0;
 110:	c0 9a       	sbi	0x18, 0	; 24
	//计数器初始化
	TCNT0 = 255;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	82 bf       	out	0x32, r24	; 50
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TOIE0;
 116:	89 b7       	in	r24, 0x39	; 57
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |=  (1 << CS01) | (1 << CS02);//设置为捕获PWM；
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	83 bf       	out	0x33, r24	; 51
	
	
}
 122:	08 95       	ret

00000124 <_Z24TIMER0_FASTPWM_OCR0_initv>:

//**********************FAST PWM OCR0模式初始化*******************//
void TIMER0_FASTPWM_OCR0_init()
{
	//端口初始化
	PWM_TIMER0_DDR|=(1<<PWM_TIMER0_OUT); 
 124:	bb 9a       	sbi	0x17, 3	; 23
	//计数器初始化
	TCNT0=0x00;OCR0 = 0X01;//***避免与bottom相同时候特殊情况
 126:	12 be       	out	0x32, r1	; 50
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	8c bf       	out	0x3c, r24	; 60
	//中断初始化
	TIMSK |= (1<<OCIE0)|(1<<TOIE0);
 12c:	89 b7       	in	r24, 0x39	; 57
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << COM00) | (1 << CS01);//设置为快速PWM；与OCR0匹配时将清零；8分频
 132:	83 b7       	in	r24, 0x33	; 51
 134:	8a 67       	ori	r24, 0x7A	; 122
 136:	83 bf       	out	0x33, r24	; 51
	
	
}
 138:	08 95       	ret

0000013a <_Z24TIMER0_FASTPWMA_OCR0_setf>:
//********************FAST PWM ICR0模式时间设定*********************//
void TIMER0_FASTPWMA_OCR0_set(float compare_time)
{
	OCR0=F_CPU/8*compare_time;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	41 e6       	ldi	r20, 0x61	; 97
 140:	59 e4       	ldi	r21, 0x49	; 73
 142:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 146:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 14a:	6c bf       	out	0x3c, r22	; 60
	
}
 14c:	08 95       	ret

0000014e <_Z22TIMER1_NORMAL_PWM_INITv>:
void TIMER1_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT1 = 0x00;
 14e:	1d bc       	out	0x2d, r1	; 45
 150:	1c bc       	out	0x2c, r1	; 44
	//中断初始化
	TIMSK |= 1<<TOIE1;
 152:	89 b7       	in	r24, 0x39	; 57
 154:	84 60       	ori	r24, 0x04	; 4
 156:	89 bf       	out	0x39, r24	; 57
	//普通PWM模式设置
	//TCCR1A |= 1<<COM1A1;//比较匹配清零 TOP置位
	TCCR1B |= (1<<CS10)|(1<<CS12);//1024分频
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	85 60       	ori	r24, 0x05	; 5
 15c:	8e bd       	out	0x2e, r24	; 46
	
	
}
 15e:	08 95       	ret

00000160 <_Z21TIMER1_NORMAL_PWM_setf>:
//********************TIMER1 NORMAL PWM 模式时间设定*********************//
void TIMER1_NORMAL_PWM_set(float compare_time)
{
	TCNT1 = 65536 - F_CPU/1024*compare_time;
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	41 ee       	ldi	r20, 0xE1	; 225
 166:	55 e4       	ldi	r21, 0x45	; 69
 168:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 16c:	9b 01       	movw	r18, r22
 16e:	ac 01       	movw	r20, r24
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	97 e4       	ldi	r25, 0x47	; 71
 178:	0e 94 2c 02 	call	0x458	; 0x458 <__subsf3>
 17c:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 180:	dc 01       	movw	r26, r24
 182:	cb 01       	movw	r24, r22
 184:	9d bd       	out	0x2d, r25	; 45
 186:	8c bd       	out	0x2c, r24	; 44
	
}
 188:	08 95       	ret

0000018a <_Z25TIMER1_FASTPWMA_ICR1_initv>:

//**********************FAST PWM ICR1模式初始化*******************//
void TIMER1_FASTPWMA_ICR1_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
 18a:	8d 9a       	sbi	0x11, 5	; 17
 18c:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;
 18e:	1d bc       	out	0x2d, r1	; 45
 190:	1c bc       	out	0x2c, r1	; 44
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
 192:	89 b7       	in	r24, 0x39	; 57
 194:	84 61       	ori	r24, 0x14	; 20
 196:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);//比较匹配清零 TOP置位 
 198:	8f b5       	in	r24, 0x2f	; 47
 19a:	82 68       	ori	r24, 0x82	; 130
 19c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);//TOP为ICR1的值 1024分频
 19e:	8e b5       	in	r24, 0x2e	; 46
 1a0:	8d 61       	ori	r24, 0x1D	; 29
 1a2:	8e bd       	out	0x2e, r24	; 46
	
	
}
 1a4:	08 95       	ret

000001a6 <_Z24TIMER1_FASTPWMA_ICR1_setff>:
//********************FAST PWM ICR1模式时间设定*********************//
void TIMER1_FASTPWMA_ICR1_set(float compare_time,float top_time)
{
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	69 01       	movw	r12, r18
 1b0:	7a 01       	movw	r14, r20
	OCR1A=F_CPU/1024*compare_time;
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	41 ee       	ldi	r20, 0xE1	; 225
 1b8:	55 e4       	ldi	r21, 0x45	; 69
 1ba:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 1be:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 1c2:	dc 01       	movw	r26, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	9b bd       	out	0x2b, r25	; 43
 1c8:	8a bd       	out	0x2a, r24	; 42
	ICR1=F_CPU/1024*top_time;
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	41 ee       	ldi	r20, 0xE1	; 225
 1d4:	55 e4       	ldi	r21, 0x45	; 69
 1d6:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 1da:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	97 bd       	out	0x27, r25	; 39
 1e4:	86 bd       	out	0x26, r24	; 38
}
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <_Z31TIMER1_PHASE_CORRECTION_10_initv>:

//**********************十位相位修正PWM模式初始化*******************//
void TIMER1_PHASE_CORRECTION_10_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
 1f0:	8d 9a       	sbi	0x11, 5	; 17
 1f2:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;OCR1A = 0X00;
 1f4:	1d bc       	out	0x2d, r1	; 45
 1f6:	1c bc       	out	0x2c, r1	; 44
 1f8:	1b bc       	out	0x2b, r1	; 43
 1fa:	1a bc       	out	0x2a, r1	; 42
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	84 61       	ori	r24, 0x14	; 20
 200:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);//比较匹配清零 TOP置位
 202:	8f b5       	in	r24, 0x2f	; 47
 204:	83 68       	ori	r24, 0x83	; 131
 206:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);//TOP为ICR1的值 8分频
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	8e bd       	out	0x2e, r24	; 46
	
	
}
 20e:	08 95       	ret

00000210 <_Z22TIMER2_NORMAL_PWM_INITv>:
void TIMER2_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT2 = 0x00;
 210:	14 bc       	out	0x24, r1	; 36
	//中断初始化
	TIMSK |= 1<<TOIE2;
 212:	89 b7       	in	r24, 0x39	; 57
 214:	80 64       	ori	r24, 0x40	; 64
 216:	89 bf       	out	0x39, r24	; 57
	//普通PWM模式设置
	//TCCR2 |= 1<<COM20;//比较匹配取反
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20);//1024分频
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	87 60       	ori	r24, 0x07	; 7
 21c:	85 bd       	out	0x25, r24	; 37
	
	
}
 21e:	08 95       	ret

00000220 <_Z21TIMER2_NORMAL_PWM_setf>:
//********************TIMER1 NORMAL PWM 模式时间设定*********************//
void TIMER2_NORMAL_PWM_set(float compare_time)
{
	TCNT2 = 256 - F_CPU/1024*compare_time;
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	41 ee       	ldi	r20, 0xE1	; 225
 226:	55 e4       	ldi	r21, 0x45	; 69
 228:	0e 94 0e 03 	call	0x61c	; 0x61c <__mulsf3>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	93 e4       	ldi	r25, 0x43	; 67
 238:	0e 94 2c 02 	call	0x458	; 0x458 <__subsf3>
 23c:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 240:	64 bd       	out	0x24, r22	; 36
	
}
 242:	08 95       	ret

00000244 <_Z17KEYBOARD_INIT_M16v>:

//****************初始化

void KEYBOARD_INIT_M16()
{
	KEY_DDR = 0X00;
 244:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0Xff;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	88 bb       	out	0x18, r24	; 24
}
 24a:	08 95       	ret

0000024c <_Z8KEY_DOWNv>:
uchar KEY_DOWN()
{
	
	
	
	delay_reduce(100);
 24c:	64 e6       	ldi	r22, 0x64	; 100
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	uchar i;
	if(KEY_PIN != 0xff)
 258:	96 b3       	in	r25, 0x16	; 22
	{
		i=1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	9f 3f       	cpi	r25, 0xFF	; 255
 25e:	09 f4       	brne	.+2      	; 0x262 <_Z8KEY_DOWNv+0x16>
 260:	80 e0       	ldi	r24, 0x00	; 0
	{
		i=0;
	}
	return i;

}
 262:	08 95       	ret

00000264 <_Z7keyscanv>:


/*******************读键盘************/

uchar keyscan()
{
 264:	cf 93       	push	r28
	KEY_DDR = 0x00;
 266:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0xFF;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	88 bb       	out	0x18, r24	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
 26c:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
 26e:	cc 23       	and	r28, r28
 270:	61 f1       	breq	.+88     	; 0x2ca <_Z7keyscanv+0x66>
	 {
		//****************去抖 
	delay_reduce(30);
 272:	6e e1       	ldi	r22, 0x1E	; 30
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr == zavr)
	{
		switch(zavr)
 27e:	cf 3e       	cpi	r28, 0xEF	; 239
 280:	d1 f0       	breq	.+52     	; 0x2b6 <_Z7keyscanv+0x52>
 282:	c0 3f       	cpi	r28, 0xF0	; 240
 284:	38 f4       	brcc	.+14     	; 0x294 <_Z7keyscanv+0x30>
 286:	cf 3b       	cpi	r28, 0xBF	; 191
 288:	d1 f0       	breq	.+52     	; 0x2be <_Z7keyscanv+0x5a>
 28a:	cf 3d       	cpi	r28, 0xDF	; 223
 28c:	b1 f0       	breq	.+44     	; 0x2ba <_Z7keyscanv+0x56>
 28e:	cf 37       	cpi	r28, 0x7F	; 127
 290:	d1 f4       	brne	.+52     	; 0x2c6 <_Z7keyscanv+0x62>
 292:	17 c0       	rjmp	.+46     	; 0x2c2 <_Z7keyscanv+0x5e>
 294:	cb 3f       	cpi	r28, 0xFB	; 251
 296:	59 f0       	breq	.+22     	; 0x2ae <_Z7keyscanv+0x4a>
 298:	cc 3f       	cpi	r28, 0xFC	; 252
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <_Z7keyscanv+0x3e>
 29c:	c7 3f       	cpi	r28, 0xF7	; 247
 29e:	99 f4       	brne	.+38     	; 0x2c6 <_Z7keyscanv+0x62>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <_Z7keyscanv+0x4e>
 2a2:	cd 3f       	cpi	r28, 0xFD	; 253
 2a4:	a1 f0       	breq	.+40     	; 0x2ce <_Z7keyscanv+0x6a>
 2a6:	ce 3f       	cpi	r28, 0xFE	; 254
 2a8:	71 f4       	brne	.+28     	; 0x2c6 <_Z7keyscanv+0x62>
		{
		
		case 0xfe:keyvalue = 1;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	11 c0       	rjmp	.+34     	; 0x2d0 <_Z7keyscanv+0x6c>
		break;
		
		case 0xfd:keyvalue = 2;
		break;
		
		case 0xfb:keyvalue = 3;
 2ae:	83 e0       	ldi	r24, 0x03	; 3
		break;
 2b0:	0f c0       	rjmp	.+30     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		case 0xf7:keyvalue = 4;
 2b2:	84 e0       	ldi	r24, 0x04	; 4
		break;
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		case 0xef:keyvalue = 5;
 2b6:	85 e0       	ldi	r24, 0x05	; 5
		break;
 2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		case 0xdf:keyvalue = 6;
 2ba:	86 e0       	ldi	r24, 0x06	; 6
		break;
 2bc:	09 c0       	rjmp	.+18     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		case 0xbf:keyvalue = 7;
 2be:	87 e0       	ldi	r24, 0x07	; 7
		break;
 2c0:	07 c0       	rjmp	.+14     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		case 0x7f:keyvalue = 8;
 2c2:	88 e0       	ldi	r24, 0x08	; 8
		break;
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 2ca:	80 e1       	ldi	r24, 0x10	; 16
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <_Z7keyscanv+0x6c>
		{
		
		case 0xfe:keyvalue = 1;
		break;
		
		case 0xfd:keyvalue = 2;
 2ce:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
}
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <_Z8MOVE_LEDv>:

//****************键盘控制LED移位
//**************A口为LED口 B口为
void MOVE_LED()
{
	DDRA = 0XFF;
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	8a bb       	out	0x1a, r24	; 26
	
	if ((KEY_PIN & 0X01) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION - 1) & 0X07;//*****为循环移动
 2d8:	b0 99       	sbic	0x16, 0	; 22
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <_Z8MOVE_LEDv+0x16>
 2dc:	80 91 65 00 	lds	r24, 0x0065
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	87 70       	andi	r24, 0x07	; 7
 2e4:	80 93 65 00 	sts	0x0065, r24
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <_Z8MOVE_LEDv+0x26>
	
	else if((KEY_PIN & 0X02) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION + 1) & 0X07;//******循环移动
 2ea:	b1 99       	sbic	0x16, 1	; 22
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <_Z8MOVE_LEDv+0x26>
 2ee:	80 91 65 00 	lds	r24, 0x0065
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
 2f4:	87 70       	andi	r24, 0x07	; 7
 2f6:	80 93 65 00 	sts	0x0065, r24
	
	PORTA = (1 << MOVE_LED_DIRECTION);//***********点亮第 MOVE_LED_DIRECTION 位的灯
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	00 90 65 00 	lds	r0, 0x0065
 302:	02 c0       	rjmp	.+4      	; 0x308 <_Z8MOVE_LEDv+0x34>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <_Z8MOVE_LEDv+0x30>
 30c:	8b bb       	out	0x1b, r24	; 27
	
	
	
}
 30e:	08 95       	ret

00000310 <_Z17KEYBOARD_MOVE_LEDv>:

void KEYBOARD_MOVE_LED()
{
	if (KEY_PIN != RECENT_KEY)
 310:	96 b3       	in	r25, 0x16	; 22
 312:	80 91 64 00 	lds	r24, 0x0064
 316:	98 17       	cp	r25, r24
 318:	59 f0       	breq	.+22     	; 0x330 <_Z17KEYBOARD_MOVE_LEDv+0x20>
	{
		RECENT_KEY = KEY_PIN;
 31a:	86 b3       	in	r24, 0x16	; 22
 31c:	80 93 64 00 	sts	0x0064, r24
		
		MOVE_LED();
 320:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z8MOVE_LEDv>
		
		delay_reduce(20);
 324:	64 e1       	ldi	r22, 0x14	; 20
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 330:	08 95       	ret

00000332 <_Z10ALARM_INITv>:

#define RE_TURE_SOUND() (ALARM_PORT ^= 0X80);//*****蜂鸣器

void ALARM_INIT()
{
	ALARM_DDR |= (1 << SOUND);
 332:	8f 9a       	sbi	0x11, 7	; 17
	
	ALARM_PORT &= ~(1 << SOUND);
 334:	97 98       	cbi	0x12, 7	; 18
	
	
}
 336:	08 95       	ret

00000338 <_Z5ALARMh>:


void ALARM(uchar time)
{
 338:	cf 92       	push	r12
 33a:	df 92       	push	r13
 33c:	ef 92       	push	r14
 33e:	ff 92       	push	r15
 340:	cf 93       	push	r28
 342:	c4 e6       	ldi	r28, 0x64	; 100
	
	for(uchar i = 0;i < 100;i ++)
	{
		
		RE_TURE_SOUND(); delay_reduce(time);//********time控制不同的频率
 344:	c8 2e       	mov	r12, r24
 346:	dd 24       	eor	r13, r13
 348:	ee 24       	eor	r14, r14
 34a:	ff 24       	eor	r15, r15
 34c:	82 b3       	in	r24, 0x12	; 18
 34e:	80 58       	subi	r24, 0x80	; 128
 350:	82 bb       	out	0x12, r24	; 18
 352:	c7 01       	movw	r24, r14
 354:	b6 01       	movw	r22, r12
 356:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 35a:	c1 50       	subi	r28, 0x01	; 1


void ALARM(uchar time)
{
	
	for(uchar i = 0;i < 100;i ++)
 35c:	b9 f7       	brne	.-18     	; 0x34c <_Z5ALARMh+0x14>
		RE_TURE_SOUND(); delay_reduce(time);//********time控制不同的频率
		
	}
	
	
}
 35e:	cf 91       	pop	r28
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	08 95       	ret

0000036a <_Z11CLEAR_ALARMv>:


void CLEAR_ALARM()
{
	ALARM_PORT &= ~(1 << SOUND);
 36a:	97 98       	cbi	0x12, 7	; 18
}
 36c:	08 95       	ret

0000036e <__vector_8>:
#include <E:\kuaipan\EDEN\avr\device\lib_alarm.h>

float SOUND_HZ = 65536 - 5161;

ISR(TIMER1_OVF_vect)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	RE_TURE_SOUND(); 
 390:	82 b3       	in	r24, 0x12	; 18
 392:	80 58       	subi	r24, 0x80	; 128
 394:	82 bb       	out	0x12, r24	; 18
	 
	TCNT1 = SOUND_HZ;
 396:	60 91 60 00 	lds	r22, 0x0060
 39a:	70 91 61 00 	lds	r23, 0x0061
 39e:	80 91 62 00 	lds	r24, 0x0062
 3a2:	90 91 63 00 	lds	r25, 0x0063
 3a6:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
 3aa:	dc 01       	movw	r26, r24
 3ac:	cb 01       	movw	r24, r22
 3ae:	9d bd       	out	0x2d, r25	; 45
 3b0:	8c bd       	out	0x2c, r24	; 44
	
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <main>:


int main(void) 
{
	ALARM_INIT();
 3d4:	0e 94 99 01 	call	0x332	; 0x332 <_Z10ALARM_INITv>
	
	KEYBOARD_INIT_M16();
 3d8:	0e 94 22 01 	call	0x244	; 0x244 <_Z17KEYBOARD_INIT_M16v>
	
	TCCR1B = 0x01;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK = 0X00;
 3e0:	19 be       	out	0x39, r1	; 57
	
	TCNT1 = 65536 - 5161;
 3e2:	87 ed       	ldi	r24, 0xD7	; 215
 3e4:	9b ee       	ldi	r25, 0xEB	; 235
 3e6:	9d bd       	out	0x2d, r25	; 45
 3e8:	8c bd       	out	0x2c, r24	; 44
	
	sei();
 3ea:	78 94       	sei
	
    while(1)
    {
        if (KEY_DOWN() == 1)
        {
			TIMSK = 1 << TOIE1;
 3ec:	c4 e0       	ldi	r28, 0x04	; 4
			
			SOUND_HZ = 65536 -5161;
 3ee:	0f 2e       	mov	r0, r31
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	cf 2e       	mov	r12, r31
 3f4:	f7 ed       	ldi	r31, 0xD7	; 215
 3f6:	df 2e       	mov	r13, r31
 3f8:	fb e6       	ldi	r31, 0x6B	; 107
 3fa:	ef 2e       	mov	r14, r31
 3fc:	f7 e4       	ldi	r31, 0x47	; 71
 3fe:	ff 2e       	mov	r15, r31
 400:	f0 2d       	mov	r31, r0
			 
			delay_second(3); 
			
			SOUND_HZ = 65536 - 7373;
 402:	0f 2e       	mov	r0, r31
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	8f 2e       	mov	r8, r31
 408:	f3 e3       	ldi	r31, 0x33	; 51
 40a:	9f 2e       	mov	r9, r31
 40c:	f3 e6       	ldi	r31, 0x63	; 99
 40e:	af 2e       	mov	r10, r31
 410:	f7 e4       	ldi	r31, 0x47	; 71
 412:	bf 2e       	mov	r11, r31
 414:	f0 2d       	mov	r31, r0
	
	sei();
	
    while(1)
    {
        if (KEY_DOWN() == 1)
 416:	0e 94 26 01 	call	0x24c	; 0x24c <_Z8KEY_DOWNv>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	e1 f7       	brne	.-8      	; 0x416 <main+0x42>
        {
			TIMSK = 1 << TOIE1;
 41e:	c9 bf       	out	0x39, r28	; 57
			
			SOUND_HZ = 65536 -5161;
 420:	c0 92 60 00 	sts	0x0060, r12
 424:	d0 92 61 00 	sts	0x0061, r13
 428:	e0 92 62 00 	sts	0x0062, r14
 42c:	f0 92 63 00 	sts	0x0063, r15
			 
			delay_second(3); 
 430:	83 e0       	ldi	r24, 0x03	; 3
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
			
			SOUND_HZ = 65536 - 7373;
 438:	80 92 60 00 	sts	0x0060, r8
 43c:	90 92 61 00 	sts	0x0061, r9
 440:	a0 92 62 00 	sts	0x0062, r10
 444:	b0 92 63 00 	sts	0x0063, r11
			
			delay_second(5);
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
			
			CLEAR_ALARM();
 450:	0e 94 b5 01 	call	0x36a	; 0x36a <_Z11CLEAR_ALARMv>
			
			TIMSK = 0X00;
 454:	19 be       	out	0x39, r1	; 57
 456:	df cf       	rjmp	.-66     	; 0x416 <main+0x42>

00000458 <__subsf3>:
 458:	50 58       	subi	r21, 0x80	; 128

0000045a <__addsf3>:
 45a:	bb 27       	eor	r27, r27
 45c:	aa 27       	eor	r26, r26
 45e:	0e d0       	rcall	.+28     	; 0x47c <__addsf3x>
 460:	a3 c0       	rjmp	.+326    	; 0x5a8 <__fp_round>
 462:	94 d0       	rcall	.+296    	; 0x58c <__fp_pscA>
 464:	30 f0       	brcs	.+12     	; 0x472 <__stack+0x13>
 466:	99 d0       	rcall	.+306    	; 0x59a <__fp_pscB>
 468:	20 f0       	brcs	.+8      	; 0x472 <__stack+0x13>
 46a:	31 f4       	brne	.+12     	; 0x478 <__stack+0x19>
 46c:	9f 3f       	cpi	r25, 0xFF	; 255
 46e:	11 f4       	brne	.+4      	; 0x474 <__stack+0x15>
 470:	1e f4       	brtc	.+6      	; 0x478 <__stack+0x19>
 472:	89 c0       	rjmp	.+274    	; 0x586 <__fp_nan>
 474:	0e f4       	brtc	.+2      	; 0x478 <__stack+0x19>
 476:	e0 95       	com	r30
 478:	e7 fb       	bst	r30, 7
 47a:	7f c0       	rjmp	.+254    	; 0x57a <__fp_inf>

0000047c <__addsf3x>:
 47c:	e9 2f       	mov	r30, r25
 47e:	a5 d0       	rcall	.+330    	; 0x5ca <__fp_split3>
 480:	80 f3       	brcs	.-32     	; 0x462 <__stack+0x3>
 482:	ba 17       	cp	r27, r26
 484:	62 07       	cpc	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	84 07       	cpc	r24, r20
 48a:	95 07       	cpc	r25, r21
 48c:	18 f0       	brcs	.+6      	; 0x494 <__addsf3x+0x18>
 48e:	71 f4       	brne	.+28     	; 0x4ac <__addsf3x+0x30>
 490:	9e f5       	brtc	.+102    	; 0x4f8 <__addsf3x+0x7c>
 492:	bd c0       	rjmp	.+378    	; 0x60e <__fp_zero>
 494:	0e f4       	brtc	.+2      	; 0x498 <__addsf3x+0x1c>
 496:	e0 95       	com	r30
 498:	0b 2e       	mov	r0, r27
 49a:	ba 2f       	mov	r27, r26
 49c:	a0 2d       	mov	r26, r0
 49e:	0b 01       	movw	r0, r22
 4a0:	b9 01       	movw	r22, r18
 4a2:	90 01       	movw	r18, r0
 4a4:	0c 01       	movw	r0, r24
 4a6:	ca 01       	movw	r24, r20
 4a8:	a0 01       	movw	r20, r0
 4aa:	11 24       	eor	r1, r1
 4ac:	ff 27       	eor	r31, r31
 4ae:	59 1b       	sub	r21, r25
 4b0:	99 f0       	breq	.+38     	; 0x4d8 <__addsf3x+0x5c>
 4b2:	59 3f       	cpi	r21, 0xF9	; 249
 4b4:	50 f4       	brcc	.+20     	; 0x4ca <__addsf3x+0x4e>
 4b6:	50 3e       	cpi	r21, 0xE0	; 224
 4b8:	68 f1       	brcs	.+90     	; 0x514 <__addsf3x+0x98>
 4ba:	1a 16       	cp	r1, r26
 4bc:	f0 40       	sbci	r31, 0x00	; 0
 4be:	a2 2f       	mov	r26, r18
 4c0:	23 2f       	mov	r18, r19
 4c2:	34 2f       	mov	r19, r20
 4c4:	44 27       	eor	r20, r20
 4c6:	58 5f       	subi	r21, 0xF8	; 248
 4c8:	f3 cf       	rjmp	.-26     	; 0x4b0 <__addsf3x+0x34>
 4ca:	46 95       	lsr	r20
 4cc:	37 95       	ror	r19
 4ce:	27 95       	ror	r18
 4d0:	a7 95       	ror	r26
 4d2:	f0 40       	sbci	r31, 0x00	; 0
 4d4:	53 95       	inc	r21
 4d6:	c9 f7       	brne	.-14     	; 0x4ca <__addsf3x+0x4e>
 4d8:	7e f4       	brtc	.+30     	; 0x4f8 <__addsf3x+0x7c>
 4da:	1f 16       	cp	r1, r31
 4dc:	ba 0b       	sbc	r27, r26
 4de:	62 0b       	sbc	r22, r18
 4e0:	73 0b       	sbc	r23, r19
 4e2:	84 0b       	sbc	r24, r20
 4e4:	ba f0       	brmi	.+46     	; 0x514 <__addsf3x+0x98>
 4e6:	91 50       	subi	r25, 0x01	; 1
 4e8:	a1 f0       	breq	.+40     	; 0x512 <__addsf3x+0x96>
 4ea:	ff 0f       	add	r31, r31
 4ec:	bb 1f       	adc	r27, r27
 4ee:	66 1f       	adc	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	88 1f       	adc	r24, r24
 4f4:	c2 f7       	brpl	.-16     	; 0x4e6 <__addsf3x+0x6a>
 4f6:	0e c0       	rjmp	.+28     	; 0x514 <__addsf3x+0x98>
 4f8:	ba 0f       	add	r27, r26
 4fa:	62 1f       	adc	r22, r18
 4fc:	73 1f       	adc	r23, r19
 4fe:	84 1f       	adc	r24, r20
 500:	48 f4       	brcc	.+18     	; 0x514 <__addsf3x+0x98>
 502:	87 95       	ror	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b7 95       	ror	r27
 50a:	f7 95       	ror	r31
 50c:	9e 3f       	cpi	r25, 0xFE	; 254
 50e:	08 f0       	brcs	.+2      	; 0x512 <__addsf3x+0x96>
 510:	b3 cf       	rjmp	.-154    	; 0x478 <__stack+0x19>
 512:	93 95       	inc	r25
 514:	88 0f       	add	r24, r24
 516:	08 f0       	brcs	.+2      	; 0x51a <__addsf3x+0x9e>
 518:	99 27       	eor	r25, r25
 51a:	ee 0f       	add	r30, r30
 51c:	97 95       	ror	r25
 51e:	87 95       	ror	r24
 520:	08 95       	ret

00000522 <__fixunssfsi>:
 522:	5b d0       	rcall	.+182    	; 0x5da <__fp_splitA>
 524:	88 f0       	brcs	.+34     	; 0x548 <__fixunssfsi+0x26>
 526:	9f 57       	subi	r25, 0x7F	; 127
 528:	90 f0       	brcs	.+36     	; 0x54e <__fixunssfsi+0x2c>
 52a:	b9 2f       	mov	r27, r25
 52c:	99 27       	eor	r25, r25
 52e:	b7 51       	subi	r27, 0x17	; 23
 530:	a0 f0       	brcs	.+40     	; 0x55a <__fixunssfsi+0x38>
 532:	d1 f0       	breq	.+52     	; 0x568 <__fixunssfsi+0x46>
 534:	66 0f       	add	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	1a f0       	brmi	.+6      	; 0x544 <__fixunssfsi+0x22>
 53e:	ba 95       	dec	r27
 540:	c9 f7       	brne	.-14     	; 0x534 <__fixunssfsi+0x12>
 542:	12 c0       	rjmp	.+36     	; 0x568 <__fixunssfsi+0x46>
 544:	b1 30       	cpi	r27, 0x01	; 1
 546:	81 f0       	breq	.+32     	; 0x568 <__fixunssfsi+0x46>
 548:	62 d0       	rcall	.+196    	; 0x60e <__fp_zero>
 54a:	b1 e0       	ldi	r27, 0x01	; 1
 54c:	08 95       	ret
 54e:	5f c0       	rjmp	.+190    	; 0x60e <__fp_zero>
 550:	67 2f       	mov	r22, r23
 552:	78 2f       	mov	r23, r24
 554:	88 27       	eor	r24, r24
 556:	b8 5f       	subi	r27, 0xF8	; 248
 558:	39 f0       	breq	.+14     	; 0x568 <__fixunssfsi+0x46>
 55a:	b9 3f       	cpi	r27, 0xF9	; 249
 55c:	cc f3       	brlt	.-14     	; 0x550 <__fixunssfsi+0x2e>
 55e:	86 95       	lsr	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b3 95       	inc	r27
 566:	d9 f7       	brne	.-10     	; 0x55e <__fixunssfsi+0x3c>
 568:	3e f4       	brtc	.+14     	; 0x578 <__fixunssfsi+0x56>
 56a:	90 95       	com	r25
 56c:	80 95       	com	r24
 56e:	70 95       	com	r23
 570:	61 95       	neg	r22
 572:	7f 4f       	sbci	r23, 0xFF	; 255
 574:	8f 4f       	sbci	r24, 0xFF	; 255
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__mulsf3>:
 61c:	0b d0       	rcall	.+22     	; 0x634 <__mulsf3x>
 61e:	c4 cf       	rjmp	.-120    	; 0x5a8 <__fp_round>
 620:	b5 df       	rcall	.-150    	; 0x58c <__fp_pscA>
 622:	28 f0       	brcs	.+10     	; 0x62e <__mulsf3+0x12>
 624:	ba df       	rcall	.-140    	; 0x59a <__fp_pscB>
 626:	18 f0       	brcs	.+6      	; 0x62e <__mulsf3+0x12>
 628:	95 23       	and	r25, r21
 62a:	09 f0       	breq	.+2      	; 0x62e <__mulsf3+0x12>
 62c:	a6 cf       	rjmp	.-180    	; 0x57a <__fp_inf>
 62e:	ab cf       	rjmp	.-170    	; 0x586 <__fp_nan>
 630:	11 24       	eor	r1, r1
 632:	ee cf       	rjmp	.-36     	; 0x610 <__fp_szero>

00000634 <__mulsf3x>:
 634:	ca df       	rcall	.-108    	; 0x5ca <__fp_split3>
 636:	a0 f3       	brcs	.-24     	; 0x620 <__mulsf3+0x4>

00000638 <__mulsf3_pse>:
 638:	95 9f       	mul	r25, r21
 63a:	d1 f3       	breq	.-12     	; 0x630 <__mulsf3+0x14>
 63c:	95 0f       	add	r25, r21
 63e:	50 e0       	ldi	r21, 0x00	; 0
 640:	55 1f       	adc	r21, r21
 642:	62 9f       	mul	r22, r18
 644:	f0 01       	movw	r30, r0
 646:	72 9f       	mul	r23, r18
 648:	bb 27       	eor	r27, r27
 64a:	f0 0d       	add	r31, r0
 64c:	b1 1d       	adc	r27, r1
 64e:	63 9f       	mul	r22, r19
 650:	aa 27       	eor	r26, r26
 652:	f0 0d       	add	r31, r0
 654:	b1 1d       	adc	r27, r1
 656:	aa 1f       	adc	r26, r26
 658:	64 9f       	mul	r22, r20
 65a:	66 27       	eor	r22, r22
 65c:	b0 0d       	add	r27, r0
 65e:	a1 1d       	adc	r26, r1
 660:	66 1f       	adc	r22, r22
 662:	82 9f       	mul	r24, r18
 664:	22 27       	eor	r18, r18
 666:	b0 0d       	add	r27, r0
 668:	a1 1d       	adc	r26, r1
 66a:	62 1f       	adc	r22, r18
 66c:	73 9f       	mul	r23, r19
 66e:	b0 0d       	add	r27, r0
 670:	a1 1d       	adc	r26, r1
 672:	62 1f       	adc	r22, r18
 674:	83 9f       	mul	r24, r19
 676:	a0 0d       	add	r26, r0
 678:	61 1d       	adc	r22, r1
 67a:	22 1f       	adc	r18, r18
 67c:	74 9f       	mul	r23, r20
 67e:	33 27       	eor	r19, r19
 680:	a0 0d       	add	r26, r0
 682:	61 1d       	adc	r22, r1
 684:	23 1f       	adc	r18, r19
 686:	84 9f       	mul	r24, r20
 688:	60 0d       	add	r22, r0
 68a:	21 1d       	adc	r18, r1
 68c:	82 2f       	mov	r24, r18
 68e:	76 2f       	mov	r23, r22
 690:	6a 2f       	mov	r22, r26
 692:	11 24       	eor	r1, r1
 694:	9f 57       	subi	r25, 0x7F	; 127
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	8a f0       	brmi	.+34     	; 0x6bc <__mulsf3_pse+0x84>
 69a:	e1 f0       	breq	.+56     	; 0x6d4 <__mulsf3_pse+0x9c>
 69c:	88 23       	and	r24, r24
 69e:	4a f0       	brmi	.+18     	; 0x6b2 <__mulsf3_pse+0x7a>
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	bb 1f       	adc	r27, r27
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	91 50       	subi	r25, 0x01	; 1
 6ae:	50 40       	sbci	r21, 0x00	; 0
 6b0:	a9 f7       	brne	.-22     	; 0x69c <__mulsf3_pse+0x64>
 6b2:	9e 3f       	cpi	r25, 0xFE	; 254
 6b4:	51 05       	cpc	r21, r1
 6b6:	70 f0       	brcs	.+28     	; 0x6d4 <__mulsf3_pse+0x9c>
 6b8:	60 cf       	rjmp	.-320    	; 0x57a <__fp_inf>
 6ba:	aa cf       	rjmp	.-172    	; 0x610 <__fp_szero>
 6bc:	5f 3f       	cpi	r21, 0xFF	; 255
 6be:	ec f3       	brlt	.-6      	; 0x6ba <__mulsf3_pse+0x82>
 6c0:	98 3e       	cpi	r25, 0xE8	; 232
 6c2:	dc f3       	brlt	.-10     	; 0x6ba <__mulsf3_pse+0x82>
 6c4:	86 95       	lsr	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b7 95       	ror	r27
 6cc:	f7 95       	ror	r31
 6ce:	e7 95       	ror	r30
 6d0:	9f 5f       	subi	r25, 0xFF	; 255
 6d2:	c1 f7       	brne	.-16     	; 0x6c4 <__mulsf3_pse+0x8c>
 6d4:	fe 2b       	or	r31, r30
 6d6:	88 0f       	add	r24, r24
 6d8:	91 1d       	adc	r25, r1
 6da:	96 95       	lsr	r25
 6dc:	87 95       	ror	r24
 6de:	97 f9       	bld	r25, 7
 6e0:	08 95       	ret

000006e2 <_exit>:
 6e2:	f8 94       	cli

000006e4 <__stop_program>:
 6e4:	ff cf       	rjmp	.-2      	; 0x6e4 <__stop_program>
