
TEST15_INT0_INT1_COUNT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000002fa  0000038e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  000003a0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000af8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d5  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000016e  00000000  00000000  0000126d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038b  00000000  00000000  000013db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000369  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000293  00000000  00000000  00001c5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0a 01 	jmp	0x214	; 0x214 <__vector_1>
   8:	0c 94 2e 01 	jmp	0x25c	; 0x25c <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  8a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z10NIXIE_INITv>:

#define uchar unsigned char
//*********************数码管初始化
void NIXIE_INIT()
{
	NIXIE_DDR = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
}
  d2:	08 95       	ret

000000d4 <_Z10NIXIE_SHOWh>:

//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void NIXIE_SHOW(uchar count)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	61 97       	sbiw	r28, 0x11	; 17
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	91 e1       	ldi	r25, 0x11	; 17
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <_Z10NIXIE_SHOWh+0x1e>
	
NIXIE_PORT=nixie[count];
  fa:	fe 01       	movw	r30, r28
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	8b bb       	out	0x1b, r24	; 27

}
 104:	61 96       	adiw	r28, 0x11	; 17
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_Z10NIXIE_FLOWv>:
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
 116:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 118:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		NIXIE_SHOW(count);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
		
		delay_second(7);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
       for(uchar count=0;count<=15;count++)
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	b1 f7       	brne	.-20     	; 0x11a <_Z10NIXIE_FLOWv+0x4>
		NIXIE_SHOW(count);
		
		delay_second(7);
		   
	   }		   
    }
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z15NIXIE_4BIT_INITv>:
	//*********************数码管4位初始化
void NIXIE_4BIT_INIT()
{
	NIXIE_DDR = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
 136:	1b ba       	out	0x1b, r1	; 27
	
	//***********准备工作
	NIXIE_DDR = 0XFF;
 138:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_CON_DDR |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	87 bb       	out	0x17, r24	; 23
}
 140:	08 95       	ret

00000142 <_Z17NIXIE_4BIT_3_SHOWh>:
{
	
	
	//******************第3位
	
	NIXIE_PORT = 0X00;
 142:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 144:	98 b3       	in	r25, 0x18	; 24
 146:	9f 60       	ori	r25, 0x0F	; 15
 148:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XF7;//*********第3位
 14a:	c3 98       	cbi	0x18, 3	; 24
	
	//NIXIE_CON_PORT = ~(1 << 3);
	
	NIXIE_SHOW(T);
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 150:	6a e0       	ldi	r22, 0x0A	; 10
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 15c:	08 95       	ret

0000015e <_Z17NIXIE_4BIT_2_SHOWh>:
{
	
	
	//******************第2位
	
	NIXIE_PORT = 0X00;
 15e:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 60       	ori	r25, 0x0F	; 15
 164:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFB;//*********第2位
 166:	c2 98       	cbi	0x18, 2	; 24
	
	//NIXIE_CON_PORT = ~(1 << 2);
	
	NIXIE_SHOW(T);
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 178:	08 95       	ret

0000017a <_Z17NIXIE_4BIT_1_SHOWh>:
{
	
	
	//******************第1位
	
	NIXIE_PORT = 0X00;
 17a:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9f 60       	ori	r25, 0x0F	; 15
 180:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFD;//*********第1位
 182:	c1 98       	cbi	0x18, 1	; 24
	
	//NIXIE_CON_PORT = ~(1 << 1);
	
	NIXIE_SHOW(T);
 184:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 194:	08 95       	ret

00000196 <_Z17NIXIE_4BIT_0_SHOWh>:
{
	
	
	//******************第0位
	
	NIXIE_PORT = 0X00;
 196:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 198:	98 b3       	in	r25, 0x18	; 24
 19a:	9f 60       	ori	r25, 0x0F	; 15
 19c:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFE;//*********第0位
 19e:	c0 98       	cbi	0x18, 0	; 24
	
	//NIXIE_CON_PORT = ~(1 << 0);
	
	NIXIE_SHOW(T);
 1a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 1b0:	08 95       	ret

000001b2 <_Z15NIXIE_4BIT_SHOWhhhh>:
//********************四位数码管显示
void NIXIE_4BIT_SHOW(uchar D ,uchar C ,uchar B ,uchar A)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	c8 2f       	mov	r28, r24
 1ba:	d6 2f       	mov	r29, r22
 1bc:	14 2f       	mov	r17, r20
 1be:	82 2f       	mov	r24, r18
	NIXIE_4BIT_0_SHOW(A);
 1c0:	0e 94 cb 00 	call	0x196	; 0x196 <_Z17NIXIE_4BIT_0_SHOWh>
	
	NIXIE_4BIT_1_SHOW(B);
 1c4:	81 2f       	mov	r24, r17
 1c6:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z17NIXIE_4BIT_1_SHOWh>
	
	NIXIE_4BIT_2_SHOW(C);
 1ca:	8d 2f       	mov	r24, r29
 1cc:	0e 94 af 00 	call	0x15e	; 0x15e <_Z17NIXIE_4BIT_2_SHOWh>
	
	NIXIE_4BIT_3_SHOW(D);
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 a1 00 	call	0x142	; 0x142 <_Z17NIXIE_4BIT_3_SHOWh>
	
	
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>:

//**********************************外部中断0

void EXTERNAL_INTERRUPT0_INIT_M16()
{
	DDRD &= ~(1 << INT0_FOOT);
 1de:	8a 98       	cbi	0x11, 2	; 17
	
	PORTD |= (1 << INT0_FOOT);
 1e0:	92 9a       	sbi	0x12, 2	; 18
	
	MCUCR |= (1<<ISC01);//外部中断0下降沿产生中断 
 1e2:	85 b7       	in	r24, 0x35	; 53
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1<<INT0);//开外部中断0
 1e8:	8b b7       	in	r24, 0x3b	; 59
 1ea:	80 64       	ori	r24, 0x40	; 64
 1ec:	8b bf       	out	0x3b, r24	; 59
	
	
}
 1ee:	08 95       	ret

000001f0 <_Z28EXTERNAL_INTERRUPT1_INIT_M16v>:

//**********************************外部中断1

void EXTERNAL_INTERRUPT1_INIT_M16()
{
	DDRD &= ~(1 << INT1_FOOT);
 1f0:	8b 98       	cbi	0x11, 3	; 17
	
	PORTD |= (1 << INT1_FOOT);
 1f2:	93 9a       	sbi	0x12, 3	; 18
	
	MCUCR |= (1<<ISC11);//外部中断1下降沿产生中断 
 1f4:	85 b7       	in	r24, 0x35	; 53
 1f6:	88 60       	ori	r24, 0x08	; 8
 1f8:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1<<INT1);//开外部中断1
 1fa:	8b b7       	in	r24, 0x3b	; 59
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8b bf       	out	0x3b, r24	; 59
	
	
}
 200:	08 95       	ret

00000202 <_Z28EXTERNAL_INTERRUPT2_INIT_M16v>:
//**********************************外部中断2
void EXTERNAL_INTERRUPT2_INIT_M16()
{
	DDRB &= ~(1<<2);
 202:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);
 204:	c2 9a       	sbi	0x18, 2	; 24
	MCUCSR &= ~(1<<ISC2);//外部中断2 下降沿产生中断
 206:	84 b7       	in	r24, 0x34	; 52
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);//开外部中断2
 20c:	8b b7       	in	r24, 0x3b	; 59
 20e:	80 62       	ori	r24, 0x20	; 32
 210:	8b bf       	out	0x3b, r24	; 59
	
	
}
 212:	08 95       	ret

00000214 <__vector_1>:
uchar INT0_COUNT = 0;

uchar INT1_COUNT = 0;

ISR(INT0_vect)
{
 214:	1f 92       	push	r1
 216:	0f 92       	push	r0
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	0f 92       	push	r0
 21c:	11 24       	eor	r1, r1
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
	INT0_COUNT ++;
 226:	80 91 73 00 	lds	r24, 0x0073
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 73 00 	sts	0x0073, r24
	
	if (INT0_COUNT == 100)
 230:	84 36       	cpi	r24, 0x64	; 100
 232:	11 f4       	brne	.+4      	; 0x238 <__vector_1+0x24>
	{
		INT0_COUNT = 0;
 234:	10 92 73 00 	sts	0x0073, r1
	}
	
	DISPLAY_INT0_BUFFER[1] = INT0_COUNT / 10;
 238:	80 91 73 00 	lds	r24, 0x0073
 23c:	6a e0       	ldi	r22, 0x0A	; 10
 23e:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodqi4>
 242:	80 93 77 00 	sts	0x0077, r24
	
	DISPLAY_INT0_BUFFER[0] = INT0_COUNT % 10;
 246:	90 93 76 00 	sts	0x0076, r25
	
}
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <__vector_2>:

ISR(INT1_vect)
{
 25c:	1f 92       	push	r1
 25e:	0f 92       	push	r0
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	0f 92       	push	r0
 264:	11 24       	eor	r1, r1
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
	INT1_COUNT ++;
 26e:	80 91 72 00 	lds	r24, 0x0072
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	80 93 72 00 	sts	0x0072, r24
	
	if (INT1_COUNT == 100)
 278:	84 36       	cpi	r24, 0x64	; 100
 27a:	11 f4       	brne	.+4      	; 0x280 <__vector_2+0x24>
	{
		INT1_COUNT = 0;
 27c:	10 92 72 00 	sts	0x0072, r1
	}
	
	DISPLAY_INT1_BUFFER[1] = INT1_COUNT / 10;
 280:	80 91 72 00 	lds	r24, 0x0072
 284:	6a e0       	ldi	r22, 0x0A	; 10
 286:	0e 94 6f 01 	call	0x2de	; 0x2de <__udivmodqi4>
 28a:	80 93 75 00 	sts	0x0075, r24
	
	DISPLAY_INT1_BUFFER[0] = INT1_COUNT % 10;
 28e:	90 93 74 00 	sts	0x0074, r25
	
}
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	7f 91       	pop	r23
 298:	6f 91       	pop	r22
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <main>:


int main(void)
{
	EXTERNAL_INTERRUPT0_INIT_M16();
 2a4:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>
	
	EXTERNAL_INTERRUPT1_INIT_M16();
 2a8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z28EXTERNAL_INTERRUPT1_INIT_M16v>
	
	
	NIXIE_4BIT_INIT();
 2ac:	0e 94 99 00 	call	0x132	; 0x132 <_Z15NIXIE_4BIT_INITv>
	
	sei();
 2b0:	78 94       	sei
	
    while(1)
    {
       NIXIE_4BIT_SHOW(DISPLAY_INT1_BUFFER[1],DISPLAY_INT1_BUFFER[0],DISPLAY_INT0_BUFFER[1],DISPLAY_INT0_BUFFER[0]);
 2b2:	c5 e7       	ldi	r28, 0x75	; 117
 2b4:	d0 e0       	ldi	r29, 0x00	; 0
 2b6:	7e 01       	movw	r14, r28
 2b8:	08 94       	sec
 2ba:	e1 08       	sbc	r14, r1
 2bc:	f1 08       	sbc	r15, r1
 2be:	07 e7       	ldi	r16, 0x77	; 119
 2c0:	10 e0       	ldi	r17, 0x00	; 0
 2c2:	68 01       	movw	r12, r16
 2c4:	08 94       	sec
 2c6:	c1 08       	sbc	r12, r1
 2c8:	d1 08       	sbc	r13, r1
 2ca:	88 81       	ld	r24, Y
 2cc:	f7 01       	movw	r30, r14
 2ce:	60 81       	ld	r22, Z
 2d0:	f8 01       	movw	r30, r16
 2d2:	40 81       	ld	r20, Z
 2d4:	f6 01       	movw	r30, r12
 2d6:	20 81       	ld	r18, Z
 2d8:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z15NIXIE_4BIT_SHOWhhhh>
 2dc:	f6 cf       	rjmp	.-20     	; 0x2ca <main+0x26>

000002de <__udivmodqi4>:
 2de:	99 1b       	sub	r25, r25
 2e0:	79 e0       	ldi	r23, 0x09	; 9
 2e2:	04 c0       	rjmp	.+8      	; 0x2ec <__udivmodqi4_ep>

000002e4 <__udivmodqi4_loop>:
 2e4:	99 1f       	adc	r25, r25
 2e6:	96 17       	cp	r25, r22
 2e8:	08 f0       	brcs	.+2      	; 0x2ec <__udivmodqi4_ep>
 2ea:	96 1b       	sub	r25, r22

000002ec <__udivmodqi4_ep>:
 2ec:	88 1f       	adc	r24, r24
 2ee:	7a 95       	dec	r23
 2f0:	c9 f7       	brne	.-14     	; 0x2e4 <__udivmodqi4_loop>
 2f2:	80 95       	com	r24
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
