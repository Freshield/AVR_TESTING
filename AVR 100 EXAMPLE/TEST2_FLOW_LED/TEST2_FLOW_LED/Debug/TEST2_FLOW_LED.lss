
TEST2_FLOW_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000908  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003ec  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f0  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027e  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000126  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 99 00 	call	0x132	; 0x132 <main>
  8a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z9LED_BLINKhh>:
#define LED_PIN PINA
#define uchar unsigned char

//****************指定位闪烁
void LED_BLINK(uchar num,uchar time)
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	c6 2f       	mov	r28, r22
	LED_DDR |= 1 << num;//******指定位为输出
  d4:	9a b3       	in	r25, 0x1a	; 26
  d6:	01 e0       	ldi	r16, 0x01	; 1
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <_Z9LED_BLINKhh+0x14>
  dc:	00 0f       	add	r16, r16
  de:	11 1f       	adc	r17, r17
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <_Z9LED_BLINKhh+0x10>
  e4:	80 2f       	mov	r24, r16
  e6:	90 2b       	or	r25, r16
  e8:	9a bb       	out	0x1a, r25	; 26
	
	LED_PORT |= 1 << num;//********指定位为点亮
  ea:	9b b3       	in	r25, 0x1b	; 27
  ec:	89 2b       	or	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
	
	delay_second(time);
  f0:	86 2f       	mov	r24, r22
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	LED_PORT &= ~(1 << num);//*******指定位为灭
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	00 95       	com	r16
  fc:	08 23       	and	r16, r24
  fe:	0b bb       	out	0x1b, r16	; 27
	
	delay_second(time);
 100:	8c 2f       	mov	r24, r28
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	
}
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <_Z8LED_FLOWv>:


/*********************流水灯*********************/

void LED_FLOW()
{
 110:	cf 93       	push	r28
	LED_DDR = 0XFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	c8 e0       	ldi	r28, 0x08	; 8
	for(uchar K = 0;K < 8;K ++)
	{
		delay_second(5);
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
		
		LED_PORT = LED_PORT <<1;
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	88 0f       	add	r24, r24
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	c1 50       	subi	r28, 0x01	; 1

void LED_FLOW()
{
	LED_DDR = 0XFF;
	LED_PORT = 0x01;
	for(uchar K = 0;K < 8;K ++)
 12c:	b9 f7       	brne	.-18     	; 0x11c <_Z8LED_FLOWv+0xc>
		LED_PORT = LED_PORT <<1;
		
		
		 
	}
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:

int main(void)
{
    while(1)
    {
       LED_FLOW();
 132:	0e 94 88 00 	call	0x110	; 0x110 <_Z8LED_FLOWv>
 136:	fd cf       	rjmp	.-6      	; 0x132 <main>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
