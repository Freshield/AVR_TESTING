
TEST23_ALARM_FLOW_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000718  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000718  000007ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000007ae  2**0
                  ALLOC
  3 .stab         00001890  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00002560  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000074c  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000168  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038f  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e0  00000000  00000000  00003224  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  00003504  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000479  00000000  00000000  00003aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__vector_8>
  24:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 25 02 	call	0x44a	; 0x44a <main>
  8a:	0c 94 8a 03 	jmp	0x714	; 0x714 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#define uchar unsigned char


void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z22TIMER0_NORMAL_PWM_INITv>:
void TIMER0_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER0_DDR |= (1 << PWM_TIMER0_OUT); 
	//计数器初始化
	TCNT0=0x00;
  cc:	12 be       	out	0x32, r1	; 50
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TOIE0;
  ce:	89 b7       	in	r24, 0x39	; 57
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	89 bf       	out	0x39, r24	; 57
	//PWM模式设置
	TCCR0 |= (1 << CS00) | (1 << CS02);//设置为普通PWM；匹配时将取反；1024分频
  d4:	83 b7       	in	r24, 0x33	; 51
  d6:	85 60       	ori	r24, 0x05	; 5
  d8:	83 bf       	out	0x33, r24	; 51
	
	
}
  da:	08 95       	ret

000000dc <_Z27TIMER0_NORMAL_PWM_TCNT0_setf>:
//**************************************************************


void TIMER0_NORMAL_PWM_TCNT0_set(float compare_time)
{
	TCNT0 = 256 - F_CPU/1024 * compare_time;
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	41 ee       	ldi	r20, 0xE1	; 225
  e2:	55 e4       	ldi	r21, 0x45	; 69
  e4:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
  e8:	9b 01       	movw	r18, r22
  ea:	ac 01       	movw	r20, r24
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	93 e4       	ldi	r25, 0x43	; 67
  f4:	0e 94 45 02 	call	0x48a	; 0x48a <__subsf3>
  f8:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
  fc:	62 bf       	out	0x32, r22	; 50
	
}
  fe:	08 95       	ret

00000100 <_Z24TIMER0_NORMAL_PWM_SEARCHv>:
//*****************F_CPU/1024 * compare_time 不大于255******
//**************一般compare_time取0.01 在中断中累加或者用TIMER1
//**************************************************************
void TIMER0_NORMAL_PWM_SEARCH()
{
	while(!(TIFR & ~(1 << TOV0)));//***********等待置位
 100:	88 b7       	in	r24, 0x38	; 56
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	e9 f3       	breq	.-6      	; 0x100 <_Z24TIMER0_NORMAL_PWM_SEARCHv>
	
	TIFR |= 1 << TOV0;//***************写1清零
 106:	88 b7       	in	r24, 0x38	; 56
 108:	81 60       	ori	r24, 0x01	; 1
 10a:	88 bf       	out	0x38, r24	; 56
	
	
	
}
 10c:	08 95       	ret

0000010e <_Z21TIMER0_CATCH_PWM_INITv>:
//**************************************************************

void TIMER0_CATCH_PWM_INIT()
{
	//端口初始化
	PWM_TIMER0_DDR &= ~(1 << PWM_TIMER0_T0); 
 10e:	b8 98       	cbi	0x17, 0	; 23
	PWM_TIMER0_PORT |= 1 << PWM_TIMER0_T0;
 110:	c0 9a       	sbi	0x18, 0	; 24
	//计数器初始化
	TCNT0 = 255;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	82 bf       	out	0x32, r24	; 50
	//OCR0 = 0X01;//***避免与bottom相同时候特殊情况
	//中断初始化
	TIMSK |= 1 << TOIE0;
 116:	89 b7       	in	r24, 0x39	; 57
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |=  (1 << CS01) | (1 << CS02);//设置为捕获PWM；
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	86 60       	ori	r24, 0x06	; 6
 120:	83 bf       	out	0x33, r24	; 51
	
	
}
 122:	08 95       	ret

00000124 <_Z24TIMER0_FASTPWM_OCR0_initv>:

//**********************FAST PWM OCR0模式初始化*******************//
void TIMER0_FASTPWM_OCR0_init()
{
	//端口初始化
	PWM_TIMER0_DDR|=(1<<PWM_TIMER0_OUT); 
 124:	bb 9a       	sbi	0x17, 3	; 23
	//计数器初始化
	TCNT0=0x00;OCR0 = 0X01;//***避免与bottom相同时候特殊情况
 126:	12 be       	out	0x32, r1	; 50
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	8c bf       	out	0x3c, r24	; 60
	//中断初始化
	TIMSK |= (1<<OCIE0)|(1<<TOIE0);
 12c:	89 b7       	in	r24, 0x39	; 57
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << COM00) | (1 << CS01);//设置为快速PWM；与OCR0匹配时将清零；8分频
 132:	83 b7       	in	r24, 0x33	; 51
 134:	8a 67       	ori	r24, 0x7A	; 122
 136:	83 bf       	out	0x33, r24	; 51
	
	
}
 138:	08 95       	ret

0000013a <_Z24TIMER0_FASTPWMA_OCR0_setf>:
//********************FAST PWM ICR0模式时间设定*********************//
void TIMER0_FASTPWMA_OCR0_set(float compare_time)
{
	OCR0=F_CPU/8*compare_time;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	41 e6       	ldi	r20, 0x61	; 97
 140:	59 e4       	ldi	r21, 0x49	; 73
 142:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 146:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 14a:	6c bf       	out	0x3c, r22	; 60
	
}
 14c:	08 95       	ret

0000014e <_Z22TIMER1_NORMAL_PWM_INITv>:
void TIMER1_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT1 = 0x00;
 14e:	1d bc       	out	0x2d, r1	; 45
 150:	1c bc       	out	0x2c, r1	; 44
	//中断初始化
	TIMSK |= 1<<TOIE1;
 152:	89 b7       	in	r24, 0x39	; 57
 154:	84 60       	ori	r24, 0x04	; 4
 156:	89 bf       	out	0x39, r24	; 57
	//普通PWM模式设置
	//TCCR1A |= 1<<COM1A1;//比较匹配清零 TOP置位
	//TCCR1B |= (1<<CS10)|(1<<CS12);//1024分频
	TCCR1B |= 1 << CS10;//**********1分频
 158:	8e b5       	in	r24, 0x2e	; 46
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	8e bd       	out	0x2e, r24	; 46
	
}
 15e:	08 95       	ret

00000160 <_Z21TIMER1_NORMAL_PWM_setf>:
//********************TIMER1 NORMAL PWM 模式时间设定*********************//
void TIMER1_NORMAL_PWM_set(float compare_time)
{
	TCNT1 = 65536 - F_CPU/1024*compare_time;
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	41 ee       	ldi	r20, 0xE1	; 225
 166:	55 e4       	ldi	r21, 0x45	; 69
 168:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 16c:	9b 01       	movw	r18, r22
 16e:	ac 01       	movw	r20, r24
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	80 e8       	ldi	r24, 0x80	; 128
 176:	97 e4       	ldi	r25, 0x47	; 71
 178:	0e 94 45 02 	call	0x48a	; 0x48a <__subsf3>
 17c:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 180:	dc 01       	movw	r26, r24
 182:	cb 01       	movw	r24, r22
 184:	9d bd       	out	0x2d, r25	; 45
 186:	8c bd       	out	0x2c, r24	; 44
	
}
 188:	08 95       	ret

0000018a <_Z25TIMER1_FASTPWMA_ICR1_initv>:

//**********************FAST PWM ICR1模式初始化*******************//
void TIMER1_FASTPWMA_ICR1_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
 18a:	8d 9a       	sbi	0x11, 5	; 17
 18c:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;
 18e:	1d bc       	out	0x2d, r1	; 45
 190:	1c bc       	out	0x2c, r1	; 44
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
 192:	89 b7       	in	r24, 0x39	; 57
 194:	84 61       	ori	r24, 0x14	; 20
 196:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11);//比较匹配清零 TOP置位 
 198:	8f b5       	in	r24, 0x2f	; 47
 19a:	82 68       	ori	r24, 0x82	; 130
 19c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS12);//TOP为ICR1的值 1024分频
 19e:	8e b5       	in	r24, 0x2e	; 46
 1a0:	8d 61       	ori	r24, 0x1D	; 29
 1a2:	8e bd       	out	0x2e, r24	; 46
	
	
}
 1a4:	08 95       	ret

000001a6 <_Z24TIMER1_FASTPWMA_ICR1_setff>:
//********************FAST PWM ICR1模式时间设定*********************//
void TIMER1_FASTPWMA_ICR1_set(float compare_time,float top_time)
{
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	69 01       	movw	r12, r18
 1b0:	7a 01       	movw	r14, r20
	OCR1A=F_CPU/1024*compare_time;
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	41 ee       	ldi	r20, 0xE1	; 225
 1b8:	55 e4       	ldi	r21, 0x45	; 69
 1ba:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 1be:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 1c2:	dc 01       	movw	r26, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	9b bd       	out	0x2b, r25	; 43
 1c8:	8a bd       	out	0x2a, r24	; 42
	ICR1=F_CPU/1024*top_time;
 1ca:	c7 01       	movw	r24, r14
 1cc:	b6 01       	movw	r22, r12
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	41 ee       	ldi	r20, 0xE1	; 225
 1d4:	55 e4       	ldi	r21, 0x45	; 69
 1d6:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 1da:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
 1e2:	97 bd       	out	0x27, r25	; 39
 1e4:	86 bd       	out	0x26, r24	; 38
}
 1e6:	ff 90       	pop	r15
 1e8:	ef 90       	pop	r14
 1ea:	df 90       	pop	r13
 1ec:	cf 90       	pop	r12
 1ee:	08 95       	ret

000001f0 <_Z31TIMER1_PHASE_CORRECTION_10_initv>:

//**********************十位相位修正PWM模式初始化*******************//
void TIMER1_PHASE_CORRECTION_10_init()
{
	//端口初始化
	PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
 1f0:	8d 9a       	sbi	0x11, 5	; 17
 1f2:	95 98       	cbi	0x12, 5	; 18
	//计数器初始化
	TCNT1 = 0x00;OCR1A = 0X00;
 1f4:	1d bc       	out	0x2d, r1	; 45
 1f6:	1c bc       	out	0x2c, r1	; 44
 1f8:	1b bc       	out	0x2b, r1	; 43
 1fa:	1a bc       	out	0x2a, r1	; 42
	//中断初始化
	TIMSK |= (1<<OCIE1A)|(1<<TOIE1);
 1fc:	89 b7       	in	r24, 0x39	; 57
 1fe:	84 61       	ori	r24, 0x14	; 20
 200:	89 bf       	out	0x39, r24	; 57
	//快速PWM模式设置
	TCCR1A |= (1<<COM1A1)|(1<<WGM11)|(1<<WGM10);//比较匹配清零 TOP置位
 202:	8f b5       	in	r24, 0x2f	; 47
 204:	83 68       	ori	r24, 0x83	; 131
 206:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<CS11);//TOP为ICR1的值 8分频
 208:	8e b5       	in	r24, 0x2e	; 46
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	8e bd       	out	0x2e, r24	; 46
	
	
}
 20e:	08 95       	ret

00000210 <_Z22TIMER2_NORMAL_PWM_INITv>:
void TIMER2_NORMAL_PWM_INIT()
{
	//端口初始化
	//PWM_TIMER1_DDR |= (1<<PWM_TIMER1_OUTA);  PWM_TIMER1_PORT &= ~(1 << PWM_TIMER1_OUTA);
	//计数器初始化
	TCNT2 = 0x00;
 210:	14 bc       	out	0x24, r1	; 36
	//中断初始化
	TIMSK |= 1<<TOIE2;
 212:	89 b7       	in	r24, 0x39	; 57
 214:	80 64       	ori	r24, 0x40	; 64
 216:	89 bf       	out	0x39, r24	; 57
	//普通PWM模式设置
	//TCCR2 |= 1<<COM20;//比较匹配取反
	TCCR2 |= (1 << CS22) | (1 << CS21) | (1 << CS20);//1024分频
 218:	85 b5       	in	r24, 0x25	; 37
 21a:	87 60       	ori	r24, 0x07	; 7
 21c:	85 bd       	out	0x25, r24	; 37
	
	
}
 21e:	08 95       	ret

00000220 <_Z21TIMER2_NORMAL_PWM_setf>:
//********************TIMER1 NORMAL PWM 模式时间设定*********************//
void TIMER2_NORMAL_PWM_set(float compare_time)
{
	TCNT2 = 256 - F_CPU/1024*compare_time;
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	41 ee       	ldi	r20, 0xE1	; 225
 226:	55 e4       	ldi	r21, 0x45	; 69
 228:	0e 94 27 03 	call	0x64e	; 0x64e <__mulsf3>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	80 e8       	ldi	r24, 0x80	; 128
 236:	93 e4       	ldi	r25, 0x43	; 67
 238:	0e 94 45 02 	call	0x48a	; 0x48a <__subsf3>
 23c:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
 240:	64 bd       	out	0x24, r22	; 36
	
}
 242:	08 95       	ret

00000244 <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>:

//**********************************外部中断0

void EXTERNAL_INTERRUPT0_INIT_M16()
{
	DDRD &= ~(1 << INT0_FOOT);
 244:	8a 98       	cbi	0x11, 2	; 17
	
	PORTD |= (1 << INT0_FOOT);
 246:	92 9a       	sbi	0x12, 2	; 18
	
	MCUCR |= (1<<ISC01);//外部中断0下降沿产生中断 
 248:	85 b7       	in	r24, 0x35	; 53
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1<<INT0);//开外部中断0
 24e:	8b b7       	in	r24, 0x3b	; 59
 250:	80 64       	ori	r24, 0x40	; 64
 252:	8b bf       	out	0x3b, r24	; 59
	
	
}
 254:	08 95       	ret

00000256 <_Z28EXTERNAL_INTERRUPT1_INIT_M16v>:

//**********************************外部中断1

void EXTERNAL_INTERRUPT1_INIT_M16()
{
	DDRD &= ~(1 << INT1_FOOT);
 256:	8b 98       	cbi	0x11, 3	; 17
	
	PORTD |= (1 << INT1_FOOT);
 258:	93 9a       	sbi	0x12, 3	; 18
	
	MCUCR |= (1<<ISC11);//外部中断1下降沿产生中断 
 25a:	85 b7       	in	r24, 0x35	; 53
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	85 bf       	out	0x35, r24	; 53
	
	GICR |= (1<<INT1);//开外部中断1
 260:	8b b7       	in	r24, 0x3b	; 59
 262:	80 68       	ori	r24, 0x80	; 128
 264:	8b bf       	out	0x3b, r24	; 59
	
	
}
 266:	08 95       	ret

00000268 <_Z28EXTERNAL_INTERRUPT2_INIT_M16v>:
//**********************************外部中断2
void EXTERNAL_INTERRUPT2_INIT_M16()
{
	DDRB &= ~(1<<2);
 268:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<2);
 26a:	c2 9a       	sbi	0x18, 2	; 24
	MCUCSR &= ~(1<<ISC2);//外部中断2 下降沿产生中断
 26c:	84 b7       	in	r24, 0x34	; 52
 26e:	8f 7b       	andi	r24, 0xBF	; 191
 270:	84 bf       	out	0x34, r24	; 52
	GICR |= (1<<INT2);//开外部中断2
 272:	8b b7       	in	r24, 0x3b	; 59
 274:	80 62       	ori	r24, 0x20	; 32
 276:	8b bf       	out	0x3b, r24	; 59
	
	
}
 278:	08 95       	ret

0000027a <_Z8LED_INITv>:

//************初始化
void LED_INIT()
{
	
	LED_DDR = 0XFF;
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	8a bb       	out	0x1a, r24	; 26
	
	LED_PORT = 0X00;
 27e:	1b ba       	out	0x1b, r1	; 27
	
	
}
 280:	08 95       	ret

00000282 <_Z9LED_TWINKh>:


//********指定位取反
void LED_TWINK(uchar num)
{
	LED_PORT ^= 1 << num;//********指定位取反
 282:	4b b3       	in	r20, 0x1b	; 27
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <_Z9LED_TWINKh+0xe>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <_Z9LED_TWINKh+0xa>
 294:	cb 01       	movw	r24, r22
 296:	84 27       	eor	r24, r20
 298:	8b bb       	out	0x1b, r24	; 27
}
 29a:	08 95       	ret

0000029c <_Z9LED_BLINKhh>:


//****************指定位闪烁
void LED_BLINK(uchar num,uchar time)
{
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	c6 2f       	mov	r28, r22
	LED_DDR |= 1 << num;//******指定位为输出
 2a4:	9a b3       	in	r25, 0x1a	; 26
 2a6:	01 e0       	ldi	r16, 0x01	; 1
 2a8:	10 e0       	ldi	r17, 0x00	; 0
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <_Z9LED_BLINKhh+0x14>
 2ac:	00 0f       	add	r16, r16
 2ae:	11 1f       	adc	r17, r17
 2b0:	8a 95       	dec	r24
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <_Z9LED_BLINKhh+0x10>
 2b4:	80 2f       	mov	r24, r16
 2b6:	90 2b       	or	r25, r16
 2b8:	9a bb       	out	0x1a, r25	; 26
	
	LED_PORT |= 1 << num;//********指定位为点亮
 2ba:	9b b3       	in	r25, 0x1b	; 27
 2bc:	89 2b       	or	r24, r25
 2be:	8b bb       	out	0x1b, r24	; 27
	
	delay_second(time);
 2c0:	86 2f       	mov	r24, r22
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	LED_PORT &= ~(1 << num);//*******指定位为灭
 2c8:	8b b3       	in	r24, 0x1b	; 27
 2ca:	00 95       	com	r16
 2cc:	08 23       	and	r16, r24
 2ce:	0b bb       	out	0x1b, r16	; 27
	
	delay_second(time);
 2d0:	8c 2f       	mov	r24, r28
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	
}
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	08 95       	ret

000002e0 <_Z8LED_FLOWv>:


/*********************流水灯*********************/

void LED_FLOW()
{
 2e0:	cf 93       	push	r28
	LED_DDR = 0XFF;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x01;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	c8 e0       	ldi	r28, 0x08	; 8
	for(uchar K = 0;K < 8;K ++)
	{
		delay_second(5);
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
		
		LED_PORT = LED_PORT <<1;
 2f4:	8b b3       	in	r24, 0x1b	; 27
 2f6:	88 0f       	add	r24, r24
 2f8:	8b bb       	out	0x1b, r24	; 27
 2fa:	c1 50       	subi	r28, 0x01	; 1

void LED_FLOW()
{
	LED_DDR = 0XFF;
	LED_PORT = 0x01;
	for(uchar K = 0;K < 8;K ++)
 2fc:	b9 f7       	brne	.-18     	; 0x2ec <_Z8LED_FLOWv+0xc>
		LED_PORT = LED_PORT <<1;
		
		
		 
	}
}
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <_Z15LED_LEFT_CIRCLEv>:

//*************循环左移
void LED_LEFT_CIRCLE()
{
	if (LED_PORT & 0X80)
 302:	df 9b       	sbis	0x1b, 7	; 27
 304:	05 c0       	rjmp	.+10     	; 0x310 <_Z15LED_LEFT_CIRCLEv+0xe>
	{
		LED_PORT = (LED_PORT << 1)| 0X01;
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	88 0f       	add	r24, r24
 30a:	81 60       	ori	r24, 0x01	; 1
 30c:	8b bb       	out	0x1b, r24	; 27
 30e:	08 95       	ret
	
	else
	
	
	
	LED_PORT <<= 1;
 310:	8b b3       	in	r24, 0x1b	; 27
 312:	88 0f       	add	r24, r24
 314:	8b bb       	out	0x1b, r24	; 27
 316:	08 95       	ret

00000318 <_Z10ALARM_INITv>:

#define RE_TURE_SOUND() (ALARM_PORT ^= 0X80);//*****蜂鸣器

void ALARM_INIT()
{
	ALARM_DDR |= (1 << SOUND);
 318:	8f 9a       	sbi	0x11, 7	; 17
	
	ALARM_PORT &= ~(1 << SOUND);
 31a:	97 98       	cbi	0x12, 7	; 18
	
	
}
 31c:	08 95       	ret

0000031e <_Z5ALARMh>:


void ALARM(uchar time)
{
 31e:	cf 92       	push	r12
 320:	df 92       	push	r13
 322:	ef 92       	push	r14
 324:	ff 92       	push	r15
 326:	cf 93       	push	r28
 328:	c4 e6       	ldi	r28, 0x64	; 100
	
	for(uchar i = 0;i < 100;i ++)
	{
		
		RE_TURE_SOUND(); delay_reduce(time);//********time控制不同的频率
 32a:	c8 2e       	mov	r12, r24
 32c:	dd 24       	eor	r13, r13
 32e:	ee 24       	eor	r14, r14
 330:	ff 24       	eor	r15, r15
 332:	82 b3       	in	r24, 0x12	; 18
 334:	80 58       	subi	r24, 0x80	; 128
 336:	82 bb       	out	0x12, r24	; 18
 338:	c7 01       	movw	r24, r14
 33a:	b6 01       	movw	r22, r12
 33c:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 340:	c1 50       	subi	r28, 0x01	; 1


void ALARM(uchar time)
{
	
	for(uchar i = 0;i < 100;i ++)
 342:	b9 f7       	brne	.-18     	; 0x332 <_Z5ALARMh+0x14>
		RE_TURE_SOUND(); delay_reduce(time);//********time控制不同的频率
		
	}
	
	
}
 344:	cf 91       	pop	r28
 346:	ff 90       	pop	r15
 348:	ef 90       	pop	r14
 34a:	df 90       	pop	r13
 34c:	cf 90       	pop	r12
 34e:	08 95       	ret

00000350 <_Z11CLEAR_ALARMv>:


void CLEAR_ALARM()
{
	ALARM_PORT &= ~(1 << SOUND);
 350:	97 98       	cbi	0x12, 7	; 18
}
 352:	08 95       	ret

00000354 <__vector_1>:
uchar ON_OFF = 0;

volatile uchar FRQ = 0X00;

ISR(INT0_vect)
{
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	 
	
	if (ON_OFF) 
 376:	80 91 63 00 	lds	r24, 0x0063
 37a:	88 23       	and	r24, r24
 37c:	41 f0       	breq	.+16     	; 0x38e <__vector_1+0x3a>
	{
		TIMSK |= (1 << TOIE0) | (1 << TOIE1);
 37e:	89 b7       	in	r24, 0x39	; 57
 380:	85 60       	ori	r24, 0x05	; 5
 382:	89 bf       	out	0x39, r24	; 57
		
		LED_PORT = 0X01;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	8b bb       	out	0x1b, r24	; 27
		
		FRQ = 0X00; 
 388:	10 92 62 00 	sts	0x0062, r1
 38c:	04 c0       	rjmp	.+8      	; 0x396 <__vector_1+0x42>
	}
	
	else
	{
		
		TIMSK = 0X00;
 38e:	19 be       	out	0x39, r1	; 57
		
		LED_PORT = 0X00;
 390:	1b ba       	out	0x1b, r1	; 27
		
		CLEAR_ALARM();
 392:	0e 94 a8 01 	call	0x350	; 0x350 <_Z11CLEAR_ALARMv>
		
	}
	
	
	
	ON_OFF = !ON_OFF;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 91 63 00 	lds	r25, 0x0063
 39c:	91 11       	cpse	r25, r1
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	80 93 63 00 	sts	0x0063, r24
}
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_9>:

ISR(TIMER0_OVF_vect)
{
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
	TIMER0_NORMAL_PWM_TCNT0_set(0.2);
 3e8:	6d ec       	ldi	r22, 0xCD	; 205
 3ea:	7c ec       	ldi	r23, 0xCC	; 204
 3ec:	8c e4       	ldi	r24, 0x4C	; 76
 3ee:	9e e3       	ldi	r25, 0x3E	; 62
 3f0:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z27TIMER0_NORMAL_PWM_TCNT0_setf>
	
	 
	  
	LED_LEFT_CIRCLE();
 3f4:	0e 94 81 01 	call	0x302	; 0x302 <_Z15LED_LEFT_CIRCLEv>
	
	 
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	bf 91       	pop	r27
 3fe:	af 91       	pop	r26
 400:	9f 91       	pop	r25
 402:	8f 91       	pop	r24
 404:	7f 91       	pop	r23
 406:	6f 91       	pop	r22
 408:	5f 91       	pop	r21
 40a:	4f 91       	pop	r20
 40c:	3f 91       	pop	r19
 40e:	2f 91       	pop	r18
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
	TCNT1 = 61758 + FRQ;
 428:	80 91 62 00 	lds	r24, 0x0062
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	82 5c       	subi	r24, 0xC2	; 194
 430:	9e 40       	sbci	r25, 0x0E	; 14
 432:	9d bd       	out	0x2d, r25	; 45
 434:	8c bd       	out	0x2c, r24	; 44
	
	RE_TURE_SOUND();
 436:	82 b3       	in	r24, 0x12	; 18
 438:	80 58       	subi	r24, 0x80	; 128
 43a:	82 bb       	out	0x12, r24	; 18
	
	
	
}
 43c:	9f 91       	pop	r25
 43e:	8f 91       	pop	r24
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <main>:



int main(void)
{
	LED_INIT();
 44a:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z8LED_INITv>
	
	EXTERNAL_INTERRUPT0_INIT_M16();
 44e:	0e 94 22 01 	call	0x244	; 0x244 <_Z28EXTERNAL_INTERRUPT0_INIT_M16v>
	
	TIMER0_NORMAL_PWM_INIT();
 452:	0e 94 66 00 	call	0xcc	; 0xcc <_Z22TIMER0_NORMAL_PWM_INITv>
	
	TIMER1_NORMAL_PWM_INIT();
 456:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z22TIMER1_NORMAL_PWM_INITv>
	
	TIMER0_NORMAL_PWM_TCNT0_set(0.1);
 45a:	6d ec       	ldi	r22, 0xCD	; 205
 45c:	7c ec       	ldi	r23, 0xCC	; 204
 45e:	8c ec       	ldi	r24, 0xCC	; 204
 460:	9d e3       	ldi	r25, 0x3D	; 61
 462:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z27TIMER0_NORMAL_PWM_TCNT0_setf>
	
	TCNT1 = 61758;
 466:	8e e3       	ldi	r24, 0x3E	; 62
 468:	91 ef       	ldi	r25, 0xF1	; 241
 46a:	9d bd       	out	0x2d, r25	; 45
 46c:	8c bd       	out	0x2c, r24	; 44
	
	TIMSK = 0X00;
 46e:	19 be       	out	0x39, r1	; 57
	
	sei();
 470:	78 94       	sei
	 
    while(1)
    {
        FRQ ++;
 472:	80 91 62 00 	lds	r24, 0x0062
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 62 00 	sts	0x0062, r24
		
		delay_reduce(3000); 
 47c:	68 eb       	ldi	r22, 0xB8	; 184
 47e:	7b e0       	ldi	r23, 0x0B	; 11
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 488:	f4 cf       	rjmp	.-24     	; 0x472 <__stack+0x13>

0000048a <__subsf3>:
 48a:	50 58       	subi	r21, 0x80	; 128

0000048c <__addsf3>:
 48c:	bb 27       	eor	r27, r27
 48e:	aa 27       	eor	r26, r26
 490:	0e d0       	rcall	.+28     	; 0x4ae <__addsf3x>
 492:	a3 c0       	rjmp	.+326    	; 0x5da <__fp_round>
 494:	94 d0       	rcall	.+296    	; 0x5be <__fp_pscA>
 496:	30 f0       	brcs	.+12     	; 0x4a4 <__addsf3+0x18>
 498:	99 d0       	rcall	.+306    	; 0x5cc <__fp_pscB>
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__addsf3+0x18>
 49c:	31 f4       	brne	.+12     	; 0x4aa <__addsf3+0x1e>
 49e:	9f 3f       	cpi	r25, 0xFF	; 255
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <__addsf3+0x1a>
 4a2:	1e f4       	brtc	.+6      	; 0x4aa <__addsf3+0x1e>
 4a4:	89 c0       	rjmp	.+274    	; 0x5b8 <__fp_nan>
 4a6:	0e f4       	brtc	.+2      	; 0x4aa <__addsf3+0x1e>
 4a8:	e0 95       	com	r30
 4aa:	e7 fb       	bst	r30, 7
 4ac:	7f c0       	rjmp	.+254    	; 0x5ac <__fp_inf>

000004ae <__addsf3x>:
 4ae:	e9 2f       	mov	r30, r25
 4b0:	a5 d0       	rcall	.+330    	; 0x5fc <__fp_split3>
 4b2:	80 f3       	brcs	.-32     	; 0x494 <__addsf3+0x8>
 4b4:	ba 17       	cp	r27, r26
 4b6:	62 07       	cpc	r22, r18
 4b8:	73 07       	cpc	r23, r19
 4ba:	84 07       	cpc	r24, r20
 4bc:	95 07       	cpc	r25, r21
 4be:	18 f0       	brcs	.+6      	; 0x4c6 <__addsf3x+0x18>
 4c0:	71 f4       	brne	.+28     	; 0x4de <__addsf3x+0x30>
 4c2:	9e f5       	brtc	.+102    	; 0x52a <__addsf3x+0x7c>
 4c4:	bd c0       	rjmp	.+378    	; 0x640 <__fp_zero>
 4c6:	0e f4       	brtc	.+2      	; 0x4ca <__addsf3x+0x1c>
 4c8:	e0 95       	com	r30
 4ca:	0b 2e       	mov	r0, r27
 4cc:	ba 2f       	mov	r27, r26
 4ce:	a0 2d       	mov	r26, r0
 4d0:	0b 01       	movw	r0, r22
 4d2:	b9 01       	movw	r22, r18
 4d4:	90 01       	movw	r18, r0
 4d6:	0c 01       	movw	r0, r24
 4d8:	ca 01       	movw	r24, r20
 4da:	a0 01       	movw	r20, r0
 4dc:	11 24       	eor	r1, r1
 4de:	ff 27       	eor	r31, r31
 4e0:	59 1b       	sub	r21, r25
 4e2:	99 f0       	breq	.+38     	; 0x50a <__addsf3x+0x5c>
 4e4:	59 3f       	cpi	r21, 0xF9	; 249
 4e6:	50 f4       	brcc	.+20     	; 0x4fc <__addsf3x+0x4e>
 4e8:	50 3e       	cpi	r21, 0xE0	; 224
 4ea:	68 f1       	brcs	.+90     	; 0x546 <__addsf3x+0x98>
 4ec:	1a 16       	cp	r1, r26
 4ee:	f0 40       	sbci	r31, 0x00	; 0
 4f0:	a2 2f       	mov	r26, r18
 4f2:	23 2f       	mov	r18, r19
 4f4:	34 2f       	mov	r19, r20
 4f6:	44 27       	eor	r20, r20
 4f8:	58 5f       	subi	r21, 0xF8	; 248
 4fa:	f3 cf       	rjmp	.-26     	; 0x4e2 <__addsf3x+0x34>
 4fc:	46 95       	lsr	r20
 4fe:	37 95       	ror	r19
 500:	27 95       	ror	r18
 502:	a7 95       	ror	r26
 504:	f0 40       	sbci	r31, 0x00	; 0
 506:	53 95       	inc	r21
 508:	c9 f7       	brne	.-14     	; 0x4fc <__addsf3x+0x4e>
 50a:	7e f4       	brtc	.+30     	; 0x52a <__addsf3x+0x7c>
 50c:	1f 16       	cp	r1, r31
 50e:	ba 0b       	sbc	r27, r26
 510:	62 0b       	sbc	r22, r18
 512:	73 0b       	sbc	r23, r19
 514:	84 0b       	sbc	r24, r20
 516:	ba f0       	brmi	.+46     	; 0x546 <__addsf3x+0x98>
 518:	91 50       	subi	r25, 0x01	; 1
 51a:	a1 f0       	breq	.+40     	; 0x544 <__addsf3x+0x96>
 51c:	ff 0f       	add	r31, r31
 51e:	bb 1f       	adc	r27, r27
 520:	66 1f       	adc	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	c2 f7       	brpl	.-16     	; 0x518 <__addsf3x+0x6a>
 528:	0e c0       	rjmp	.+28     	; 0x546 <__addsf3x+0x98>
 52a:	ba 0f       	add	r27, r26
 52c:	62 1f       	adc	r22, r18
 52e:	73 1f       	adc	r23, r19
 530:	84 1f       	adc	r24, r20
 532:	48 f4       	brcc	.+18     	; 0x546 <__addsf3x+0x98>
 534:	87 95       	ror	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b7 95       	ror	r27
 53c:	f7 95       	ror	r31
 53e:	9e 3f       	cpi	r25, 0xFE	; 254
 540:	08 f0       	brcs	.+2      	; 0x544 <__addsf3x+0x96>
 542:	b3 cf       	rjmp	.-154    	; 0x4aa <__addsf3+0x1e>
 544:	93 95       	inc	r25
 546:	88 0f       	add	r24, r24
 548:	08 f0       	brcs	.+2      	; 0x54c <__addsf3x+0x9e>
 54a:	99 27       	eor	r25, r25
 54c:	ee 0f       	add	r30, r30
 54e:	97 95       	ror	r25
 550:	87 95       	ror	r24
 552:	08 95       	ret

00000554 <__fixunssfsi>:
 554:	5b d0       	rcall	.+182    	; 0x60c <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x26>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	90 f0       	brcs	.+36     	; 0x580 <__fixunssfsi+0x2c>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	a0 f0       	brcs	.+40     	; 0x58c <__fixunssfsi+0x38>
 564:	d1 f0       	breq	.+52     	; 0x59a <__fixunssfsi+0x46>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x22>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x12>
 574:	12 c0       	rjmp	.+36     	; 0x59a <__fixunssfsi+0x46>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	81 f0       	breq	.+32     	; 0x59a <__fixunssfsi+0x46>
 57a:	62 d0       	rcall	.+196    	; 0x640 <__fp_zero>
 57c:	b1 e0       	ldi	r27, 0x01	; 1
 57e:	08 95       	ret
 580:	5f c0       	rjmp	.+190    	; 0x640 <__fp_zero>
 582:	67 2f       	mov	r22, r23
 584:	78 2f       	mov	r23, r24
 586:	88 27       	eor	r24, r24
 588:	b8 5f       	subi	r27, 0xF8	; 248
 58a:	39 f0       	breq	.+14     	; 0x59a <__fixunssfsi+0x46>
 58c:	b9 3f       	cpi	r27, 0xF9	; 249
 58e:	cc f3       	brlt	.-14     	; 0x582 <__fixunssfsi+0x2e>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b3 95       	inc	r27
 598:	d9 f7       	brne	.-10     	; 0x590 <__fixunssfsi+0x3c>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__fixunssfsi+0x56>
 59c:	90 95       	com	r25
 59e:	80 95       	com	r24
 5a0:	70 95       	com	r23
 5a2:	61 95       	neg	r22
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	08 95       	ret

000005ac <__fp_inf>:
 5ac:	97 f9       	bld	r25, 7
 5ae:	9f 67       	ori	r25, 0x7F	; 127
 5b0:	80 e8       	ldi	r24, 0x80	; 128
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	08 95       	ret

000005b8 <__fp_nan>:
 5b8:	9f ef       	ldi	r25, 0xFF	; 255
 5ba:	80 ec       	ldi	r24, 0xC0	; 192
 5bc:	08 95       	ret

000005be <__fp_pscA>:
 5be:	00 24       	eor	r0, r0
 5c0:	0a 94       	dec	r0
 5c2:	16 16       	cp	r1, r22
 5c4:	17 06       	cpc	r1, r23
 5c6:	18 06       	cpc	r1, r24
 5c8:	09 06       	cpc	r0, r25
 5ca:	08 95       	ret

000005cc <__fp_pscB>:
 5cc:	00 24       	eor	r0, r0
 5ce:	0a 94       	dec	r0
 5d0:	12 16       	cp	r1, r18
 5d2:	13 06       	cpc	r1, r19
 5d4:	14 06       	cpc	r1, r20
 5d6:	05 06       	cpc	r0, r21
 5d8:	08 95       	ret

000005da <__fp_round>:
 5da:	09 2e       	mov	r0, r25
 5dc:	03 94       	inc	r0
 5de:	00 0c       	add	r0, r0
 5e0:	11 f4       	brne	.+4      	; 0x5e6 <__fp_round+0xc>
 5e2:	88 23       	and	r24, r24
 5e4:	52 f0       	brmi	.+20     	; 0x5fa <__fp_round+0x20>
 5e6:	bb 0f       	add	r27, r27
 5e8:	40 f4       	brcc	.+16     	; 0x5fa <__fp_round+0x20>
 5ea:	bf 2b       	or	r27, r31
 5ec:	11 f4       	brne	.+4      	; 0x5f2 <__fp_round+0x18>
 5ee:	60 ff       	sbrs	r22, 0
 5f0:	04 c0       	rjmp	.+8      	; 0x5fa <__fp_round+0x20>
 5f2:	6f 5f       	subi	r22, 0xFF	; 255
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__fp_split3>:
 5fc:	57 fd       	sbrc	r21, 7
 5fe:	90 58       	subi	r25, 0x80	; 128
 600:	44 0f       	add	r20, r20
 602:	55 1f       	adc	r21, r21
 604:	59 f0       	breq	.+22     	; 0x61c <__fp_splitA+0x10>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	71 f0       	breq	.+28     	; 0x626 <__fp_splitA+0x1a>
 60a:	47 95       	ror	r20

0000060c <__fp_splitA>:
 60c:	88 0f       	add	r24, r24
 60e:	97 fb       	bst	r25, 7
 610:	99 1f       	adc	r25, r25
 612:	61 f0       	breq	.+24     	; 0x62c <__fp_splitA+0x20>
 614:	9f 3f       	cpi	r25, 0xFF	; 255
 616:	79 f0       	breq	.+30     	; 0x636 <__fp_splitA+0x2a>
 618:	87 95       	ror	r24
 61a:	08 95       	ret
 61c:	12 16       	cp	r1, r18
 61e:	13 06       	cpc	r1, r19
 620:	14 06       	cpc	r1, r20
 622:	55 1f       	adc	r21, r21
 624:	f2 cf       	rjmp	.-28     	; 0x60a <__fp_split3+0xe>
 626:	46 95       	lsr	r20
 628:	f1 df       	rcall	.-30     	; 0x60c <__fp_splitA>
 62a:	08 c0       	rjmp	.+16     	; 0x63c <__fp_splitA+0x30>
 62c:	16 16       	cp	r1, r22
 62e:	17 06       	cpc	r1, r23
 630:	18 06       	cpc	r1, r24
 632:	99 1f       	adc	r25, r25
 634:	f1 cf       	rjmp	.-30     	; 0x618 <__fp_splitA+0xc>
 636:	86 95       	lsr	r24
 638:	71 05       	cpc	r23, r1
 63a:	61 05       	cpc	r22, r1
 63c:	08 94       	sec
 63e:	08 95       	ret

00000640 <__fp_zero>:
 640:	e8 94       	clt

00000642 <__fp_szero>:
 642:	bb 27       	eor	r27, r27
 644:	66 27       	eor	r22, r22
 646:	77 27       	eor	r23, r23
 648:	cb 01       	movw	r24, r22
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__mulsf3>:
 64e:	0b d0       	rcall	.+22     	; 0x666 <__mulsf3x>
 650:	c4 cf       	rjmp	.-120    	; 0x5da <__fp_round>
 652:	b5 df       	rcall	.-150    	; 0x5be <__fp_pscA>
 654:	28 f0       	brcs	.+10     	; 0x660 <__mulsf3+0x12>
 656:	ba df       	rcall	.-140    	; 0x5cc <__fp_pscB>
 658:	18 f0       	brcs	.+6      	; 0x660 <__mulsf3+0x12>
 65a:	95 23       	and	r25, r21
 65c:	09 f0       	breq	.+2      	; 0x660 <__mulsf3+0x12>
 65e:	a6 cf       	rjmp	.-180    	; 0x5ac <__fp_inf>
 660:	ab cf       	rjmp	.-170    	; 0x5b8 <__fp_nan>
 662:	11 24       	eor	r1, r1
 664:	ee cf       	rjmp	.-36     	; 0x642 <__fp_szero>

00000666 <__mulsf3x>:
 666:	ca df       	rcall	.-108    	; 0x5fc <__fp_split3>
 668:	a0 f3       	brcs	.-24     	; 0x652 <__mulsf3+0x4>

0000066a <__mulsf3_pse>:
 66a:	95 9f       	mul	r25, r21
 66c:	d1 f3       	breq	.-12     	; 0x662 <__mulsf3+0x14>
 66e:	95 0f       	add	r25, r21
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	55 1f       	adc	r21, r21
 674:	62 9f       	mul	r22, r18
 676:	f0 01       	movw	r30, r0
 678:	72 9f       	mul	r23, r18
 67a:	bb 27       	eor	r27, r27
 67c:	f0 0d       	add	r31, r0
 67e:	b1 1d       	adc	r27, r1
 680:	63 9f       	mul	r22, r19
 682:	aa 27       	eor	r26, r26
 684:	f0 0d       	add	r31, r0
 686:	b1 1d       	adc	r27, r1
 688:	aa 1f       	adc	r26, r26
 68a:	64 9f       	mul	r22, r20
 68c:	66 27       	eor	r22, r22
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	66 1f       	adc	r22, r22
 694:	82 9f       	mul	r24, r18
 696:	22 27       	eor	r18, r18
 698:	b0 0d       	add	r27, r0
 69a:	a1 1d       	adc	r26, r1
 69c:	62 1f       	adc	r22, r18
 69e:	73 9f       	mul	r23, r19
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	62 1f       	adc	r22, r18
 6a6:	83 9f       	mul	r24, r19
 6a8:	a0 0d       	add	r26, r0
 6aa:	61 1d       	adc	r22, r1
 6ac:	22 1f       	adc	r18, r18
 6ae:	74 9f       	mul	r23, r20
 6b0:	33 27       	eor	r19, r19
 6b2:	a0 0d       	add	r26, r0
 6b4:	61 1d       	adc	r22, r1
 6b6:	23 1f       	adc	r18, r19
 6b8:	84 9f       	mul	r24, r20
 6ba:	60 0d       	add	r22, r0
 6bc:	21 1d       	adc	r18, r1
 6be:	82 2f       	mov	r24, r18
 6c0:	76 2f       	mov	r23, r22
 6c2:	6a 2f       	mov	r22, r26
 6c4:	11 24       	eor	r1, r1
 6c6:	9f 57       	subi	r25, 0x7F	; 127
 6c8:	50 40       	sbci	r21, 0x00	; 0
 6ca:	8a f0       	brmi	.+34     	; 0x6ee <__mulsf3_pse+0x84>
 6cc:	e1 f0       	breq	.+56     	; 0x706 <__mulsf3_pse+0x9c>
 6ce:	88 23       	and	r24, r24
 6d0:	4a f0       	brmi	.+18     	; 0x6e4 <__mulsf3_pse+0x7a>
 6d2:	ee 0f       	add	r30, r30
 6d4:	ff 1f       	adc	r31, r31
 6d6:	bb 1f       	adc	r27, r27
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	91 50       	subi	r25, 0x01	; 1
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	a9 f7       	brne	.-22     	; 0x6ce <__mulsf3_pse+0x64>
 6e4:	9e 3f       	cpi	r25, 0xFE	; 254
 6e6:	51 05       	cpc	r21, r1
 6e8:	70 f0       	brcs	.+28     	; 0x706 <__mulsf3_pse+0x9c>
 6ea:	60 cf       	rjmp	.-320    	; 0x5ac <__fp_inf>
 6ec:	aa cf       	rjmp	.-172    	; 0x642 <__fp_szero>
 6ee:	5f 3f       	cpi	r21, 0xFF	; 255
 6f0:	ec f3       	brlt	.-6      	; 0x6ec <__mulsf3_pse+0x82>
 6f2:	98 3e       	cpi	r25, 0xE8	; 232
 6f4:	dc f3       	brlt	.-10     	; 0x6ec <__mulsf3_pse+0x82>
 6f6:	86 95       	lsr	r24
 6f8:	77 95       	ror	r23
 6fa:	67 95       	ror	r22
 6fc:	b7 95       	ror	r27
 6fe:	f7 95       	ror	r31
 700:	e7 95       	ror	r30
 702:	9f 5f       	subi	r25, 0xFF	; 255
 704:	c1 f7       	brne	.-16     	; 0x6f6 <__mulsf3_pse+0x8c>
 706:	fe 2b       	or	r31, r30
 708:	88 0f       	add	r24, r24
 70a:	91 1d       	adc	r25, r1
 70c:	96 95       	lsr	r25
 70e:	87 95       	ror	r24
 710:	97 f9       	bld	r25, 7
 712:	08 95       	ret

00000714 <_exit>:
 714:	f8 94       	cli

00000716 <__stop_program>:
 716:	ff cf       	rjmp	.-2      	; 0x716 <__stop_program>
