
TEST10_KEYBOARD_CODE_NIXIE_4BIT_SHOW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  000003a8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000b00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ff  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000177  00000000  00000000  0000129f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000328  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c5  00000000  00000000  00001c44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  8a:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z10NIXIE_INITv>:

#define uchar unsigned char
//*********************数码管初始化
void NIXIE_INIT()
{
	NIXIE_DDR = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
}
  d2:	08 95       	ret

000000d4 <_Z10NIXIE_SHOWh>:

//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void NIXIE_SHOW(uchar count)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	61 97       	sbiw	r28, 0x11	; 17
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	91 e1       	ldi	r25, 0x11	; 17
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <_Z10NIXIE_SHOWh+0x1e>
	
NIXIE_PORT=nixie[count];
  fa:	fe 01       	movw	r30, r28
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	8b bb       	out	0x1b, r24	; 27

}
 104:	61 96       	adiw	r28, 0x11	; 17
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_Z10NIXIE_FLOWv>:
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
 116:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 118:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		NIXIE_SHOW(count);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
		
		delay_second(7);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
       for(uchar count=0;count<=15;count++)
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	b1 f7       	brne	.-20     	; 0x11a <_Z10NIXIE_FLOWv+0x4>
		NIXIE_SHOW(count);
		
		delay_second(7);
		   
	   }		   
    }
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z15NIXIE_4BIT_INITv>:
	//*********************数码管4位初始化
void NIXIE_4BIT_INIT()
{
	NIXIE_DDR = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
 136:	1b ba       	out	0x1b, r1	; 27
	
	//***********准备工作
	NIXIE_DDR = 0XFF;
 138:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_CON_DDR |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3);
 13a:	81 b3       	in	r24, 0x11	; 17
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	81 bb       	out	0x11, r24	; 17
}
 140:	08 95       	ret

00000142 <_Z17NIXIE_4BIT_3_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 142:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 144:	92 b3       	in	r25, 0x12	; 18
 146:	9f 60       	ori	r25, 0x0F	; 15
 148:	92 bb       	out	0x12, r25	; 18
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XF7;//*********第一位
 14a:	93 98       	cbi	0x12, 3	; 18
	
	//NIXIE_CON_PORT = ~(1 << 3);
	
	NIXIE_SHOW(T);
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 150:	6a e0       	ldi	r22, 0x0A	; 10
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 15c:	08 95       	ret

0000015e <_Z17NIXIE_4BIT_2_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 15e:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 160:	92 b3       	in	r25, 0x12	; 18
 162:	9f 60       	ori	r25, 0x0F	; 15
 164:	92 bb       	out	0x12, r25	; 18
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFB;//*********第一位
 166:	92 98       	cbi	0x12, 2	; 18
	
	//NIXIE_CON_PORT = ~(1 << 2);
	
	NIXIE_SHOW(T);
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 178:	08 95       	ret

0000017a <_Z17NIXIE_4BIT_1_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 17a:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 17c:	92 b3       	in	r25, 0x12	; 18
 17e:	9f 60       	ori	r25, 0x0F	; 15
 180:	92 bb       	out	0x12, r25	; 18
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFD;//*********第一位
 182:	91 98       	cbi	0x12, 1	; 18
	
	//NIXIE_CON_PORT = ~(1 << 1);
	
	NIXIE_SHOW(T);
 184:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 194:	08 95       	ret

00000196 <_Z17NIXIE_4BIT_0_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 196:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 198:	92 b3       	in	r25, 0x12	; 18
 19a:	9f 60       	ori	r25, 0x0F	; 15
 19c:	92 bb       	out	0x12, r25	; 18
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFE;//*********第一位
 19e:	90 98       	cbi	0x12, 0	; 18
	
	//NIXIE_CON_PORT = ~(1 << 0);
	
	NIXIE_SHOW(T);
 1a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 1b0:	08 95       	ret

000001b2 <_Z15NIXIE_4BIT_SHOWhhhh>:
//********************四位数码管显示
void NIXIE_4BIT_SHOW(uchar D ,uchar C ,uchar B ,uchar A)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	c8 2f       	mov	r28, r24
 1ba:	d6 2f       	mov	r29, r22
 1bc:	14 2f       	mov	r17, r20
 1be:	82 2f       	mov	r24, r18
	NIXIE_4BIT_0_SHOW(A);
 1c0:	0e 94 cb 00 	call	0x196	; 0x196 <_Z17NIXIE_4BIT_0_SHOWh>
	
	NIXIE_4BIT_1_SHOW(B);
 1c4:	81 2f       	mov	r24, r17
 1c6:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z17NIXIE_4BIT_1_SHOWh>
	
	NIXIE_4BIT_2_SHOW(C);
 1ca:	8d 2f       	mov	r24, r29
 1cc:	0e 94 af 00 	call	0x15e	; 0x15e <_Z17NIXIE_4BIT_2_SHOWh>
	
	NIXIE_4BIT_3_SHOW(D);
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 a1 00 	call	0x142	; 0x142 <_Z17NIXIE_4BIT_3_SHOWh>
	
	
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <_Z17KEYBOARD_INIT_M16v>:

//****************初始化

void KEYBOARD_INIT_M16()
{
	KEY_DDR = 0X00;
 1de:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0XFF;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	88 bb       	out	0x18, r24	; 24
}
 1e4:	08 95       	ret

000001e6 <_Z7keyscanv>:


/*******************读键盘************/

uchar keyscan()
{
 1e6:	cf 93       	push	r28
	KEY_DDR = 0x00;
 1e8:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0xFF;
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	88 bb       	out	0x18, r24	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
 1ee:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
 1f0:	cc 23       	and	r28, r28
 1f2:	61 f1       	breq	.+88     	; 0x24c <_Z7keyscanv+0x66>
	 {
		//****************去抖 
	delay_reduce(30);
 1f4:	6e e1       	ldi	r22, 0x1E	; 30
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr == zavr)
	{
		switch(zavr)
 200:	cf 3e       	cpi	r28, 0xEF	; 239
 202:	d1 f0       	breq	.+52     	; 0x238 <_Z7keyscanv+0x52>
 204:	c0 3f       	cpi	r28, 0xF0	; 240
 206:	38 f4       	brcc	.+14     	; 0x216 <_Z7keyscanv+0x30>
 208:	cf 3b       	cpi	r28, 0xBF	; 191
 20a:	d1 f0       	breq	.+52     	; 0x240 <_Z7keyscanv+0x5a>
 20c:	cf 3d       	cpi	r28, 0xDF	; 223
 20e:	b1 f0       	breq	.+44     	; 0x23c <_Z7keyscanv+0x56>
 210:	cf 37       	cpi	r28, 0x7F	; 127
 212:	d1 f4       	brne	.+52     	; 0x248 <_Z7keyscanv+0x62>
 214:	17 c0       	rjmp	.+46     	; 0x244 <_Z7keyscanv+0x5e>
 216:	cb 3f       	cpi	r28, 0xFB	; 251
 218:	59 f0       	breq	.+22     	; 0x230 <_Z7keyscanv+0x4a>
 21a:	cc 3f       	cpi	r28, 0xFC	; 252
 21c:	18 f4       	brcc	.+6      	; 0x224 <_Z7keyscanv+0x3e>
 21e:	c7 3f       	cpi	r28, 0xF7	; 247
 220:	99 f4       	brne	.+38     	; 0x248 <_Z7keyscanv+0x62>
 222:	08 c0       	rjmp	.+16     	; 0x234 <_Z7keyscanv+0x4e>
 224:	cd 3f       	cpi	r28, 0xFD	; 253
 226:	a1 f0       	breq	.+40     	; 0x250 <_Z7keyscanv+0x6a>
 228:	ce 3f       	cpi	r28, 0xFE	; 254
 22a:	71 f4       	brne	.+28     	; 0x248 <_Z7keyscanv+0x62>
		{
		
		case 0xfe:keyvalue = 1;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	11 c0       	rjmp	.+34     	; 0x252 <_Z7keyscanv+0x6c>
		break;
		
		case 0xfd:keyvalue = 2;
		break;
		
		case 0xfb:keyvalue = 3;
 230:	83 e0       	ldi	r24, 0x03	; 3
		break;
 232:	0f c0       	rjmp	.+30     	; 0x252 <_Z7keyscanv+0x6c>
		
		case 0xf7:keyvalue = 4;
 234:	84 e0       	ldi	r24, 0x04	; 4
		break;
 236:	0d c0       	rjmp	.+26     	; 0x252 <_Z7keyscanv+0x6c>
		
		case 0xef:keyvalue = 5;
 238:	85 e0       	ldi	r24, 0x05	; 5
		break;
 23a:	0b c0       	rjmp	.+22     	; 0x252 <_Z7keyscanv+0x6c>
		
		case 0xdf:keyvalue = 6;
 23c:	86 e0       	ldi	r24, 0x06	; 6
		break;
 23e:	09 c0       	rjmp	.+18     	; 0x252 <_Z7keyscanv+0x6c>
		
		case 0xbf:keyvalue = 7;
 240:	87 e0       	ldi	r24, 0x07	; 7
		break;
 242:	07 c0       	rjmp	.+14     	; 0x252 <_Z7keyscanv+0x6c>
		
		case 0x7f:keyvalue = 8;
 244:	88 e0       	ldi	r24, 0x08	; 8
		break;
 246:	05 c0       	rjmp	.+10     	; 0x252 <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 248:	80 e1       	ldi	r24, 0x10	; 16
 24a:	03 c0       	rjmp	.+6      	; 0x252 <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	01 c0       	rjmp	.+2      	; 0x252 <_Z7keyscanv+0x6c>
		{
		
		case 0xfe:keyvalue = 1;
		break;
		
		case 0xfd:keyvalue = 2;
 250:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <_Z8MOVE_LEDv>:

//****************键盘控制LED移位
//**************A口为LED口 B口为
void MOVE_LED()
{
	DDRA = 0XFF;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	8a bb       	out	0x1a, r24	; 26
	
	if ((KEY_PIN & 0X01) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION - 1) & 0X07;//*****为循环移动
 25a:	b0 99       	sbic	0x16, 0	; 22
 25c:	07 c0       	rjmp	.+14     	; 0x26c <_Z8MOVE_LEDv+0x16>
 25e:	80 91 73 00 	lds	r24, 0x0073
 262:	81 50       	subi	r24, 0x01	; 1
 264:	87 70       	andi	r24, 0x07	; 7
 266:	80 93 73 00 	sts	0x0073, r24
 26a:	08 c0       	rjmp	.+16     	; 0x27c <_Z8MOVE_LEDv+0x26>
	
	else if((KEY_PIN & 0X02) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION + 1) & 0X07;//******循环移动
 26c:	b1 99       	sbic	0x16, 1	; 22
 26e:	06 c0       	rjmp	.+12     	; 0x27c <_Z8MOVE_LEDv+0x26>
 270:	80 91 73 00 	lds	r24, 0x0073
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	87 70       	andi	r24, 0x07	; 7
 278:	80 93 73 00 	sts	0x0073, r24
	
	PORTA = (1 << MOVE_LED_DIRECTION);//***********点亮第 MOVE_LED_DIRECTION 位的灯
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	00 90 73 00 	lds	r0, 0x0073
 284:	02 c0       	rjmp	.+4      	; 0x28a <_Z8MOVE_LEDv+0x34>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <_Z8MOVE_LEDv+0x30>
 28e:	8b bb       	out	0x1b, r24	; 27
	
	
	
}
 290:	08 95       	ret

00000292 <_Z17KEYBOARD_MOVE_LEDv>:

void KEYBOARD_MOVE_LED()
{
	if (KEY_PIN != RECENT_KEY)
 292:	96 b3       	in	r25, 0x16	; 22
 294:	80 91 72 00 	lds	r24, 0x0072
 298:	98 17       	cp	r25, r24
 29a:	59 f0       	breq	.+22     	; 0x2b2 <_Z17KEYBOARD_MOVE_LEDv+0x20>
	{
		RECENT_KEY = KEY_PIN;
 29c:	86 b3       	in	r24, 0x16	; 22
 29e:	80 93 72 00 	sts	0x0072, r24
		
		MOVE_LED();
 2a2:	0e 94 2b 01 	call	0x256	; 0x256 <_Z8MOVE_LEDv>
		
		delay_reduce(20);
 2a6:	64 e1       	ldi	r22, 0x14	; 20
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 2b2:	08 95       	ret

000002b4 <main>:
#include <E:\kuaipan\EDEN\avr\device\lib_nixie.h>
#include <E:\kuaipan\EDEN\avr\device\lib_keyboard.h>

int main(void)
{
	NIXIE_4BIT_INIT();
 2b4:	0e 94 99 00 	call	0x132	; 0x132 <_Z15NIXIE_4BIT_INITv>
	
	uchar num = 0;
	
	uchar BUFFER[] = {0,0,0};
	
	KEY_DDR = 0X00;
 2b8:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0X00;
 2ba:	18 ba       	out	0x18, r1	; 24
        
		BUFFER[0] = num / 100;
		
		BUFFER[1] = num / 10 % 10;
		
		BUFFER[2] = num % 10;
 2bc:	ca e0       	ldi	r28, 0x0A	; 10
    {
		
		
		num = KEY_PIN;
        
		BUFFER[0] = num / 100;
 2be:	d4 e6       	ldi	r29, 0x64	; 100
	
    while(1)
    {
		
		
		num = KEY_PIN;
 2c0:	26 b3       	in	r18, 0x16	; 22
        
		BUFFER[0] = num / 100;
		
		BUFFER[1] = num / 10 % 10;
		
		BUFFER[2] = num % 10;
 2c2:	82 2f       	mov	r24, r18
 2c4:	6c 2f       	mov	r22, r28
 2c6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__udivmodqi4>
 2ca:	39 2f       	mov	r19, r25
		
		num = KEY_PIN;
        
		BUFFER[0] = num / 100;
		
		BUFFER[1] = num / 10 % 10;
 2cc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__udivmodqi4>
 2d0:	49 2f       	mov	r20, r25
    {
		
		
		num = KEY_PIN;
        
		BUFFER[0] = num / 100;
 2d2:	82 2f       	mov	r24, r18
 2d4:	6d 2f       	mov	r22, r29
 2d6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__udivmodqi4>
 2da:	28 2f       	mov	r18, r24
		
		BUFFER[1] = num / 10 % 10;
		
		BUFFER[2] = num % 10;
		
		NIXIE_4BIT_SHOW(16,BUFFER[2],BUFFER[1],BUFFER[0]);
 2dc:	80 e1       	ldi	r24, 0x10	; 16
 2de:	63 2f       	mov	r22, r19
 2e0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z15NIXIE_4BIT_SHOWhhhh>
 2e4:	ed cf       	rjmp	.-38     	; 0x2c0 <main+0xc>

000002e6 <__udivmodqi4>:
 2e6:	99 1b       	sub	r25, r25
 2e8:	79 e0       	ldi	r23, 0x09	; 9
 2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <__udivmodqi4_ep>

000002ec <__udivmodqi4_loop>:
 2ec:	99 1f       	adc	r25, r25
 2ee:	96 17       	cp	r25, r22
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <__udivmodqi4_ep>
 2f2:	96 1b       	sub	r25, r22

000002f4 <__udivmodqi4_ep>:
 2f4:	88 1f       	adc	r24, r24
 2f6:	7a 95       	dec	r23
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <__udivmodqi4_loop>
 2fa:	80 95       	com	r24
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
