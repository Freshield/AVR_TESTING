
TEST8_KEYBOARD_LED_MOVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000002aa  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004c1  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00000f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d9  00000000  00000000  000010a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ea  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  0000162e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 04 01 	call	0x208	; 0x208 <main>
  8a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z9LED_BLINKhh>:
#define LED_PIN PINA
#define uchar unsigned char

//****************指定位闪烁
void LED_BLINK(uchar num,uchar time)
{
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	c6 2f       	mov	r28, r22
	LED_DDR |= 1 << num;//******指定位为输出
  d4:	9a b3       	in	r25, 0x1a	; 26
  d6:	01 e0       	ldi	r16, 0x01	; 1
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <_Z9LED_BLINKhh+0x14>
  dc:	00 0f       	add	r16, r16
  de:	11 1f       	adc	r17, r17
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <_Z9LED_BLINKhh+0x10>
  e4:	80 2f       	mov	r24, r16
  e6:	90 2b       	or	r25, r16
  e8:	9a bb       	out	0x1a, r25	; 26
	
	LED_PORT |= 1 << num;//********指定位为点亮
  ea:	9b b3       	in	r25, 0x1b	; 27
  ec:	89 2b       	or	r24, r25
  ee:	8b bb       	out	0x1b, r24	; 27
	
	delay_second(time);
  f0:	86 2f       	mov	r24, r22
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	LED_PORT &= ~(1 << num);//*******指定位为灭
  f8:	8b b3       	in	r24, 0x1b	; 27
  fa:	00 95       	com	r16
  fc:	08 23       	and	r16, r24
  fe:	0b bb       	out	0x1b, r16	; 27
	
	delay_second(time);
 100:	8c 2f       	mov	r24, r28
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
	
	
}
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <_Z8LED_FLOWv>:


/*********************流水灯*********************/

void LED_FLOW()
{
 110:	cf 93       	push	r28
	LED_DDR = 0XFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bb       	out	0x1a, r24	; 26
	LED_PORT = 0x01;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	c8 e0       	ldi	r28, 0x08	; 8
	for(uchar K = 0;K < 8;K ++)
	{
		delay_second(5);
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>
		
		LED_PORT = LED_PORT <<1;
 124:	8b b3       	in	r24, 0x1b	; 27
 126:	88 0f       	add	r24, r24
 128:	8b bb       	out	0x1b, r24	; 27
 12a:	c1 50       	subi	r28, 0x01	; 1

void LED_FLOW()
{
	LED_DDR = 0XFF;
	LED_PORT = 0x01;
	for(uchar K = 0;K < 8;K ++)
 12c:	b9 f7       	brne	.-18     	; 0x11c <_Z8LED_FLOWv+0xc>
		LED_PORT = LED_PORT <<1;
		
		
		 
	}
}
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z17KEYBOARD_INIT_M16v>:

//****************初始化

void KEYBOARD_INIT_M16()
{
	KEY_DDR = 0X00;
 132:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0XFF;
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	88 bb       	out	0x18, r24	; 24
}
 138:	08 95       	ret

0000013a <_Z7keyscanv>:


/*******************读键盘************/

uchar keyscan()
{
 13a:	cf 93       	push	r28
	KEY_DDR = 0x00;
 13c:	17 ba       	out	0x17, r1	; 23
	
	KEY_PORT = 0xFF;
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	88 bb       	out	0x18, r24	; 24
	
	uchar keyvalue = 16;
	
	uchar zavr = KEY_PIN;
 142:	c6 b3       	in	r28, 0x16	; 22
	
	if (zavr != 0x00)
 144:	cc 23       	and	r28, r28
 146:	61 f1       	breq	.+88     	; 0x1a0 <_Z7keyscanv+0x66>
	 {
		//****************去抖 
	delay_reduce(30);
 148:	6e e1       	ldi	r22, 0x1E	; 30
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	if (zavr == zavr)
	{
		switch(zavr)
 154:	cf 3e       	cpi	r28, 0xEF	; 239
 156:	d1 f0       	breq	.+52     	; 0x18c <_Z7keyscanv+0x52>
 158:	c0 3f       	cpi	r28, 0xF0	; 240
 15a:	38 f4       	brcc	.+14     	; 0x16a <_Z7keyscanv+0x30>
 15c:	cf 3b       	cpi	r28, 0xBF	; 191
 15e:	d1 f0       	breq	.+52     	; 0x194 <_Z7keyscanv+0x5a>
 160:	cf 3d       	cpi	r28, 0xDF	; 223
 162:	b1 f0       	breq	.+44     	; 0x190 <_Z7keyscanv+0x56>
 164:	cf 37       	cpi	r28, 0x7F	; 127
 166:	d1 f4       	brne	.+52     	; 0x19c <_Z7keyscanv+0x62>
 168:	17 c0       	rjmp	.+46     	; 0x198 <_Z7keyscanv+0x5e>
 16a:	cb 3f       	cpi	r28, 0xFB	; 251
 16c:	59 f0       	breq	.+22     	; 0x184 <_Z7keyscanv+0x4a>
 16e:	cc 3f       	cpi	r28, 0xFC	; 252
 170:	18 f4       	brcc	.+6      	; 0x178 <_Z7keyscanv+0x3e>
 172:	c7 3f       	cpi	r28, 0xF7	; 247
 174:	99 f4       	brne	.+38     	; 0x19c <_Z7keyscanv+0x62>
 176:	08 c0       	rjmp	.+16     	; 0x188 <_Z7keyscanv+0x4e>
 178:	cd 3f       	cpi	r28, 0xFD	; 253
 17a:	a1 f0       	breq	.+40     	; 0x1a4 <_Z7keyscanv+0x6a>
 17c:	ce 3f       	cpi	r28, 0xFE	; 254
 17e:	71 f4       	brne	.+28     	; 0x19c <_Z7keyscanv+0x62>
		{
		
		case 0xfe:keyvalue = 1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <_Z7keyscanv+0x6c>
		break;
		
		case 0xfd:keyvalue = 2;
		break;
		
		case 0xfb:keyvalue = 3;
 184:	83 e0       	ldi	r24, 0x03	; 3
		break;
 186:	0f c0       	rjmp	.+30     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		case 0xf7:keyvalue = 4;
 188:	84 e0       	ldi	r24, 0x04	; 4
		break;
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		case 0xef:keyvalue = 5;
 18c:	85 e0       	ldi	r24, 0x05	; 5
		break;
 18e:	0b c0       	rjmp	.+22     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		case 0xdf:keyvalue = 6;
 190:	86 e0       	ldi	r24, 0x06	; 6
		break;
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		case 0xbf:keyvalue = 7;
 194:	87 e0       	ldi	r24, 0x07	; 7
		break;
 196:	07 c0       	rjmp	.+14     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		case 0x7f:keyvalue = 8;
 198:	88 e0       	ldi	r24, 0x08	; 8
		break;
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <_Z7keyscanv+0x6c>
		
		default : keyvalue = 16;
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <_Z7keyscanv+0x6c>
		}	
			
	}
	else keyvalue = 16;
	}	
	else keyvalue = 16;
 1a0:	80 e1       	ldi	r24, 0x10	; 16
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <_Z7keyscanv+0x6c>
		{
		
		case 0xfe:keyvalue = 1;
		break;
		
		case 0xfd:keyvalue = 2;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
	else keyvalue = 16;
	
	return(keyvalue);
	
	
}
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <_Z8MOVE_LEDv>:

//****************键盘控制LED移位
//**************A口为LED口 B口为
void MOVE_LED()
{
	DDRA = 0XFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	8a bb       	out	0x1a, r24	; 26
	
	if ((KEY_PIN & 0X01) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION - 1) & 0X07;//*****为循环移动
 1ae:	b0 99       	sbic	0x16, 0	; 22
 1b0:	07 c0       	rjmp	.+14     	; 0x1c0 <_Z8MOVE_LEDv+0x16>
 1b2:	80 91 61 00 	lds	r24, 0x0061
 1b6:	81 50       	subi	r24, 0x01	; 1
 1b8:	87 70       	andi	r24, 0x07	; 7
 1ba:	80 93 61 00 	sts	0x0061, r24
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <_Z8MOVE_LEDv+0x26>
	
	else if((KEY_PIN & 0X02) == 0X00) MOVE_LED_DIRECTION = (MOVE_LED_DIRECTION + 1) & 0X07;//******循环移动
 1c0:	b1 99       	sbic	0x16, 1	; 22
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <_Z8MOVE_LEDv+0x26>
 1c4:	80 91 61 00 	lds	r24, 0x0061
 1c8:	8f 5f       	subi	r24, 0xFF	; 255
 1ca:	87 70       	andi	r24, 0x07	; 7
 1cc:	80 93 61 00 	sts	0x0061, r24
	
	PORTA = (1 << MOVE_LED_DIRECTION);//***********点亮第 MOVE_LED_DIRECTION 位的灯
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	00 90 61 00 	lds	r0, 0x0061
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <_Z8MOVE_LEDv+0x34>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	0a 94       	dec	r0
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <_Z8MOVE_LEDv+0x30>
 1e2:	8b bb       	out	0x1b, r24	; 27
	
	
	
}
 1e4:	08 95       	ret

000001e6 <_Z17KEYBOARD_MOVE_LEDv>:

void KEYBOARD_MOVE_LED()
{
	if (KEY_PIN != RECENT_KEY)
 1e6:	96 b3       	in	r25, 0x16	; 22
 1e8:	80 91 60 00 	lds	r24, 0x0060
 1ec:	98 17       	cp	r25, r24
 1ee:	59 f0       	breq	.+22     	; 0x206 <_Z17KEYBOARD_MOVE_LEDv+0x20>
	{
		RECENT_KEY = KEY_PIN;
 1f0:	86 b3       	in	r24, 0x16	; 22
 1f2:	80 93 60 00 	sts	0x0060, r24
		
		MOVE_LED();
 1f6:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z8MOVE_LEDv>
		
		delay_reduce(20);
 1fa:	64 e1       	ldi	r22, 0x14	; 20
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
 206:	08 95       	ret

00000208 <main>:
#include <E:\kuaipan\EDEN\avr\device\lib_led.h>
#include <E:\kuaipan\EDEN\avr\device\lib_keyboard.h>

int main(void)
{
	KEYBOARD_INIT_M16();
 208:	0e 94 99 00 	call	0x132	; 0x132 <_Z17KEYBOARD_INIT_M16v>
	
	
	 
    while(1)
    {
        KEYBOARD_MOVE_LED();
 20c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <_Z17KEYBOARD_MOVE_LEDv>
 210:	fd cf       	rjmp	.-6      	; 0x20c <main+0x4>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
