
TEST9_MATRIX_KEYBOARD_NIXIE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000003ca  0000043e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fe  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000186  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  000016e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e6  00000000  00000000  00001b0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  8a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z12delay_reducel>:

#ifndef LIB_DELAY_H_
#define LIB_DELAY_H_

void delay_reduce(long int delay)
{
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	a1 05       	cpc	r26, r1
  9a:	b1 05       	cpc	r27, r1
  9c:	41 f0       	breq	.+16     	; 0xae <_Z12delay_reducel+0x1c>
	{
		delay--;
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	a1 09       	sbc	r26, r1
  a2:	b1 09       	sbc	r27, r1
		asm volatile ("nop");
  a4:	00 00       	nop
    for(;delay > 1;delay--)
	{
		asm volatile ("nop");
	}
	*/
	while (delay)
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	a1 05       	cpc	r26, r1
  aa:	b1 05       	cpc	r27, r1
  ac:	c1 f7       	brne	.-16     	; 0x9e <_Z12delay_reducel+0xc>
  ae:	08 95       	ret

000000b0 <_Z12delay_secondi>:

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  b0:	00 97       	sbiw	r24, 0x00	; 0
  b2:	41 f4       	brne	.+16     	; 0xc4 <_Z12delay_secondi+0x14>
  b4:	08 95       	ret
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
	{
		for(j=65535;j!=0;j--);
  ba:	e9 f7       	brne	.-6      	; 0xb6 <_Z12delay_secondi+0x6>
		{
			asm volatile ("nop");
  bc:	00 00       	nop

void delay_second(int i) 
{
	
	int j;
	for(;i!=0;i--)
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	19 f4       	brne	.+6      	; 0xc8 <_Z12delay_secondi+0x18>
  c2:	08 95       	ret
		asm volatile ("nop");
	}
}

void delay_second(int i) 
{
  c4:	4f ef       	ldi	r20, 0xFF	; 255
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	9a 01       	movw	r18, r20
  ca:	f5 cf       	rjmp	.-22     	; 0xb6 <_Z12delay_secondi+0x6>

000000cc <_Z10NIXIE_INITv>:

#define uchar unsigned char
//*********************数码管初始化
void NIXIE_INIT()
{
	NIXIE_DDR = 0xff;
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
	
}
  d2:	08 95       	ret

000000d4 <_Z10NIXIE_SHOWh>:

//********************显示数码管 输入序号显示相应的数字 暂时没有加入英文 最后一个为错值
void NIXIE_SHOW(uchar count)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	61 97       	sbiw	r28, 0x11	; 17
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
uchar nixie[17]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x00};
  e8:	de 01       	movw	r26, r28
  ea:	11 96       	adiw	r26, 0x01	; 1
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	91 e1       	ldi	r25, 0x11	; 17
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	91 50       	subi	r25, 0x01	; 1
  f8:	e1 f7       	brne	.-8      	; 0xf2 <_Z10NIXIE_SHOWh+0x1e>
	
NIXIE_PORT=nixie[count];
  fa:	fe 01       	movw	r30, r28
  fc:	e8 0f       	add	r30, r24
  fe:	f1 1d       	adc	r31, r1
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	8b bb       	out	0x1b, r24	; 27

}
 104:	61 96       	adiw	r28, 0x11	; 17
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_Z10NIXIE_FLOWv>:
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
 116:	cf 93       	push	r28
       for(uchar count=0;count<=15;count++)
 118:	c0 e0       	ldi	r28, 0x00	; 0
	   {
		  
		    
		NIXIE_SHOW(count);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
		
		delay_second(7);
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z12delay_secondi>

}
//*******************循环显示0到9 延时没有严格计算
void NIXIE_FLOW()
{
       for(uchar count=0;count<=15;count++)
 128:	cf 5f       	subi	r28, 0xFF	; 255
 12a:	c0 31       	cpi	r28, 0x10	; 16
 12c:	b1 f7       	brne	.-20     	; 0x11a <_Z10NIXIE_FLOWv+0x4>
		NIXIE_SHOW(count);
		
		delay_second(7);
		   
	   }		   
    }
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <_Z15NIXIE_4BIT_INITv>:
	//*********************数码管4位初始化
void NIXIE_4BIT_INIT()
{
	NIXIE_DDR = 0xff;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_PORT = 0x00;
 136:	1b ba       	out	0x1b, r1	; 27
	
	//***********准备工作
	NIXIE_DDR = 0XFF;
 138:	8a bb       	out	0x1a, r24	; 26
	
	NIXIE_CON_DDR |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3);
 13a:	87 b3       	in	r24, 0x17	; 23
 13c:	8f 60       	ori	r24, 0x0F	; 15
 13e:	87 bb       	out	0x17, r24	; 23
}
 140:	08 95       	ret

00000142 <_Z17NIXIE_4BIT_3_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 142:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 144:	98 b3       	in	r25, 0x18	; 24
 146:	9f 60       	ori	r25, 0x0F	; 15
 148:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XF7;//*********第一位
 14a:	c3 98       	cbi	0x18, 3	; 24
	
	//NIXIE_CON_PORT = ~(1 << 3);
	
	NIXIE_SHOW(T);
 14c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 150:	6a e0       	ldi	r22, 0x0A	; 10
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 15c:	08 95       	ret

0000015e <_Z17NIXIE_4BIT_2_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 15e:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 160:	98 b3       	in	r25, 0x18	; 24
 162:	9f 60       	ori	r25, 0x0F	; 15
 164:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFB;//*********第一位
 166:	c2 98       	cbi	0x18, 2	; 24
	
	//NIXIE_CON_PORT = ~(1 << 2);
	
	NIXIE_SHOW(T);
 168:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 178:	08 95       	ret

0000017a <_Z17NIXIE_4BIT_1_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 17a:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 17c:	98 b3       	in	r25, 0x18	; 24
 17e:	9f 60       	ori	r25, 0x0F	; 15
 180:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFD;//*********第一位
 182:	c1 98       	cbi	0x18, 1	; 24
	
	//NIXIE_CON_PORT = ~(1 << 1);
	
	NIXIE_SHOW(T);
 184:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 188:	6a e0       	ldi	r22, 0x0A	; 10
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 194:	08 95       	ret

00000196 <_Z17NIXIE_4BIT_0_SHOWh>:
{
	
	
	//******************第一位
	
	NIXIE_PORT = 0X00;
 196:	1b ba       	out	0x1b, r1	; 27
	
	NIXIE_CON_PORT = NIXIE_CON_PORT | 0X0F;//*********	清低四位 
 198:	98 b3       	in	r25, 0x18	; 24
 19a:	9f 60       	ori	r25, 0x0F	; 15
 19c:	98 bb       	out	0x18, r25	; 24
	
	NIXIE_CON_PORT = NIXIE_CON_PORT & 0XFE;//*********第一位
 19e:	c0 98       	cbi	0x18, 0	; 24
	
	//NIXIE_CON_PORT = ~(1 << 0);
	
	NIXIE_SHOW(T);
 1a0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
	
	delay_reduce(10);
 1a4:	6a e0       	ldi	r22, 0x0A	; 10
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	
}	
 1b0:	08 95       	ret

000001b2 <_Z15NIXIE_4BIT_SHOWhhhh>:
//********************四位数码管显示
void NIXIE_4BIT_SHOW(uchar D ,uchar C ,uchar B ,uchar A)
{
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	c8 2f       	mov	r28, r24
 1ba:	d6 2f       	mov	r29, r22
 1bc:	14 2f       	mov	r17, r20
 1be:	82 2f       	mov	r24, r18
	NIXIE_4BIT_0_SHOW(A);
 1c0:	0e 94 cb 00 	call	0x196	; 0x196 <_Z17NIXIE_4BIT_0_SHOWh>
	
	NIXIE_4BIT_1_SHOW(B);
 1c4:	81 2f       	mov	r24, r17
 1c6:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z17NIXIE_4BIT_1_SHOWh>
	
	NIXIE_4BIT_2_SHOW(C);
 1ca:	8d 2f       	mov	r24, r29
 1cc:	0e 94 af 00 	call	0x15e	; 0x15e <_Z17NIXIE_4BIT_2_SHOWh>
	
	NIXIE_4BIT_3_SHOW(D);
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 a1 00 	call	0x142	; 0x142 <_Z17NIXIE_4BIT_3_SHOWh>
	
	
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <_Z15NORMAL_KEY_DOWNv>:
uchar NORMAL_KEY_DOWN()
{
	
	
	
	delay_reduce(100);
 1de:	64 e6       	ldi	r22, 0x64	; 100
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	uchar i;
	if(MATRIX_KEY_PIN!=0x0f)
 1ea:	96 b3       	in	r25, 0x16	; 22
	{
		i=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	9f 30       	cpi	r25, 0x0F	; 15
 1f0:	09 f4       	brne	.+2      	; 0x1f4 <_Z15NORMAL_KEY_DOWNv+0x16>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
	{
		i=0;
	}
	return i;

}
 1f4:	08 95       	ret

000001f6 <_Z15NORMAL_KEY_READv>:

//****************读取键值
uchar NORMAL_KEY_READ()
{
 1f6:	cf 93       	push	r28
	uchar KEY_NUM=16;
	//先高四位输出 低四位输入 高四位清零 通过读取键值判断键位
	MATRIX_KEY_DDR=0XF0;MATRIX_KEY_PORT=0X0F;delay_reduce(10);
 1f8:	80 ef       	ldi	r24, 0xF0	; 240
 1fa:	87 bb       	out	0x17, r24	; 23
 1fc:	8f e0       	ldi	r24, 0x0F	; 15
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	switch(MATRIX_KEY_PIN)
 20c:	86 b3       	in	r24, 0x16	; 22
 20e:	8b 30       	cpi	r24, 0x0B	; 11
 210:	59 f0       	breq	.+22     	; 0x228 <_Z15NORMAL_KEY_READv+0x32>
 212:	8c 30       	cpi	r24, 0x0C	; 12
 214:	18 f4       	brcc	.+6      	; 0x21c <_Z15NORMAL_KEY_READv+0x26>
 216:	87 30       	cpi	r24, 0x07	; 7
 218:	59 f4       	brne	.+22     	; 0x230 <_Z15NORMAL_KEY_READv+0x3a>
 21a:	08 c0       	rjmp	.+16     	; 0x22c <_Z15NORMAL_KEY_READv+0x36>
 21c:	8d 30       	cpi	r24, 0x0D	; 13
 21e:	51 f0       	breq	.+20     	; 0x234 <_Z15NORMAL_KEY_READv+0x3e>
 220:	8e 30       	cpi	r24, 0x0E	; 14
 222:	31 f4       	brne	.+12     	; 0x230 <_Z15NORMAL_KEY_READv+0x3a>
	{
		case 0x0e:KEY_NUM=0;break;
 224:	c0 e0       	ldi	r28, 0x00	; 0
 226:	07 c0       	rjmp	.+14     	; 0x236 <_Z15NORMAL_KEY_READv+0x40>
		
		case 0x0d:KEY_NUM=1;break;
		
		case 0x0b:KEY_NUM=2;break;
 228:	c2 e0       	ldi	r28, 0x02	; 2
 22a:	05 c0       	rjmp	.+10     	; 0x236 <_Z15NORMAL_KEY_READv+0x40>
		
		case 0x07:KEY_NUM=3;break;
 22c:	c3 e0       	ldi	r28, 0x03	; 3
 22e:	03 c0       	rjmp	.+6      	; 0x236 <_Z15NORMAL_KEY_READv+0x40>
		
		default:KEY_NUM=16;
 230:	c0 e1       	ldi	r28, 0x10	; 16
 232:	01 c0       	rjmp	.+2      	; 0x236 <_Z15NORMAL_KEY_READv+0x40>
	
	switch(MATRIX_KEY_PIN)
	{
		case 0x0e:KEY_NUM=0;break;
		
		case 0x0d:KEY_NUM=1;break;
 234:	c1 e0       	ldi	r28, 0x01	; 1
		
		default:KEY_NUM=16;
		
	}
	//第二次是 高四位输入 低四位输出 低四位清零 读取键值 加上相应的数值
	MATRIX_KEY_DDR=0X0f;MATRIX_KEY_PORT=0Xf0;delay_reduce(10);
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	87 bb       	out	0x17, r24	; 23
 23a:	80 ef       	ldi	r24, 0xF0	; 240
 23c:	88 bb       	out	0x18, r24	; 24
 23e:	6a e0       	ldi	r22, 0x0A	; 10
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	
	switch(MATRIX_KEY_PIN)
 24a:	86 b3       	in	r24, 0x16	; 22
 24c:	80 3b       	cpi	r24, 0xB0	; 176
 24e:	69 f0       	breq	.+26     	; 0x26a <_Z15NORMAL_KEY_READv+0x74>
 250:	81 3b       	cpi	r24, 0xB1	; 177
 252:	18 f4       	brcc	.+6      	; 0x25a <_Z15NORMAL_KEY_READv+0x64>
 254:	80 37       	cpi	r24, 0x70	; 112
 256:	29 f4       	brne	.+10     	; 0x262 <_Z15NORMAL_KEY_READv+0x6c>
 258:	0a c0       	rjmp	.+20     	; 0x26e <_Z15NORMAL_KEY_READv+0x78>
 25a:	80 3d       	cpi	r24, 0xD0	; 208
 25c:	21 f0       	breq	.+8      	; 0x266 <_Z15NORMAL_KEY_READv+0x70>
 25e:	80 3e       	cpi	r24, 0xE0	; 224
 260:	39 f0       	breq	.+14     	; 0x270 <_Z15NORMAL_KEY_READv+0x7a>
		
		case 0xb0:KEY_NUM += 8;break;
		
		case 0x70:KEY_NUM += 12;break;
		
		default:KEY_NUM = 16;
 262:	c0 e1       	ldi	r28, 0x10	; 16
 264:	05 c0       	rjmp	.+10     	; 0x270 <_Z15NORMAL_KEY_READv+0x7a>
	
	switch(MATRIX_KEY_PIN)
	{
		case 0xe0:KEY_NUM += 0;break;
		
		case 0xd0:KEY_NUM += 4;break;
 266:	cc 5f       	subi	r28, 0xFC	; 252
 268:	03 c0       	rjmp	.+6      	; 0x270 <_Z15NORMAL_KEY_READv+0x7a>
		
		case 0xb0:KEY_NUM += 8;break;
 26a:	c8 5f       	subi	r28, 0xF8	; 248
 26c:	01 c0       	rjmp	.+2      	; 0x270 <_Z15NORMAL_KEY_READv+0x7a>
		
		case 0x70:KEY_NUM += 12;break;
 26e:	c4 5f       	subi	r28, 0xF4	; 244
		
		default:KEY_NUM = 16;
	}
	return KEY_NUM;
}
 270:	8c 2f       	mov	r24, r28
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <_Z17N_SQUARE_KEY_READv>:
//*********************************************************************************************************//
//**************按键由PD2来进行终端（中断0） 有中断后读取键值与编码表比较 
uchar N_SQUARE_KEY_READ()
{
	
	MATRIX_KEY_DDR = 0xF0;
 276:	80 ef       	ldi	r24, 0xF0	; 240
 278:	87 bb       	out	0x17, r24	; 23
	MATRIX_KEY_PORT = 0x00;
 27a:	18 ba       	out	0x18, r1	; 24
	DDRD = 0X00;
 27c:	11 ba       	out	0x11, r1	; 17
	PORTD = 0Xff;//***********重置PD2准备键值
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	82 bb       	out	0x12, r24	; 18
	uchar REAL_NUM = 16;//******16为错值
	uchar KEY_NUM;
	uchar MEDIM_NUM;
	
	//******************第一行搜索
	MATRIX_KEY_DDR = 0x01;//******第一位为输出其他为输入
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	87 bb       	out	0x17, r24	; 23
	MATRIX_KEY_PORT = 0x01;//*****第一位输出1
 286:	88 bb       	out	0x18, r24	; 24
	delay_reduce(100);       //*******一定要有延时 否则无法显示 电流反应没有那么快
 288:	64 e6       	ldi	r22, 0x64	; 100
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	if (PIND != 0xff) 
 294:	80 b3       	in	r24, 0x10	; 16
 296:	8f 3f       	cpi	r24, 0xFF	; 255
 298:	a1 f0       	breq	.+40     	; 0x2c2 <_Z17N_SQUARE_KEY_READv+0x4c>
    {
		KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
 29a:	86 b3       	in	r24, 0x16	; 22
		    switch(KEY_NUM)
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	59 f0       	breq	.+22     	; 0x2b6 <_Z17N_SQUARE_KEY_READv+0x40>
 2a0:	84 30       	cpi	r24, 0x04	; 4
 2a2:	18 f4       	brcc	.+6      	; 0x2aa <_Z17N_SQUARE_KEY_READv+0x34>
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	59 f4       	brne	.+22     	; 0x2be <_Z17N_SQUARE_KEY_READv+0x48>
 2a8:	08 c0       	rjmp	.+16     	; 0x2ba <_Z17N_SQUARE_KEY_READv+0x44>
 2aa:	85 30       	cpi	r24, 0x05	; 5
 2ac:	09 f4       	brne	.+2      	; 0x2b0 <_Z17N_SQUARE_KEY_READv+0x3a>
 2ae:	6e c0       	rjmp	.+220    	; 0x38c <_Z17N_SQUARE_KEY_READv+0x116>
 2b0:	89 30       	cpi	r24, 0x09	; 9
 2b2:	29 f4       	brne	.+10     	; 0x2be <_Z17N_SQUARE_KEY_READv+0x48>
 2b4:	69 c0       	rjmp	.+210    	; 0x388 <_Z17N_SQUARE_KEY_READv+0x112>
		    {
			    case 0x09: REAL_NUM = 0;break;
			    
			    case 0x05: REAL_NUM = 4;break;
			    
			    case 0x03: REAL_NUM = 8;break;
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	08 95       	ret
			     
			    case 0x01: REAL_NUM = 12;break;
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	08 95       	ret
			    
				default:REAL_NUM = 16;
 2be:	80 e1       	ldi	r24, 0x10	; 16
 2c0:	08 95       	ret
    }
//****************************************************************第二行搜索	
	else
	{
		
	MATRIX_KEY_DDR = 0x02;//******第二位为输出其他为输入
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	87 bb       	out	0x17, r24	; 23
	MATRIX_KEY_PORT = 0x02;//*****第二位输出1
 2c6:	88 bb       	out	0x18, r24	; 24
	delay_reduce(100);       //*******一定要有延时 否则无法显示 电流反应没有那么快
 2c8:	64 e6       	ldi	r22, 0x64	; 100
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
    if (PIND != 0xff) 
 2d4:	80 b3       	in	r24, 0x10	; 16
 2d6:	8f 3f       	cpi	r24, 0xFF	; 255
 2d8:	a9 f0       	breq	.+42     	; 0x304 <_Z17N_SQUARE_KEY_READv+0x8e>
    {
		KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
 2da:	86 b3       	in	r24, 0x16	; 22
		    switch(KEY_NUM)
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	71 f0       	breq	.+28     	; 0x2fc <_Z17N_SQUARE_KEY_READv+0x86>
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	18 f4       	brcc	.+6      	; 0x2ea <_Z17N_SQUARE_KEY_READv+0x74>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	61 f4       	brne	.+24     	; 0x300 <_Z17N_SQUARE_KEY_READv+0x8a>
 2e8:	07 c0       	rjmp	.+14     	; 0x2f8 <_Z17N_SQUARE_KEY_READv+0x82>
 2ea:	86 30       	cpi	r24, 0x06	; 6
 2ec:	09 f4       	brne	.+2      	; 0x2f0 <_Z17N_SQUARE_KEY_READv+0x7a>
 2ee:	50 c0       	rjmp	.+160    	; 0x390 <_Z17N_SQUARE_KEY_READv+0x11a>
 2f0:	8a 30       	cpi	r24, 0x0A	; 10
 2f2:	31 f4       	brne	.+12     	; 0x300 <_Z17N_SQUARE_KEY_READv+0x8a>
		    {
			    case 0x0a: REAL_NUM = 1;break;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	08 95       	ret
			    
			    case 0x06: REAL_NUM = 5;break;
			    
			    case 0x02: REAL_NUM = 9;break;
 2f8:	89 e0       	ldi	r24, 0x09	; 9
 2fa:	08 95       	ret
			     
			    case 0x03: REAL_NUM = 13;break;
 2fc:	8d e0       	ldi	r24, 0x0D	; 13
 2fe:	08 95       	ret
			    
				default:REAL_NUM = 16;
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	08 95       	ret
    }
//***********************************************************第三行搜索	
	else
	{
		
	MATRIX_KEY_DDR = 0x04;//******第三位为输出其他为输入
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	87 bb       	out	0x17, r24	; 23
	MATRIX_KEY_PORT = 0x04;//*****第三位输出1
 308:	88 bb       	out	0x18, r24	; 24
	delay_reduce(100);       //*******一定要有延时 否则无法显示 电流反应没有那么快
 30a:	64 e6       	ldi	r22, 0x64	; 100
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
 316:	86 b3       	in	r24, 0x16	; 22
	
    if (PIND != 0xff) 
 318:	90 b3       	in	r25, 0x10	; 16
 31a:	9f 3f       	cpi	r25, 0xFF	; 255
 31c:	99 f0       	breq	.+38     	; 0x344 <_Z17N_SQUARE_KEY_READv+0xce>
    {
		    switch(KEY_NUM)
 31e:	85 30       	cpi	r24, 0x05	; 5
 320:	69 f0       	breq	.+26     	; 0x33c <_Z17N_SQUARE_KEY_READv+0xc6>
 322:	86 30       	cpi	r24, 0x06	; 6
 324:	18 f4       	brcc	.+6      	; 0x32c <_Z17N_SQUARE_KEY_READv+0xb6>
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	59 f4       	brne	.+22     	; 0x340 <_Z17N_SQUARE_KEY_READv+0xca>
 32a:	34 c0       	rjmp	.+104    	; 0x394 <_Z17N_SQUARE_KEY_READv+0x11e>
 32c:	86 30       	cpi	r24, 0x06	; 6
 32e:	21 f0       	breq	.+8      	; 0x338 <_Z17N_SQUARE_KEY_READv+0xc2>
 330:	8c 30       	cpi	r24, 0x0C	; 12
 332:	31 f4       	brne	.+12     	; 0x340 <_Z17N_SQUARE_KEY_READv+0xca>
		    {
			    case 0x0c: REAL_NUM = 2;break;
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	08 95       	ret
			    
			    case 0x04: REAL_NUM = 6;break;
			    
			    case 0x06: REAL_NUM = 10;break;
 338:	8a e0       	ldi	r24, 0x0A	; 10
 33a:	08 95       	ret
			     
			    case 0x05: REAL_NUM = 14;break;
 33c:	8e e0       	ldi	r24, 0x0E	; 14
 33e:	08 95       	ret
			    
				default:REAL_NUM = 16;
 340:	80 e1       	ldi	r24, 0x10	; 16
 342:	08 95       	ret
    }
//************************************************************第四行搜索	
	else
	{
		
	MATRIX_KEY_DDR = 0x08;//******第四位为输出其他为输入
 344:	88 e0       	ldi	r24, 0x08	; 8
 346:	87 bb       	out	0x17, r24	; 23
	MATRIX_KEY_PORT = 0x08;//*****第四位输出1
 348:	88 bb       	out	0x18, r24	; 24
	delay_reduce(100);       //*******一定要有延时 否则无法显示 电流反应没有那么快
 34a:	64 e6       	ldi	r22, 0x64	; 100
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
	KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
 356:	86 b3       	in	r24, 0x16	; 22
	
    if (PIND != 0xff) 
 358:	90 b3       	in	r25, 0x10	; 16
 35a:	9f 3f       	cpi	r25, 0xFF	; 255
 35c:	a1 f0       	breq	.+40     	; 0x386 <_Z17N_SQUARE_KEY_READv+0x110>
    {
		    switch(KEY_NUM)
 35e:	89 30       	cpi	r24, 0x09	; 9
 360:	71 f0       	breq	.+28     	; 0x37e <_Z17N_SQUARE_KEY_READv+0x108>
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	18 f4       	brcc	.+6      	; 0x36c <_Z17N_SQUARE_KEY_READv+0xf6>
 366:	88 30       	cpi	r24, 0x08	; 8
 368:	61 f4       	brne	.+24     	; 0x382 <_Z17N_SQUARE_KEY_READv+0x10c>
 36a:	05 c0       	rjmp	.+10     	; 0x376 <_Z17N_SQUARE_KEY_READv+0x100>
 36c:	8a 30       	cpi	r24, 0x0A	; 10
 36e:	29 f0       	breq	.+10     	; 0x37a <_Z17N_SQUARE_KEY_READv+0x104>
 370:	8c 30       	cpi	r24, 0x0C	; 12
 372:	39 f4       	brne	.+14     	; 0x382 <_Z17N_SQUARE_KEY_READv+0x10c>
 374:	11 c0       	rjmp	.+34     	; 0x398 <_Z17N_SQUARE_KEY_READv+0x122>
		    {
			    case 0x08: REAL_NUM = 3;break;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	08 95       	ret
			    
			    case 0x0c: REAL_NUM = 7;break;
			    
			    case 0x0a: REAL_NUM = 11;break;
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	08 95       	ret
			     
			    case 0x09: REAL_NUM = 15;break;
 37e:	8f e0       	ldi	r24, 0x0F	; 15
 380:	08 95       	ret
			    
				default:REAL_NUM = 16;
 382:	80 e1       	ldi	r24, 0x10	; 16
 384:	08 95       	ret
 386:	08 95       	ret
	if (PIND != 0xff) 
    {
		KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
		    switch(KEY_NUM)
		    {
			    case 0x09: REAL_NUM = 0;break;
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
			    
			    case 0x05: REAL_NUM = 4;break;
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	08 95       	ret
		KEY_NUM = MATRIX_KEY_PIN;//*****读取键值
		    switch(KEY_NUM)
		    {
			    case 0x0a: REAL_NUM = 1;break;
			    
			    case 0x06: REAL_NUM = 5;break;
 390:	85 e0       	ldi	r24, 0x05	; 5
 392:	08 95       	ret
    {
		    switch(KEY_NUM)
		    {
			    case 0x0c: REAL_NUM = 2;break;
			    
			    case 0x04: REAL_NUM = 6;break;
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	08 95       	ret
    {
		    switch(KEY_NUM)
		    {
			    case 0x08: REAL_NUM = 3;break;
			    
			    case 0x0c: REAL_NUM = 7;break;
 398:	87 e0       	ldi	r24, 0x07	; 7
	}
	
	}
	
	
}
 39a:	08 95       	ret

0000039c <main>:
#include <E:\kuaipan\EDEN\avr\device\lib_matrix_keyboard.h>

int main(void)
{
	
	NIXIE_INIT();
 39c:	0e 94 66 00 	call	0xcc	; 0xcc <_Z10NIXIE_INITv>
	
    while(1)
    {
       if (NORMAL_KEY_DOWN() == 1)
 3a0:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z15NORMAL_KEY_DOWNv>
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x4>
       {
		   delay_reduce(100);
 3a8:	64 e6       	ldi	r22, 0x64	; 100
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <_Z12delay_reducel>
		   
		   if (NORMAL_KEY_DOWN() == 1)
 3b4:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z15NORMAL_KEY_DOWNv>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	91 f7       	brne	.-28     	; 0x3a0 <main+0x4>
		   {
			   
			   NIXIE_SHOW(NORMAL_KEY_READ());
 3bc:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z15NORMAL_KEY_READv>
 3c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10NIXIE_SHOWh>
 3c4:	ed cf       	rjmp	.-38     	; 0x3a0 <main+0x4>

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
